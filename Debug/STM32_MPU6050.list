
STM32_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800c4e8  0800c4e8  0000d4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c914  0800c914  0000e344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c914  0800c914  0000d914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c91c  0800c91c  0000e344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c91c  0800c91c  0000d91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c920  0800c920  0000d920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800c924  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001384  20000344  0800cc68  0000e344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016c8  0800cc68  0000e6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb7b  00000000  00000000  0000e36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003007  00000000  00000000  0001dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00020ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8e  00000000  00000000  00021d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a603  00000000  00000000  00022796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130fd  00000000  00000000  0003cd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000890f4  00000000  00000000  0004fe96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8f8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  000d8fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dda20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c4d0 	.word	0x0800c4d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800c4d0 	.word	0x0800c4d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <MPU6050_Init>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

void MPU6050_Init(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af04      	add	r7, sp, #16
	uint8_t value = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MNGT_1_ADDR, 1, &value, 1, 1000);
 8000d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2301      	movs	r3, #1
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	226b      	movs	r2, #107	@ 0x6b
 8000d60:	21d0      	movs	r1, #208	@ 0xd0
 8000d62:	481a      	ldr	r0, [pc, #104]	@ (8000dcc <MPU6050_Init+0x88>)
 8000d64:	f001 f874 	bl	8001e50 <HAL_I2C_Mem_Write>

	value = 0x07;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_ADDR, 1, &value, 1, 1000);
 8000d6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d70:	9302      	str	r3, [sp, #8]
 8000d72:	2301      	movs	r3, #1
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	2219      	movs	r2, #25
 8000d7e:	21d0      	movs	r1, #208	@ 0xd0
 8000d80:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <MPU6050_Init+0x88>)
 8000d82:	f001 f865 	bl	8001e50 <HAL_I2C_Mem_Write>

	value = 0x10; // 1000 dps
 8000d86:	2310      	movs	r3, #16
 8000d88:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_ADDR, 1, &value, 1, 1000);
 8000d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	2301      	movs	r3, #1
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	221b      	movs	r2, #27
 8000d9c:	21d0      	movs	r1, #208	@ 0xd0
 8000d9e:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <MPU6050_Init+0x88>)
 8000da0:	f001 f856 	bl	8001e50 <HAL_I2C_Mem_Write>

	value = 0x18; // 16g
 8000da4:	2318      	movs	r3, #24
 8000da6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_ADDR, 1, &value, 1, 1000);
 8000da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2301      	movs	r3, #1
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	221c      	movs	r2, #28
 8000dba:	21d0      	movs	r1, #208	@ 0xd0
 8000dbc:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <MPU6050_Init+0x88>)
 8000dbe:	f001 f847 	bl	8001e50 <HAL_I2C_Mem_Write>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000360 	.word	0x20000360

08000dd0 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(MPU6050_Accel *accel){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af04      	add	r7, sp, #16
 8000dd6:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];
	int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;

	// Read 6 BYTES starting from ACCEL_XOUT_H (0x3B)
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000dd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	2306      	movs	r3, #6
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	223b      	movs	r2, #59	@ 0x3b
 8000dec:	21d0      	movs	r1, #208	@ 0xd0
 8000dee:	4834      	ldr	r0, [pc, #208]	@ (8000ec0 <MPU6050_Read_Accel+0xf0>)
 8000df0:	f001 f928 	bl	8002044 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000df4:	7b3b      	ldrb	r3, [r7, #12]
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	7b7b      	ldrb	r3, [r7, #13]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	82fb      	strh	r3, [r7, #22]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	82bb      	strh	r3, [r7, #20]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000e14:	7c3b      	ldrb	r3, [r7, #16]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	7c7b      	ldrb	r3, [r7, #17]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	827b      	strh	r3, [r7, #18]

	accel->Ax = (float)Accel_X_RAW / 208.837880418;
 8000e24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff37 	bl	8000c9c <__aeabi_i2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff faf9 	bl	8000428 <__aeabi_f2d>
 8000e36:	a320      	add	r3, pc, #128	@ (adr r3, 8000eb8 <MPU6050_Read_Accel+0xe8>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fc76 	bl	800072c <__aeabi_ddiv>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fe1e 	bl	8000a88 <__aeabi_d2f>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
	accel->Ay = (float)Accel_Y_RAW / 208.837880418;
 8000e52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff20 	bl	8000c9c <__aeabi_i2f>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fae2 	bl	8000428 <__aeabi_f2d>
 8000e64:	a314      	add	r3, pc, #80	@ (adr r3, 8000eb8 <MPU6050_Read_Accel+0xe8>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fc5f 	bl	800072c <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fe07 	bl	8000a88 <__aeabi_d2f>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	605a      	str	r2, [r3, #4]
	accel->Az = (float)Accel_Z_RAW / 208.837880418;
 8000e80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff09 	bl	8000c9c <__aeabi_i2f>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff facb 	bl	8000428 <__aeabi_f2d>
 8000e92:	a309      	add	r3, pc, #36	@ (adr r3, 8000eb8 <MPU6050_Read_Accel+0xe8>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	f7ff fc48 	bl	800072c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fdf0 	bl	8000a88 <__aeabi_d2f>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	609a      	str	r2, [r3, #8]
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	ea98289a 	.word	0xea98289a
 8000ebc:	406a1acf 	.word	0x406a1acf
 8000ec0:	20000360 	.word	0x20000360
 8000ec4:	00000000 	.word	0x00000000

08000ec8 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(MPU6050_Gyro *gyro){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];
	int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;

	// Read 6 BYTES starting from ACCEL_XOUT_H (0x3B)
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8000ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	2243      	movs	r2, #67	@ 0x43
 8000ee4:	21d0      	movs	r1, #208	@ 0xd0
 8000ee6:	4834      	ldr	r0, [pc, #208]	@ (8000fb8 <MPU6050_Read_Gyro+0xf0>)
 8000ee8:	f001 f8ac 	bl	8002044 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000eec:	7b3b      	ldrb	r3, [r7, #12]
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	7b7b      	ldrb	r3, [r7, #13]
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	82fb      	strh	r3, [r7, #22]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	82bb      	strh	r3, [r7, #20]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000f0c:	7c3b      	ldrb	r3, [r7, #16]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	7c7b      	ldrb	r3, [r7, #17]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	827b      	strh	r3, [r7, #18]

	gyro->Gx = (float)Gyro_X_RAW / 32.8;
 8000f1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff febb 	bl	8000c9c <__aeabi_i2f>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fa7d 	bl	8000428 <__aeabi_f2d>
 8000f2e:	a320      	add	r3, pc, #128	@ (adr r3, 8000fb0 <MPU6050_Read_Gyro+0xe8>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fbfa 	bl	800072c <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fda2 	bl	8000a88 <__aeabi_d2f>
 8000f44:	4602      	mov	r2, r0
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
	gyro->Gy = (float)Gyro_Y_RAW / 32.8;
 8000f4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fea4 	bl	8000c9c <__aeabi_i2f>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa66 	bl	8000428 <__aeabi_f2d>
 8000f5c:	a314      	add	r3, pc, #80	@ (adr r3, 8000fb0 <MPU6050_Read_Gyro+0xe8>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fbe3 	bl	800072c <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fd8b 	bl	8000a88 <__aeabi_d2f>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	605a      	str	r2, [r3, #4]
	gyro->Gz = (float)Gyro_Z_RAW / 32.8;
 8000f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fe8d 	bl	8000c9c <__aeabi_i2f>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa4f 	bl	8000428 <__aeabi_f2d>
 8000f8a:	a309      	add	r3, pc, #36	@ (adr r3, 8000fb0 <MPU6050_Read_Gyro+0xe8>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fbcc 	bl	800072c <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fd74 	bl	8000a88 <__aeabi_d2f>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	66666666 	.word	0x66666666
 8000fb4:	40406666 	.word	0x40406666
 8000fb8:	20000360 	.word	0x20000360

08000fbc <serialSend>:

void serialSend(float Ax, float Ay, float Az, float Gx, float Gy, float Gz) {
 8000fbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fc0:	b0ac      	sub	sp, #176	@ 0xb0
 8000fc2:	af06      	add	r7, sp, #24
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	603b      	str	r3, [r7, #0]
    char buffer1[64];
    int length1 = snprintf(buffer1, sizeof(buffer1), "Ax: %.2f | Ay: %.2f | Az: %.2f\r\n", Ax, Ay, Az);
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fa2b 	bl	8000428 <__aeabi_f2d>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	460d      	mov	r5, r1
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f7ff fa26 	bl	8000428 <__aeabi_f2d>
 8000fdc:	4680      	mov	r8, r0
 8000fde:	4689      	mov	r9, r1
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fa21 	bl	8000428 <__aeabi_f2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000fee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000ff2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000ff6:	e9cd 4500 	strd	r4, r5, [sp]
 8000ffa:	4a25      	ldr	r2, [pc, #148]	@ (8001090 <serialSend+0xd4>)
 8000ffc:	2140      	movs	r1, #64	@ 0x40
 8000ffe:	f009 f915 	bl	800a22c <sniprintf>
 8001002:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    while (CDC_Transmit_FS((uint8_t*)buffer1, length1) == USBD_BUSY) {
 8001006:	e002      	b.n	800100e <serialSend+0x52>
    	HAL_Delay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f000 fb27 	bl	800165c <HAL_Delay>
    while (CDC_Transmit_FS((uint8_t*)buffer1, length1) == USBD_BUSY) {
 800100e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001012:	b29a      	uxth	r2, r3
 8001014:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f008 f80c 	bl	8009038 <CDC_Transmit_FS>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d0f0      	beq.n	8001008 <serialSend+0x4c>
    }

    char buffer2[64];
        int length2 = snprintf(buffer2, sizeof(buffer2), "Gx: %.2f | Gy: %.2f | Gz: %.2f\r\n", Gx, Gy, Gz);
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f7ff f9fe 	bl	8000428 <__aeabi_f2d>
 800102c:	4604      	mov	r4, r0
 800102e:	460d      	mov	r5, r1
 8001030:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001034:	f7ff f9f8 	bl	8000428 <__aeabi_f2d>
 8001038:	4680      	mov	r8, r0
 800103a:	4689      	mov	r9, r1
 800103c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001040:	f7ff f9f2 	bl	8000428 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	f107 0010 	add.w	r0, r7, #16
 800104c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001050:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001054:	e9cd 4500 	strd	r4, r5, [sp]
 8001058:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <serialSend+0xd8>)
 800105a:	2140      	movs	r1, #64	@ 0x40
 800105c:	f009 f8e6 	bl	800a22c <sniprintf>
 8001060:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

        while (CDC_Transmit_FS((uint8_t*)buffer2, length2) == USBD_BUSY) {
 8001064:	e002      	b.n	800106c <serialSend+0xb0>
        	HAL_Delay(1);
 8001066:	2001      	movs	r0, #1
 8001068:	f000 faf8 	bl	800165c <HAL_Delay>
        while (CDC_Transmit_FS((uint8_t*)buffer2, length2) == USBD_BUSY) {
 800106c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001070:	b29a      	uxth	r2, r3
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f007 ffdd 	bl	8009038 <CDC_Transmit_FS>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d0f0      	beq.n	8001066 <serialSend+0xaa>
        }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3798      	adds	r7, #152	@ 0x98
 800108a:	46bd      	mov	sp, r7
 800108c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001090:	0800c4e8 	.word	0x0800c4e8
 8001094:	0800c50c 	.word	0x0800c50c

08001098 <main>:


int main(void)
{
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af02      	add	r7, sp, #8
	HAL_Init();
 800109e:	f000 fa7b 	bl	8001598 <HAL_Init>
	SystemClock_Config();
 80010a2:	f000 f829 	bl	80010f8 <SystemClock_Config>
	MX_GPIO_Init();
 80010a6:	f000 f8af 	bl	8001208 <MX_GPIO_Init>
	MX_I2C1_Init();
 80010aa:	f000 f87f 	bl	80011ac <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 80010ae:	f007 ff05 	bl	8008ebc <MX_USB_DEVICE_Init>
	MPU6050_Init();
 80010b2:	f7ff fe47 	bl	8000d44 <MPU6050_Init>
	MPU6050_Accel accel;
	MPU6050_Gyro gyro;

	while (1)
	{
		MPU6050_Read_Accel(&accel);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe88 	bl	8000dd0 <MPU6050_Read_Accel>
		MPU6050_Read_Gyro(&gyro);
 80010c0:	463b      	mov	r3, r7
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff00 	bl	8000ec8 <MPU6050_Read_Gyro>

		if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED) {
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <main+0x5c>)
 80010ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d10b      	bne.n	80010ea <main+0x52>
		    serialSend(accel.Ax, accel.Ay, accel.Az, gyro.Gx, gyro.Gy, gyro.Gz);
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	697c      	ldr	r4, [r7, #20]
 80010d8:	683d      	ldr	r5, [r7, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	9201      	str	r2, [sp, #4]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	462b      	mov	r3, r5
 80010e4:	4622      	mov	r2, r4
 80010e6:	f7ff ff69 	bl	8000fbc <serialSend>
		}

		HAL_Delay(20);
 80010ea:	2014      	movs	r0, #20
 80010ec:	f000 fab6 	bl	800165c <HAL_Delay>
		MPU6050_Read_Accel(&accel);
 80010f0:	e7e1      	b.n	80010b6 <main+0x1e>
 80010f2:	bf00      	nop
 80010f4:	200003c0 	.word	0x200003c0

080010f8 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001102:	2228      	movs	r2, #40	@ 0x28
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f009 f909 	bl	800a31e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001136:	2301      	movs	r3, #1
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001144:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fb00 	bl	8004754 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800115a:	f000 f883 	bl	8001264 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800116e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fd6c 	bl	8004c58 <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001186:	f000 f86d 	bl	8001264 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800118a:	2310      	movs	r3, #16
 800118c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fed9 	bl	8004f4c <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011a0:	f000 f860 	bl	8001264 <Error_Handler>
  }
}
 80011a4:	bf00      	nop
 80011a6:	3750      	adds	r7, #80	@ 0x50
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <MX_I2C1_Init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011b8:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <MX_I2C1_Init+0x58>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011ea:	f000 fced 	bl	8001bc8 <HAL_I2C_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f4:	f000 f836 	bl	8001264 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000360 	.word	0x20000360
 8001200:	40005400 	.word	0x40005400
 8001204:	000186a0 	.word	0x000186a0

08001208 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_GPIO_Init+0x58>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <MX_GPIO_Init+0x58>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <MX_GPIO_Init+0x58>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <MX_GPIO_Init+0x58>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000

08001264 <Error_Handler>:

void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  __disable_irq();
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <Error_Handler+0x8>

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_MspInit+0x5c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <HAL_MspInit+0x5c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <HAL_MspInit+0x5c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <HAL_MspInit+0x5c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <HAL_MspInit+0x5c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <HAL_MspInit+0x5c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_MspInit+0x60>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <HAL_MspInit+0x60>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000

080012d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <HAL_I2C_MspInit+0x70>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d123      	bne.n	800133c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_I2C_MspInit+0x74>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a13      	ldr	r2, [pc, #76]	@ (8001348 <HAL_I2C_MspInit+0x74>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_I2C_MspInit+0x74>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800130c:	23c0      	movs	r3, #192	@ 0xc0
 800130e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001310:	2312      	movs	r3, #18
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	480b      	ldr	r0, [pc, #44]	@ (800134c <HAL_I2C_MspInit+0x78>)
 8001320:	f000 face 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HAL_I2C_MspInit+0x74>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <HAL_I2C_MspInit+0x74>)
 800132a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800132e:	61d3      	str	r3, [r2, #28]
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_I2C_MspInit+0x74>)
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40005400 	.word	0x40005400
 8001348:	40021000 	.word	0x40021000
 800134c:	40010c00 	.word	0x40010c00

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <NMI_Handler+0x4>

08001358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <MemManage_Handler+0x4>

08001368 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <UsageFault_Handler+0x4>

08001378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f000 f940 	bl	8001624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013ae:	f001 fd8c 	bl	8002eca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20001084 	.word	0x20001084

080013bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <_kill>:

int _kill(int pid, int sig)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013d4:	f008 fff6 	bl	800a3c4 <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	2216      	movs	r2, #22
 80013dc:	601a      	str	r2, [r3, #0]
  return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_exit>:

void _exit (int status)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f2:	f04f 31ff 	mov.w	r1, #4294967295
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffe7 	bl	80013ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <_exit+0x12>

08001400 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	e00a      	b.n	8001428 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001412:	f3af 8000 	nop.w
 8001416:	4601      	mov	r1, r0
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	b2ca      	uxtb	r2, r1
 8001420:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf0      	blt.n	8001412 <_read+0x12>
  }

  return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e009      	b.n	8001460 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	60ba      	str	r2, [r7, #8]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbf1      	blt.n	800144c <_write+0x12>
  }
  return len;
 8001468:	687b      	ldr	r3, [r7, #4]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_close>:

int _close(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001498:	605a      	str	r2, [r3, #4]
  return 0;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <_isatty>:

int _isatty(int file)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
	...

080014d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014dc:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <_sbrk+0x5c>)
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <_sbrk+0x60>)
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e8:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <_sbrk+0x64>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	@ (800153c <_sbrk+0x68>)
 80014f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	429a      	cmp	r2, r3
 8001502:	d207      	bcs.n	8001514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001504:	f008 ff5e 	bl	800a3c4 <__errno>
 8001508:	4603      	mov	r3, r0
 800150a:	220c      	movs	r2, #12
 800150c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	e009      	b.n	8001528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <_sbrk+0x64>)
 8001524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001526:	68fb      	ldr	r3, [r7, #12]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20005000 	.word	0x20005000
 8001534:	00000400 	.word	0x00000400
 8001538:	200003b4 	.word	0x200003b4
 800153c:	200016c8 	.word	0x200016c8

08001540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800154c:	f7ff fff8 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001550:	480b      	ldr	r0, [pc, #44]	@ (8001580 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001552:	490c      	ldr	r1, [pc, #48]	@ (8001584 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001554:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a09      	ldr	r2, [pc, #36]	@ (800158c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001568:	4c09      	ldr	r4, [pc, #36]	@ (8001590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001576:	f008 ff2b 	bl	800a3d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800157a:	f7ff fd8d 	bl	8001098 <main>
  bx lr
 800157e:	4770      	bx	lr
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001588:	0800c924 	.word	0x0800c924
  ldr r2, =_sbss
 800158c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001590:	200016c8 	.word	0x200016c8

08001594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_2_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_Init+0x28>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_Init+0x28>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 f947 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	200f      	movs	r0, #15
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fe5c 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40022000 	.word	0x40022000

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f95f 	bl	80018a6 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 f927 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	@ (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	20000008 	.word	0x20000008
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_IncTick+0x1c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_IncTick+0x20>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a03      	ldr	r2, [pc, #12]	@ (8001644 <HAL_IncTick+0x20>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000008 	.word	0x20000008
 8001644:	200003b8 	.word	0x200003b8

08001648 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b02      	ldr	r3, [pc, #8]	@ (8001658 <HAL_GetTick+0x10>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	200003b8 	.word	0x200003b8

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff fff0 	bl	8001648 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffe0 	bl	8001648 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4906      	ldr	r1, [pc, #24]	@ (800173c <__NVIC_EnableIRQ+0x34>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff2d 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff42 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff35 	bl	8001708 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b08b      	sub	sp, #44	@ 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	e169      	b.n	8001ba8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d4:	2201      	movs	r2, #1
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 8158 	bne.w	8001ba2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b60 <HAL_GPIO_Init+0x2a0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d05e      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 80018fc:	4a98      	ldr	r2, [pc, #608]	@ (8001b60 <HAL_GPIO_Init+0x2a0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d875      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001902:	4a98      	ldr	r2, [pc, #608]	@ (8001b64 <HAL_GPIO_Init+0x2a4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d058      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001908:	4a96      	ldr	r2, [pc, #600]	@ (8001b64 <HAL_GPIO_Init+0x2a4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d86f      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800190e:	4a96      	ldr	r2, [pc, #600]	@ (8001b68 <HAL_GPIO_Init+0x2a8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d052      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001914:	4a94      	ldr	r2, [pc, #592]	@ (8001b68 <HAL_GPIO_Init+0x2a8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d869      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800191a:	4a94      	ldr	r2, [pc, #592]	@ (8001b6c <HAL_GPIO_Init+0x2ac>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d04c      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001920:	4a92      	ldr	r2, [pc, #584]	@ (8001b6c <HAL_GPIO_Init+0x2ac>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d863      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001926:	4a92      	ldr	r2, [pc, #584]	@ (8001b70 <HAL_GPIO_Init+0x2b0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d046      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 800192c:	4a90      	ldr	r2, [pc, #576]	@ (8001b70 <HAL_GPIO_Init+0x2b0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d85d      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d82a      	bhi.n	800198c <HAL_GPIO_Init+0xcc>
 8001936:	2b12      	cmp	r3, #18
 8001938:	d859      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800193a:	a201      	add	r2, pc, #4	@ (adr r2, 8001940 <HAL_GPIO_Init+0x80>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	080019bb 	.word	0x080019bb
 8001944:	08001995 	.word	0x08001995
 8001948:	080019a7 	.word	0x080019a7
 800194c:	080019e9 	.word	0x080019e9
 8001950:	080019ef 	.word	0x080019ef
 8001954:	080019ef 	.word	0x080019ef
 8001958:	080019ef 	.word	0x080019ef
 800195c:	080019ef 	.word	0x080019ef
 8001960:	080019ef 	.word	0x080019ef
 8001964:	080019ef 	.word	0x080019ef
 8001968:	080019ef 	.word	0x080019ef
 800196c:	080019ef 	.word	0x080019ef
 8001970:	080019ef 	.word	0x080019ef
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019ef 	.word	0x080019ef
 800197c:	080019ef 	.word	0x080019ef
 8001980:	080019ef 	.word	0x080019ef
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019b1 	.word	0x080019b1
 800198c:	4a79      	ldr	r2, [pc, #484]	@ (8001b74 <HAL_GPIO_Init+0x2b4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001992:	e02c      	b.n	80019ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e029      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	3304      	adds	r3, #4
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e024      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	3308      	adds	r3, #8
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e01f      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	330c      	adds	r3, #12
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e01a      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c2:	2304      	movs	r3, #4
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e013      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d0:	2308      	movs	r3, #8
 80019d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	611a      	str	r2, [r3, #16]
          break;
 80019da:	e009      	b.n	80019f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	615a      	str	r2, [r3, #20]
          break;
 80019e6:	e003      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          break;
 80019ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2bff      	cmp	r3, #255	@ 0xff
 80019f4:	d801      	bhi.n	80019fa <HAL_GPIO_Init+0x13a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_Init+0x13e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2bff      	cmp	r3, #255	@ 0xff
 8001a04:	d802      	bhi.n	8001a0c <HAL_GPIO_Init+0x14c>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x152>
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	3b08      	subs	r3, #8
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	210f      	movs	r1, #15
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80b1 	beq.w	8001ba2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a4c      	ldr	r2, [pc, #304]	@ (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a58:	4a48      	ldr	r2, [pc, #288]	@ (8001b7c <HAL_GPIO_Init+0x2bc>)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	220f      	movs	r2, #15
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a40      	ldr	r2, [pc, #256]	@ (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_GPIO_Init+0x1ec>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3f      	ldr	r2, [pc, #252]	@ (8001b84 <HAL_GPIO_Init+0x2c4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b88 <HAL_GPIO_Init+0x2c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3d      	ldr	r2, [pc, #244]	@ (8001b8c <HAL_GPIO_Init+0x2cc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1e0>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e006      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e004      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aac:	2300      	movs	r3, #0
 8001aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab0:	f002 0203 	and.w	r2, r2, #3
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	4093      	lsls	r3, r2
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001abe:	492f      	ldr	r1, [pc, #188]	@ (8001b7c <HAL_GPIO_Init+0x2bc>)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	492c      	ldr	r1, [pc, #176]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4928      	ldr	r1, [pc, #160]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4922      	ldr	r1, [pc, #136]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	491e      	ldr	r1, [pc, #120]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4918      	ldr	r1, [pc, #96]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4914      	ldr	r1, [pc, #80]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d021      	beq.n	8001b94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	490e      	ldr	r1, [pc, #56]	@ (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e021      	b.n	8001ba2 <HAL_GPIO_Init+0x2e2>
 8001b5e:	bf00      	nop
 8001b60:	10320000 	.word	0x10320000
 8001b64:	10310000 	.word	0x10310000
 8001b68:	10220000 	.word	0x10220000
 8001b6c:	10210000 	.word	0x10210000
 8001b70:	10120000 	.word	0x10120000
 8001b74:	10110000 	.word	0x10110000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40010800 	.word	0x40010800
 8001b84:	40010c00 	.word	0x40010c00
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40011400 	.word	0x40011400
 8001b90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4909      	ldr	r1, [pc, #36]	@ (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f47f ae8e 	bne.w	80018d4 <HAL_GPIO_Init+0x14>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	372c      	adds	r7, #44	@ 0x2c
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e12b      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fb70 	bl	80012d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	@ 0x24
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c2c:	f003 f95c 	bl	8004ee8 <HAL_RCC_GetPCLK1Freq>
 8001c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4a81      	ldr	r2, [pc, #516]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d807      	bhi.n	8001c4c <HAL_I2C_Init+0x84>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a80      	ldr	r2, [pc, #512]	@ (8001e40 <HAL_I2C_Init+0x278>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e006      	b.n	8001c5a <HAL_I2C_Init+0x92>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e44 <HAL_I2C_Init+0x27c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf94      	ite	ls
 8001c54:	2301      	movls	r3, #1
 8001c56:	2300      	movhi	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0e7      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4a78      	ldr	r2, [pc, #480]	@ (8001e48 <HAL_I2C_Init+0x280>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9b      	lsrs	r3, r3, #18
 8001c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d802      	bhi.n	8001c9c <HAL_I2C_Init+0xd4>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	e009      	b.n	8001cb0 <HAL_I2C_Init+0xe8>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a69      	ldr	r2, [pc, #420]	@ (8001e4c <HAL_I2C_Init+0x284>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	3301      	adds	r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	495c      	ldr	r1, [pc, #368]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001ccc:	428b      	cmp	r3, r1
 8001cce:	d819      	bhi.n	8001d04 <HAL_I2C_Init+0x13c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e59      	subs	r1, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <HAL_I2C_Init+0x138>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e59      	subs	r1, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	e051      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e04f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <HAL_I2C_Init+0x168>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e58      	subs	r0, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e012      	b.n	8001d56 <HAL_I2C_Init+0x18e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Init+0x196>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e022      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10e      	bne.n	8001d84 <HAL_I2C_Init+0x1bc>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e58      	subs	r0, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d82:	e00f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	0099      	lsls	r1, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	6809      	ldr	r1, [r1, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6911      	ldr	r1, [r2, #16]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	000186a0 	.word	0x000186a0
 8001e40:	001e847f 	.word	0x001e847f
 8001e44:	003d08ff 	.word	0x003d08ff
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	4608      	mov	r0, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	817b      	strh	r3, [r7, #10]
 8001e62:	460b      	mov	r3, r1
 8001e64:	813b      	strh	r3, [r7, #8]
 8001e66:	4613      	mov	r3, r2
 8001e68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e6a:	f7ff fbed 	bl	8001648 <HAL_GetTick>
 8001e6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	f040 80d9 	bne.w	8002030 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2319      	movs	r3, #25
 8001e84:	2201      	movs	r2, #1
 8001e86:	496d      	ldr	r1, [pc, #436]	@ (800203c <HAL_I2C_Mem_Write+0x1ec>)
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fccd 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
 8001e96:	e0cc      	b.n	8002032 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2C_Mem_Write+0x56>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e0c5      	b.n	8002032 <HAL_I2C_Mem_Write+0x1e2>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d007      	beq.n	8001ecc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2221      	movs	r2, #33	@ 0x21
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2240      	movs	r2, #64	@ 0x40
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002040 <HAL_I2C_Mem_Write+0x1f0>)
 8001f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f0e:	88f8      	ldrh	r0, [r7, #6]
 8001f10:	893a      	ldrh	r2, [r7, #8]
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fb04 	bl	800252c <I2C_RequestMemoryWrite>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d052      	beq.n	8001fd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e081      	b.n	8002032 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fd92 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d107      	bne.n	8001f56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_I2C_Mem_Write+0x180>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1aa      	bne.n	8001f2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fd85 	bl	8002aec <I2C_WaitOnBTFFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d107      	bne.n	8002000 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e016      	b.n	8002032 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	00100002 	.word	0x00100002
 8002040:	ffff0000 	.word	0xffff0000

08002044 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	@ 0x30
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	817b      	strh	r3, [r7, #10]
 8002056:	460b      	mov	r3, r1
 8002058:	813b      	strh	r3, [r7, #8]
 800205a:	4613      	mov	r3, r2
 800205c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002062:	f7ff faf1 	bl	8001648 <HAL_GetTick>
 8002066:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b20      	cmp	r3, #32
 8002072:	f040 8250 	bne.w	8002516 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2319      	movs	r3, #25
 800207c:	2201      	movs	r2, #1
 800207e:	4982      	ldr	r1, [pc, #520]	@ (8002288 <HAL_I2C_Mem_Read+0x244>)
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fbd1 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
 800208e:	e243      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_I2C_Mem_Read+0x5a>
 800209a:	2302      	movs	r3, #2
 800209c:	e23c      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d007      	beq.n	80020c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2222      	movs	r2, #34	@ 0x22
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2240      	movs	r2, #64	@ 0x40
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80020f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a62      	ldr	r2, [pc, #392]	@ (800228c <HAL_I2C_Mem_Read+0x248>)
 8002104:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002106:	88f8      	ldrh	r0, [r7, #6]
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	8979      	ldrh	r1, [r7, #10]
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4603      	mov	r3, r0
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa9e 	bl	8002658 <I2C_RequestMemoryRead>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1f8      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d113      	bne.n	8002156 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e1cc      	b.n	80024f0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215a:	2b01      	cmp	r3, #1
 800215c:	d11e      	bne.n	800219c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800216c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800216e:	b672      	cpsid	i
}
 8002170:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002196:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002198:	b662      	cpsie	i
}
 800219a:	e035      	b.n	8002208 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d11e      	bne.n	80021e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021de:	b662      	cpsie	i
}
 80021e0:	e012      	b.n	8002208 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002208:	e172      	b.n	80024f0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220e:	2b03      	cmp	r3, #3
 8002210:	f200 811f 	bhi.w	8002452 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002218:	2b01      	cmp	r3, #1
 800221a:	d123      	bne.n	8002264 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800221e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fcab 	bl	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e173      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002262:	e145      	b.n	80024f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002268:	2b02      	cmp	r3, #2
 800226a:	d152      	bne.n	8002312 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002272:	2200      	movs	r2, #0
 8002274:	4906      	ldr	r1, [pc, #24]	@ (8002290 <HAL_I2C_Mem_Read+0x24c>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fad6 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e148      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
 8002286:	bf00      	nop
 8002288:	00100002 	.word	0x00100002
 800228c:	ffff0000 	.word	0xffff0000
 8002290:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022da:	b662      	cpsie	i
}
 80022dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002310:	e0ee      	b.n	80024f0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002318:	2200      	movs	r2, #0
 800231a:	4981      	ldr	r1, [pc, #516]	@ (8002520 <HAL_I2C_Mem_Read+0x4dc>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fa83 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0f5      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800233a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002372:	4b6c      	ldr	r3, [pc, #432]	@ (8002524 <HAL_I2C_Mem_Read+0x4e0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	4a6b      	ldr	r2, [pc, #428]	@ (8002528 <HAL_I2C_Mem_Read+0x4e4>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0a1a      	lsrs	r2, r3, #8
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00da      	lsls	r2, r3, #3
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	3b01      	subs	r3, #1
 8002390:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f043 0220 	orr.w	r2, r3, #32
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023ba:	b662      	cpsie	i
}
 80023bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0a6      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d1d9      	bne.n	800238c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800241a:	b662      	cpsie	i
}
 800241c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002450:	e04e      	b.n	80024f0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002454:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fb90 	bl	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e058      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d124      	bne.n	80024f0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f ae88 	bne.w	800220a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3728      	adds	r7, #40	@ 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	00010004 	.word	0x00010004
 8002524:	20000000 	.word	0x20000000
 8002528:	14f8b589 	.word	0x14f8b589

0800252c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	460b      	mov	r3, r1
 8002540:	813b      	strh	r3, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	2200      	movs	r2, #0
 800255e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f960 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800257c:	d103      	bne.n	8002586 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e05f      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800258a:	897b      	ldrh	r3, [r7, #10]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	6a3a      	ldr	r2, [r7, #32]
 800259e:	492d      	ldr	r1, [pc, #180]	@ (8002654 <I2C_RequestMemoryWrite+0x128>)
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f9bb 	bl	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e04c      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c8:	6a39      	ldr	r1, [r7, #32]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa46 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d107      	bne.n	80025ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e02b      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]
 8002602:	e021      	b.n	8002648 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29b      	uxth	r3, r3
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa20 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	2b04      	cmp	r3, #4
 8002628:	d107      	bne.n	800263a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e005      	b.n	800264a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	00010002 	.word	0x00010002

08002658 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002680:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2200      	movs	r2, #0
 800269a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f8c2 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b8:	d103      	bne.n	80026c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0aa      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	4952      	ldr	r1, [pc, #328]	@ (8002824 <I2C_RequestMemoryRead+0x1cc>)
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f91d 	bl	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e097      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9a8 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e076      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002734:	893b      	ldrh	r3, [r7, #8]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	e021      	b.n	8002784 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b29b      	uxth	r3, r3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002750:	6a39      	ldr	r1, [r7, #32]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f982 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b04      	cmp	r3, #4
 8002764:	d107      	bne.n	8002776 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e050      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800277a:	893b      	ldrh	r3, [r7, #8]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002786:	6a39      	ldr	r1, [r7, #32]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f967 	bl	8002a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e035      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f82b 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e013      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027f4:	897b      	ldrh	r3, [r7, #10]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	6a3a      	ldr	r2, [r7, #32]
 8002808:	4906      	ldr	r1, [pc, #24]	@ (8002824 <I2C_RequestMemoryRead+0x1cc>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f886 	bl	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	00010002 	.word	0x00010002

08002828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	e048      	b.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d044      	beq.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7fe ff01 	bl	8001648 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d139      	bne.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	0c1b      	lsrs	r3, r3, #16
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10d      	bne.n	800287e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	43da      	mvns	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	e00c      	b.n	8002898 <I2C_WaitOnFlagUntilTimeout+0x70>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	43da      	mvns	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4013      	ands	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	429a      	cmp	r2, r3
 800289c:	d116      	bne.n	80028cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e023      	b.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10d      	bne.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	43da      	mvns	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	e00c      	b.n	800290c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	43da      	mvns	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4013      	ands	r3, r2
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	429a      	cmp	r2, r3
 8002910:	d093      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292a:	e071      	b.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800293a:	d123      	bne.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e067      	b.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d041      	beq.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7fe fe5c 	bl	8001648 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d136      	bne.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10c      	bne.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e00b      	b.n	80029de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e021      	b.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10c      	bne.n	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	43da      	mvns	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e00b      	b.n	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf14      	ite	ne
 8002a46:	2301      	movne	r3, #1
 8002a48:	2300      	moveq	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f af6d 	bne.w	800292c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a68:	e034      	b.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8e3 	bl	8002c36 <I2C_IsAcknowledgeFailed>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e034      	b.n	8002ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d028      	beq.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fe fde1 	bl	8001648 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11d      	bne.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b80      	cmp	r3, #128	@ 0x80
 8002aa4:	d016      	beq.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ade:	2b80      	cmp	r3, #128	@ 0x80
 8002ae0:	d1c3      	bne.n	8002a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af8:	e034      	b.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f89b 	bl	8002c36 <I2C_IsAcknowledgeFailed>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e034      	b.n	8002b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d028      	beq.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b12:	f7fe fd99 	bl	8001648 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11d      	bne.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d016      	beq.n	8002b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d1c3      	bne.n	8002afa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b88:	e049      	b.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d119      	bne.n	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0210 	mvn.w	r2, #16
 8002ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e030      	b.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7fe fd3c 	bl	8001648 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bec:	2b40      	cmp	r3, #64	@ 0x40
 8002bee:	d016      	beq.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e007      	b.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	d1ae      	bne.n	8002b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4c:	d11b      	bne.n	8002c86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0e8      	b.n	8002e76 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f006 faf1 	bl	80092a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fa14 	bl	80050fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce0:	f002 f9ea 	bl	80050b8 <USB_CoreInit>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0bf      	b.n	8002e76 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fa18 	bl	8005132 <USB_SetCurrentMode>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b0      	b.n	8002e76 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e03e      	b.n	8002d98 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	440b      	add	r3, r1
 8002d28:	3311      	adds	r3, #17
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3310      	adds	r3, #16
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	3313      	adds	r3, #19
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	3320      	adds	r3, #32
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	3324      	adds	r3, #36	@ 0x24
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	3301      	adds	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	791b      	ldrb	r3, [r3, #4]
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3bb      	bcc.n	8002d1a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	e044      	b.n	8002e32 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	791b      	ldrb	r3, [r3, #4]
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3b5      	bcc.n	8002da8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e46:	f002 f980 	bl	800514a <USB_DevInit>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e00c      	b.n	8002e76 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fbff 	bl	8007672 <USB_DevDisconnect>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_PCD_Start+0x16>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e016      	b.n	8002ec2 <HAL_PCD_Start+0x44>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f002 f916 	bl	80050d2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f006 fc6c 	bl	8009786 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fbd3 	bl	800765e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b088      	sub	sp, #32
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f004 fbd5 	bl	8007686 <USB_ReadInterrupts>
 8002edc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fb1a 	bl	8003522 <PCD_EP_ISR_Handler>

    return;
 8002eee:	e119      	b.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d013      	beq.n	8002f22 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f006 fa3f 	bl	8009396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f905 	bl	800312a <HAL_PCD_SetAddress>

    return;
 8002f20:	e100      	b.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f44:	e0ee      	b.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00c      	beq.n	8002f6a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f62:	b292      	uxth	r2, r2
 8002f64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f68:	e0dc      	b.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d027      	beq.n	8002fc4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	b292      	uxth	r2, r2
 8002f88:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0208 	bic.w	r2, r2, #8
 8002f9e:	b292      	uxth	r2, r2
 8002fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f006 fa2f 	bl	8009408 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fbc:	b292      	uxth	r2, r2
 8002fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002fc2:	e0af      	b.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8083 	beq.w	80030d6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e010      	b.n	8002ff8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	7ffb      	ldrb	r3, [r7, #31]
 8002fe4:	8812      	ldrh	r2, [r2, #0]
 8002fe6:	b292      	uxth	r2, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	3320      	adds	r3, #32
 8002fec:	443b      	add	r3, r7
 8002fee:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	d9eb      	bls.n	8002fd6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	b292      	uxth	r2, r2
 8003012:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	b292      	uxth	r2, r2
 800302a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800302e:	bf00      	nop
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003038:	b29b      	uxth	r3, r3
 800303a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f6      	beq.n	8003030 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003054:	b292      	uxth	r2, r2
 8003056:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800305a:	2300      	movs	r3, #0
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e00f      	b.n	8003080 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003060:	7ffb      	ldrb	r3, [r7, #31]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	4611      	mov	r1, r2
 8003068:	7ffa      	ldrb	r2, [r7, #31]
 800306a:	0092      	lsls	r2, r2, #2
 800306c:	440a      	add	r2, r1
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	3320      	adds	r3, #32
 8003072:	443b      	add	r3, r7
 8003074:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003078:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800307a:	7ffb      	ldrb	r3, [r7, #31]
 800307c:	3301      	adds	r3, #1
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	7ffb      	ldrb	r3, [r7, #31]
 8003082:	2b07      	cmp	r3, #7
 8003084:	d9ec      	bls.n	8003060 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0208 	orr.w	r2, r2, #8
 8003098:	b292      	uxth	r2, r2
 800309a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b0:	b292      	uxth	r2, r2
 80030b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0204 	orr.w	r2, r2, #4
 80030c8:	b292      	uxth	r2, r2
 80030ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f006 f980 	bl	80093d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030d4:	e026      	b.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00f      	beq.n	8003100 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030f2:	b292      	uxth	r2, r2
 80030f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f006 f93e 	bl	800937a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030fe:	e011      	b.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800311c:	b292      	uxth	r2, r2
 800311e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003122:	bf00      	nop
  }
}
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_PCD_SetAddress+0x1a>
 8003140:	2302      	movs	r3, #2
 8003142:	e012      	b.n	800316a <HAL_PCD_SetAddress+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fa6c 	bl	8007638 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	4608      	mov	r0, r1
 800317c:	4611      	mov	r1, r2
 800317e:	461a      	mov	r2, r3
 8003180:	4603      	mov	r3, r0
 8003182:	70fb      	strb	r3, [r7, #3]
 8003184:	460b      	mov	r3, r1
 8003186:	803b      	strh	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da0e      	bge.n	80031b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 0207 	and.w	r2, r3, #7
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	3310      	adds	r3, #16
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	705a      	strb	r2, [r3, #1]
 80031b4:	e00e      	b.n	80031d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 0207 	and.w	r2, r3, #7
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031e0:	883a      	ldrh	r2, [r7, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	78ba      	ldrb	r2, [r7, #2]
 80031ea:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031ec:	78bb      	ldrb	r3, [r7, #2]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_PCD_EP_Open+0x94>
 8003202:	2302      	movs	r3, #2
 8003204:	e00e      	b.n	8003224 <HAL_PCD_EP_Open+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	4618      	mov	r0, r3
 8003216:	f001 ffb5 	bl	8005184 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003222:	7afb      	ldrb	r3, [r7, #11]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0e      	bge.n	800325e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 0207 	and.w	r2, r3, #7
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	3310      	adds	r3, #16
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00e      	b.n	800327c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 0207 	and.w	r2, r3, #7
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_PCD_EP_Close+0x6a>
 8003292:	2302      	movs	r3, #2
 8003294:	e00e      	b.n	80032b4 <HAL_PCD_EP_Close+0x88>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fb2d 	bl	8005904 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	460b      	mov	r3, r1
 80032ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	7afb      	ldrb	r3, [r7, #11]
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	b2da      	uxtb	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	4618      	mov	r0, r3
 8003310:	f002 fce4 	bl	8005cdc <USB_EPStartXfer>

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0207 	and.w	r2, r3, #7
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003340:	681b      	ldr	r3, [r3, #0]
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	460b      	mov	r3, r1
 800335a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	f003 0207 	and.w	r2, r3, #7
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	3310      	adds	r3, #16
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2201      	movs	r2, #1
 8003396:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6979      	ldr	r1, [r7, #20]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f002 fc96 	bl	8005cdc <USB_EPStartXfer>

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	7912      	ldrb	r2, [r2, #4]
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e04c      	b.n	8003472 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da0e      	bge.n	80033fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 0207 	and.w	r2, r3, #7
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	3310      	adds	r3, #16
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	705a      	strb	r2, [r3, #1]
 80033fc:	e00c      	b.n	8003418 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_PCD_EP_SetStall+0x7e>
 8003434:	2302      	movs	r3, #2
 8003436:	e01c      	b.n	8003472 <HAL_PCD_EP_SetStall+0xb8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	4618      	mov	r0, r3
 8003448:	f003 fff9 	bl	800743e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f004 f91e 	bl	80076a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	7912      	ldrb	r2, [r2, #4]
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e040      	b.n	800351a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349c:	2b00      	cmp	r3, #0
 800349e:	da0e      	bge.n	80034be <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	f003 0207 	and.w	r2, r3, #7
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	3310      	adds	r3, #16
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e00e      	b.n	80034dc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 0207 	and.w	r2, r3, #7
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_PCD_EP_ClrStall+0x82>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e00e      	b.n	800351a <HAL_PCD_EP_ClrStall+0xa0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 ffe7 	bl	80074de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b096      	sub	sp, #88	@ 0x58
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800352a:	e3bb      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003534:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003546:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 8175 	bne.w	800383a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d14e      	bne.n	80035fa <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356c:	81fb      	strh	r3, [r7, #14]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	89fb      	ldrh	r3, [r7, #14]
 8003574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357c:	b29b      	uxth	r3, r3
 800357e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3310      	adds	r3, #16
 8003584:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800358e:	b29b      	uxth	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	3302      	adds	r3, #2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	441a      	add	r2, r3
 80035bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035be:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80035c0:	2100      	movs	r1, #0
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f005 febf 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7b5b      	ldrb	r3, [r3, #13]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8368 	beq.w	8003ca4 <PCD_EP_ISR_Handler+0x782>
 80035d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f040 8363 	bne.w	8003ca4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7b5b      	ldrb	r3, [r3, #13]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	735a      	strb	r2, [r3, #13]
 80035f8:	e354      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003600:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800360c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003614:	2b00      	cmp	r3, #0
 8003616:	d034      	beq.n	8003682 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	3306      	adds	r3, #6
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003642:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800364e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003650:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003656:	b29b      	uxth	r3, r3
 8003658:	f004 f875 	bl	8007746 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29a      	uxth	r2, r3
 8003664:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003668:	4013      	ands	r3, r2
 800366a:	823b      	strh	r3, [r7, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	8a3a      	ldrh	r2, [r7, #16]
 8003672:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003676:	b292      	uxth	r2, r2
 8003678:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f005 fe36 	bl	80092ec <HAL_PCD_SetupStageCallback>
 8003680:	e310      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003682:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003686:	2b00      	cmp	r3, #0
 8003688:	f280 830c 	bge.w	8003ca4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29a      	uxth	r2, r3
 8003694:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003698:	4013      	ands	r3, r2
 800369a:	83fb      	strh	r3, [r7, #30]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	8bfa      	ldrh	r2, [r7, #30]
 80036a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036a6:	b292      	uxth	r2, r2
 80036a8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	3306      	adds	r3, #6
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80036d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <PCD_EP_ISR_Handler+0x1f0>
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d015      	beq.n	8003712 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ec:	6959      	ldr	r1, [r3, #20]
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80036f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f004 f825 	bl	8007746 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80036fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	441a      	add	r2, r3
 8003706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003708:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800370a:	2100      	movs	r1, #0
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f005 fdff 	bl	8009310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800371c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 82bd 	bne.w	8003ca4 <PCD_EP_ISR_Handler+0x782>
 800372a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800372e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003732:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003736:	f000 82b5 	beq.w	8003ca4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	4413      	add	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29b      	uxth	r3, r3
 8003760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003764:	b29a      	uxth	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	801a      	strh	r2, [r3, #0]
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003770:	d91d      	bls.n	80037ae <PCD_EP_ISR_Handler+0x28c>
 8003772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	647b      	str	r3, [r7, #68]	@ 0x44
 800377a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <PCD_EP_ISR_Handler+0x26a>
 8003786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003788:	3b01      	subs	r3, #1
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29a      	uxth	r2, r3
 8003792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003794:	b29b      	uxth	r3, r3
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	b29b      	uxth	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b29b      	uxth	r3, r3
 800379e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	801a      	strh	r2, [r3, #0]
 80037ac:	e026      	b.n	80037fc <PCD_EP_ISR_Handler+0x2da>
 80037ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <PCD_EP_ISR_Handler+0x2aa>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	e017      	b.n	80037fc <PCD_EP_ISR_Handler+0x2da>
 80037cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <PCD_EP_ISR_Handler+0x2c4>
 80037e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037e2:	3301      	adds	r3, #1
 80037e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	4313      	orrs	r3, r2
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380c:	827b      	strh	r3, [r7, #18]
 800380e:	8a7b      	ldrh	r3, [r7, #18]
 8003810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003814:	827b      	strh	r3, [r7, #18]
 8003816:	8a7b      	ldrh	r3, [r7, #18]
 8003818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800381c:	827b      	strh	r3, [r7, #18]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	8a7b      	ldrh	r3, [r7, #18]
 8003824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800382c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003834:	b29b      	uxth	r3, r3
 8003836:	8013      	strh	r3, [r2, #0]
 8003838:	e234      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800384e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003852:	2b00      	cmp	r3, #0
 8003854:	f280 80fc 	bge.w	8003a50 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29a      	uxth	r2, r3
 800386a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800386e:	4013      	ands	r3, r2
 8003870:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003886:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800388a:	b292      	uxth	r2, r2
 800388c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800388e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a6:	7b1b      	ldrb	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d125      	bne.n	80038f8 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	3306      	adds	r3, #6
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80038d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8092 	beq.w	8003a06 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e8:	6959      	ldr	r1, [r3, #20]
 80038ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ec:	88da      	ldrh	r2, [r3, #6]
 80038ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80038f2:	f003 ff28 	bl	8007746 <USB_ReadPMA>
 80038f6:	e086      	b.n	8003a06 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80038f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fa:	78db      	ldrb	r3, [r3, #3]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d10a      	bne.n	8003916 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003900:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003904:	461a      	mov	r2, r3
 8003906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f9d9 	bl	8003cc0 <HAL_PCD_EP_DB_Receive>
 800390e:	4603      	mov	r3, r0
 8003910:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003914:	e077      	b.n	8003a06 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800392c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003930:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	441a      	add	r2, r3
 8003942:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800394a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800394e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003952:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003956:	b29b      	uxth	r3, r3
 8003958:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d024      	beq.n	80039be <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	3302      	adds	r3, #2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800399c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80039a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02e      	beq.n	8003a06 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ae:	6959      	ldr	r1, [r3, #20]
 80039b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b2:	891a      	ldrh	r2, [r3, #8]
 80039b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80039b8:	f003 fec5 	bl	8007746 <USB_ReadPMA>
 80039bc:	e023      	b.n	8003a06 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	3306      	adds	r3, #6
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80039ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f8:	6959      	ldr	r1, [r3, #20]
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	895a      	ldrh	r2, [r3, #10]
 80039fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a02:	f003 fea0 	bl	8007746 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a0e:	441a      	add	r2, r3
 8003a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003a1c:	441a      	add	r2, r3
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <PCD_EP_ISR_Handler+0x514>
 8003a2a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d206      	bcs.n	8003a44 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f005 fc67 	bl	8009310 <HAL_PCD_DataOutStageCallback>
 8003a42:	e005      	b.n	8003a50 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 f946 	bl	8005cdc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8123 	beq.w	8003ca4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a5e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab0:	78db      	ldrb	r3, [r3, #3]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	f040 80a2 	bne.w	8003bfc <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aba:	2200      	movs	r2, #0
 8003abc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac0:	7b1b      	ldrb	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8093 	beq.w	8003bee <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ac8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d046      	beq.n	8003b62 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d126      	bne.n	8003b2a <PCD_EP_ISR_Handler+0x608>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	4413      	add	r3, r2
 8003af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	011a      	lsls	r2, r3, #4
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	4413      	add	r3, r2
 8003afe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	801a      	strh	r2, [r3, #0]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	e061      	b.n	8003bee <PCD_EP_ISR_Handler+0x6cc>
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d15d      	bne.n	8003bee <PCD_EP_ISR_Handler+0x6cc>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	4413      	add	r3, r2
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	011a      	lsls	r2, r3, #4
 8003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b52:	4413      	add	r3, r2
 8003b54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	e045      	b.n	8003bee <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d126      	bne.n	8003bbe <PCD_EP_ISR_Handler+0x69c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b84:	4413      	add	r3, r2
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b96:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	e017      	b.n	8003bee <PCD_EP_ISR_Handler+0x6cc>
 8003bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d113      	bne.n	8003bee <PCD_EP_ISR_Handler+0x6cc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd4:	4413      	add	r3, r2
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	011a      	lsls	r2, r3, #4
 8003bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be0:	4413      	add	r3, r2
 8003be2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bea:	2200      	movs	r2, #0
 8003bec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f005 fba6 	bl	8009346 <HAL_PCD_DataInStageCallback>
 8003bfa:	e053      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003bfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d146      	bne.n	8003c96 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c30:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d907      	bls.n	8003c50 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003c48:	1ad2      	subs	r2, r2, r3
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	619a      	str	r2, [r3, #24]
 8003c4e:	e002      	b.n	8003c56 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f005 fb6e 	bl	8009346 <HAL_PCD_DataInStageCallback>
 8003c6a:	e01b      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003c74:	441a      	add	r2, r3
 8003c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c78:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003c82:	441a      	add	r2, r3
 8003c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c86:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 f824 	bl	8005cdc <USB_EPStartXfer>
 8003c94:	e006      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003c96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f91b 	bl	8003eda <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	b21b      	sxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f6ff ac3b 	blt.w	800352c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3758      	adds	r7, #88	@ 0x58
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d07e      	beq.n	8003dd6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	3302      	adds	r3, #2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	8b7b      	ldrh	r3, [r7, #26]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d306      	bcc.n	8003d1a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	8b7b      	ldrh	r3, [r7, #26]
 8003d12:	1ad2      	subs	r2, r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	619a      	str	r2, [r3, #24]
 8003d18:	e002      	b.n	8003d20 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d123      	bne.n	8003d70 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d42:	833b      	strh	r3, [r7, #24]
 8003d44:	8b3b      	ldrh	r3, [r7, #24]
 8003d46:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d4a:	833b      	strh	r3, [r7, #24]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	441a      	add	r2, r3
 8003d5a:	8b3b      	ldrh	r3, [r7, #24]
 8003d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01f      	beq.n	8003dba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d94:	82fb      	strh	r3, [r7, #22]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	441a      	add	r2, r3
 8003da4:	8afb      	ldrh	r3, [r7, #22]
 8003da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003dba:	8b7b      	ldrh	r3, [r7, #26]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8087 	beq.w	8003ed0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6959      	ldr	r1, [r3, #20]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	891a      	ldrh	r2, [r3, #8]
 8003dce:	8b7b      	ldrh	r3, [r7, #26]
 8003dd0:	f003 fcb9 	bl	8007746 <USB_ReadPMA>
 8003dd4:	e07c      	b.n	8003ed0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	3306      	adds	r3, #6
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	8b7b      	ldrh	r3, [r7, #26]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d306      	bcc.n	8003e18 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	8b7b      	ldrh	r3, [r7, #26]
 8003e10:	1ad2      	subs	r2, r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	619a      	str	r2, [r3, #24]
 8003e16:	e002      	b.n	8003e1e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d123      	bne.n	8003e6e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e40:	83fb      	strh	r3, [r7, #30]
 8003e42:	8bfb      	ldrh	r3, [r7, #30]
 8003e44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e48:	83fb      	strh	r3, [r7, #30]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	441a      	add	r2, r3
 8003e58:	8bfb      	ldrh	r3, [r7, #30]
 8003e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11f      	bne.n	8003eb8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	83bb      	strh	r3, [r7, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	8bbb      	ldrh	r3, [r7, #28]
 8003ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003eb8:	8b7b      	ldrh	r3, [r7, #26]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6959      	ldr	r1, [r3, #20]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	895a      	ldrh	r2, [r3, #10]
 8003eca:	8b7b      	ldrh	r3, [r7, #26]
 8003ecc:	f003 fc3b 	bl	8007746 <USB_ReadPMA>
    }
  }

  return count;
 8003ed0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b0a4      	sub	sp, #144	@ 0x90
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 81dd 	beq.w	80042ae <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f1c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d907      	bls.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f34:	1ad2      	subs	r2, r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	619a      	str	r2, [r3, #24]
 8003f3a:	e002      	b.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 80b9 	bne.w	80040be <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d126      	bne.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f68:	4413      	add	r3, r2
 8003f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	011a      	lsls	r2, r3, #4
 8003f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f74:	4413      	add	r3, r2
 8003f76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	e01a      	b.n	8003fd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d116      	bne.n	8003fd8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fbe:	4413      	add	r3, r2
 8003fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	011a      	lsls	r2, r3, #4
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fca:	4413      	add	r3, r2
 8003fcc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d126      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	011a      	lsls	r2, r3, #4
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004018:	b29a      	uxth	r2, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402c:	b29a      	uxth	r2, r3
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	e017      	b.n	8004064 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d113      	bne.n	8004064 <HAL_PCD_EP_DB_Transmit+0x18a>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	4413      	add	r3, r2
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	011a      	lsls	r2, r3, #4
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	4413      	add	r3, r2
 8004058:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800405c:	623b      	str	r3, [r7, #32]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	2200      	movs	r2, #0
 8004062:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f005 f96b 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 82fc 	beq.w	8004674 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004096:	82fb      	strh	r3, [r7, #22]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	8afb      	ldrh	r3, [r7, #22]
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]
 80040bc:	e2da      	b.n	8004674 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d021      	beq.n	800410c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80040f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004100:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004108:	b29b      	uxth	r3, r3
 800410a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 82ae 	bne.w	8004674 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004120:	441a      	add	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800412e:	441a      	add	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	429a      	cmp	r2, r3
 800413e:	d30b      	bcc.n	8004158 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004150:	1ad2      	subs	r2, r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	621a      	str	r2, [r3, #32]
 8004156:	e017      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004160:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004170:	e00a      	b.n	8004188 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2200      	movs	r2, #0
 8004186:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d165      	bne.n	800425c <HAL_PCD_EP_DB_Transmit+0x382>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a4:	4413      	add	r3, r2
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	011a      	lsls	r2, r3, #4
 80041ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b0:	4413      	add	r3, r2
 80041b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80041ce:	d91d      	bls.n	800420c <HAL_PCD_EP_DB_Transmit+0x332>
 80041d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <HAL_PCD_EP_DB_Transmit+0x310>
 80041e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e6:	3b01      	subs	r3, #1
 80041e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	029b      	lsls	r3, r3, #10
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004204:	b29a      	uxth	r2, r3
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	e044      	b.n	8004296 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800420c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <HAL_PCD_EP_DB_Transmit+0x350>
 8004214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800421e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004222:	b29a      	uxth	r2, r3
 8004224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004226:	801a      	strh	r2, [r3, #0]
 8004228:	e035      	b.n	8004296 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800422a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_PCD_EP_DB_Transmit+0x36a>
 800423e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004240:	3301      	adds	r3, #1
 8004242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b29a      	uxth	r2, r3
 800424a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800424c:	b29b      	uxth	r3, r3
 800424e:	029b      	lsls	r3, r3, #10
 8004250:	b29b      	uxth	r3, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	b29a      	uxth	r2, r3
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	801a      	strh	r2, [r3, #0]
 800425a:	e01c      	b.n	8004296 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	785b      	ldrb	r3, [r3, #1]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d118      	bne.n	8004296 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004272:	b29b      	uxth	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004278:	4413      	add	r3, r2
 800427a:	647b      	str	r3, [r7, #68]	@ 0x44
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	011a      	lsls	r2, r3, #4
 8004282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004284:	4413      	add	r3, r2
 8004286:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800428a:	643b      	str	r3, [r7, #64]	@ 0x40
 800428c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004290:	b29a      	uxth	r2, r3
 8004292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004294:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6959      	ldr	r1, [r3, #20]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	891a      	ldrh	r2, [r3, #8]
 80042a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f003 fa07 	bl	80076ba <USB_WritePMA>
 80042ac:	e1e2      	b.n	8004674 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	3306      	adds	r3, #6
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d307      	bcc.n	80042f6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	619a      	str	r2, [r3, #24]
 80042f4:	e002      	b.n	80042fc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 80c0 	bne.w	8004486 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d126      	bne.n	800435c <HAL_PCD_EP_DB_Transmit+0x482>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004322:	4413      	add	r3, r2
 8004324:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	011a      	lsls	r2, r3, #4
 800432c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800432e:	4413      	add	r3, r2
 8004330:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004336:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004340:	b29a      	uxth	r2, r3
 8004342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004354:	b29a      	uxth	r2, r3
 8004356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	e01a      	b.n	8004392 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d116      	bne.n	8004392 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	667b      	str	r3, [r7, #100]	@ 0x64
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004372:	b29b      	uxth	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004378:	4413      	add	r3, r2
 800437a:	667b      	str	r3, [r7, #100]	@ 0x64
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004384:	4413      	add	r3, r2
 8004386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800438a:	663b      	str	r3, [r7, #96]	@ 0x60
 800438c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800438e:	2200      	movs	r2, #0
 8004390:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	677b      	str	r3, [r7, #116]	@ 0x74
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d12b      	bne.n	80043f8 <HAL_PCD_EP_DB_Transmit+0x51e>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b4:	4413      	add	r3, r2
 80043b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	011a      	lsls	r2, r3, #4
 80043be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c0:	4413      	add	r3, r2
 80043c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e017      	b.n	8004428 <HAL_PCD_EP_DB_Transmit+0x54e>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d113      	bne.n	8004428 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800440e:	4413      	add	r3, r2
 8004410:	677b      	str	r3, [r7, #116]	@ 0x74
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	011a      	lsls	r2, r3, #4
 8004418:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800441a:	4413      	add	r3, r2
 800441c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004420:	673b      	str	r3, [r7, #112]	@ 0x70
 8004422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004424:	2200      	movs	r2, #0
 8004426:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f004 ff89 	bl	8009346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 811a 	bne.w	8004674 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800447c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004480:	b29b      	uxth	r3, r3
 8004482:	8013      	strh	r3, [r2, #0]
 8004484:	e0f6      	b.n	8004674 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d121      	bne.n	80044d4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044da:	2b01      	cmp	r3, #1
 80044dc:	f040 80ca 	bne.w	8004674 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80044e8:	441a      	add	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	69da      	ldr	r2, [r3, #28]
 80044f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80044f6:	441a      	add	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6a1a      	ldr	r2, [r3, #32]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	429a      	cmp	r2, r3
 8004506:	d30b      	bcc.n	8004520 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	6a1a      	ldr	r2, [r3, #32]
 8004514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004518:	1ad2      	subs	r2, r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	621a      	str	r2, [r3, #32]
 800451e:	e017      	b.n	8004550 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004528:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800452c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004538:	e00a      	b.n	8004550 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2200      	movs	r2, #0
 8004546:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	657b      	str	r3, [r7, #84]	@ 0x54
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d165      	bne.n	800462a <HAL_PCD_EP_DB_Transmit+0x750>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800456c:	b29b      	uxth	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004572:	4413      	add	r3, r2
 8004574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	011a      	lsls	r2, r3, #4
 800457c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800457e:	4413      	add	r3, r2
 8004580:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004584:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004590:	b29a      	uxth	r2, r3
 8004592:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459a:	2b3e      	cmp	r3, #62	@ 0x3e
 800459c:	d91d      	bls.n	80045da <HAL_PCD_EP_DB_Transmit+0x700>
 800459e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80045b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045b4:	3b01      	subs	r3, #1
 80045b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	029b      	lsls	r3, r3, #10
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4313      	orrs	r3, r2
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e041      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x784>
 80045da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <HAL_PCD_EP_DB_Transmit+0x71e>
 80045e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	e032      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x784>
 80045f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_PCD_EP_DB_Transmit+0x738>
 800460c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800460e:	3301      	adds	r3, #1
 8004610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	b29a      	uxth	r2, r3
 8004618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800461a:	b29b      	uxth	r3, r3
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	b29b      	uxth	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b29a      	uxth	r2, r3
 8004624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	e019      	b.n	800465e <HAL_PCD_EP_DB_Transmit+0x784>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d115      	bne.n	800465e <HAL_PCD_EP_DB_Transmit+0x784>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800463a:	b29b      	uxth	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004640:	4413      	add	r3, r2
 8004642:	657b      	str	r3, [r7, #84]	@ 0x54
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	011a      	lsls	r2, r3, #4
 800464a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464c:	4413      	add	r3, r2
 800464e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004652:	653b      	str	r3, [r7, #80]	@ 0x50
 8004654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004658:	b29a      	uxth	r2, r3
 800465a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800465c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6959      	ldr	r1, [r3, #20]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	895a      	ldrh	r2, [r3, #10]
 800466a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800466e:	b29b      	uxth	r3, r3
 8004670:	f003 f823 	bl	80076ba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800468a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800468e:	82bb      	strh	r3, [r7, #20]
 8004690:	8abb      	ldrh	r3, [r7, #20]
 8004692:	f083 0310 	eor.w	r3, r3, #16
 8004696:	82bb      	strh	r3, [r7, #20]
 8004698:	8abb      	ldrh	r3, [r7, #20]
 800469a:	f083 0320 	eor.w	r3, r3, #32
 800469e:	82bb      	strh	r3, [r7, #20]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	8abb      	ldrh	r3, [r7, #20]
 80046b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3790      	adds	r7, #144	@ 0x90
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b087      	sub	sp, #28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	817b      	strh	r3, [r7, #10]
 80046dc:	4613      	mov	r3, r2
 80046de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80046e0:	897b      	ldrh	r3, [r7, #10]
 80046e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ec:	897b      	ldrh	r3, [r7, #10]
 80046ee:	f003 0207 	and.w	r2, r3, #7
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	3310      	adds	r3, #16
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	e009      	b.n	8004718 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004704:	897a      	ldrh	r2, [r7, #10]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004718:	893b      	ldrh	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2200      	movs	r2, #0
 8004722:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	b29a      	uxth	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	80da      	strh	r2, [r3, #6]
 800472c:	e00b      	b.n	8004746 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2201      	movs	r2, #1
 8004732:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	b29a      	uxth	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	b29a      	uxth	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
	...

08004754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e272      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8087 	beq.w	8004882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004774:	4b92      	ldr	r3, [pc, #584]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b04      	cmp	r3, #4
 800477e:	d00c      	beq.n	800479a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004780:	4b8f      	ldr	r3, [pc, #572]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 030c 	and.w	r3, r3, #12
 8004788:	2b08      	cmp	r3, #8
 800478a:	d112      	bne.n	80047b2 <HAL_RCC_OscConfig+0x5e>
 800478c:	4b8c      	ldr	r3, [pc, #560]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004798:	d10b      	bne.n	80047b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479a:	4b89      	ldr	r3, [pc, #548]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d06c      	beq.n	8004880 <HAL_RCC_OscConfig+0x12c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d168      	bne.n	8004880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e24c      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_OscConfig+0x76>
 80047bc:	4b80      	ldr	r3, [pc, #512]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a7f      	ldr	r2, [pc, #508]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	e02e      	b.n	8004828 <HAL_RCC_OscConfig+0xd4>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0x98>
 80047d2:	4b7b      	ldr	r3, [pc, #492]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7a      	ldr	r2, [pc, #488]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b78      	ldr	r3, [pc, #480]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a77      	ldr	r2, [pc, #476]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e01d      	b.n	8004828 <HAL_RCC_OscConfig+0xd4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0xbc>
 80047f6:	4b72      	ldr	r3, [pc, #456]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a71      	ldr	r2, [pc, #452]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b6f      	ldr	r3, [pc, #444]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6e      	ldr	r2, [pc, #440]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0xd4>
 8004810:	4b6b      	ldr	r3, [pc, #428]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6a      	ldr	r2, [pc, #424]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b68      	ldr	r3, [pc, #416]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a67      	ldr	r2, [pc, #412]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fc ff0a 	bl	8001648 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fc ff06 	bl	8001648 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	@ 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e200      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b5d      	ldr	r3, [pc, #372]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0xe4>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fc fef6 	bl	8001648 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004860:	f7fc fef2 	bl	8001648 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	@ 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1ec      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x10c>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d063      	beq.n	8004956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800488e:	4b4c      	ldr	r3, [pc, #304]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800489a:	4b49      	ldr	r3, [pc, #292]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d11c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x18c>
 80048a6:	4b46      	ldr	r3, [pc, #280]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d116      	bne.n	80048e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	4b43      	ldr	r3, [pc, #268]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCC_OscConfig+0x176>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e1c0      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ca:	4b3d      	ldr	r3, [pc, #244]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4939      	ldr	r1, [pc, #228]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048de:	e03a      	b.n	8004956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e8:	4b36      	ldr	r3, [pc, #216]	@ (80049c4 <HAL_RCC_OscConfig+0x270>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fc feab 	bl	8001648 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f6:	f7fc fea7 	bl	8001648 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e1a1      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	4b2d      	ldr	r3, [pc, #180]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004914:	4b2a      	ldr	r3, [pc, #168]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4927      	ldr	r1, [pc, #156]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
 8004928:	e015      	b.n	8004956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800492a:	4b26      	ldr	r3, [pc, #152]	@ (80049c4 <HAL_RCC_OscConfig+0x270>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fc fe8a 	bl	8001648 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004938:	f7fc fe86 	bl	8001648 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e180      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d03a      	beq.n	80049d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d019      	beq.n	800499e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b17      	ldr	r3, [pc, #92]	@ (80049c8 <HAL_RCC_OscConfig+0x274>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004970:	f7fc fe6a 	bl	8001648 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004978:	f7fc fe66 	bl	8001648 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e160      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498a:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <HAL_RCC_OscConfig+0x26c>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004996:	2001      	movs	r0, #1
 8004998:	f000 faba 	bl	8004f10 <RCC_Delay>
 800499c:	e01c      	b.n	80049d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499e:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <HAL_RCC_OscConfig+0x274>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a4:	f7fc fe50 	bl	8001648 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049aa:	e00f      	b.n	80049cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ac:	f7fc fe4c 	bl	8001648 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d908      	bls.n	80049cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e146      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	42420000 	.word	0x42420000
 80049c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	4b92      	ldr	r3, [pc, #584]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e9      	bne.n	80049ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a6 	beq.w	8004b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10d      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f6:	4b88      	ldr	r3, [pc, #544]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4a87      	ldr	r2, [pc, #540]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a00:	61d3      	str	r3, [r2, #28]
 8004a02:	4b85      	ldr	r3, [pc, #532]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a12:	4b82      	ldr	r3, [pc, #520]	@ (8004c1c <HAL_RCC_OscConfig+0x4c8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d118      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c1c <HAL_RCC_OscConfig+0x4c8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a7e      	ldr	r2, [pc, #504]	@ (8004c1c <HAL_RCC_OscConfig+0x4c8>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7fc fe0d 	bl	8001648 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a32:	f7fc fe09 	bl	8001648 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b64      	cmp	r3, #100	@ 0x64
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e103      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	4b75      	ldr	r3, [pc, #468]	@ (8004c1c <HAL_RCC_OscConfig+0x4c8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x312>
 8004a58:	4b6f      	ldr	r3, [pc, #444]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	6213      	str	r3, [r2, #32]
 8004a64:	e02d      	b.n	8004ac2 <HAL_RCC_OscConfig+0x36e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x334>
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	4a69      	ldr	r2, [pc, #420]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	6213      	str	r3, [r2, #32]
 8004a7a:	4b67      	ldr	r3, [pc, #412]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4a66      	ldr	r2, [pc, #408]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	6213      	str	r3, [r2, #32]
 8004a86:	e01c      	b.n	8004ac2 <HAL_RCC_OscConfig+0x36e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d10c      	bne.n	8004aaa <HAL_RCC_OscConfig+0x356>
 8004a90:	4b61      	ldr	r3, [pc, #388]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	4a60      	ldr	r2, [pc, #384]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	6213      	str	r3, [r2, #32]
 8004a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6213      	str	r3, [r2, #32]
 8004aa8:	e00b      	b.n	8004ac2 <HAL_RCC_OscConfig+0x36e>
 8004aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	4a5a      	ldr	r2, [pc, #360]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	6213      	str	r3, [r2, #32]
 8004ab6:	4b58      	ldr	r3, [pc, #352]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	4a57      	ldr	r2, [pc, #348]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	f023 0304 	bic.w	r3, r3, #4
 8004ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d015      	beq.n	8004af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aca:	f7fc fdbd 	bl	8001648 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad2:	f7fc fdb9 	bl	8001648 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e0b1      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ee      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x37e>
 8004af4:	e014      	b.n	8004b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af6:	f7fc fda7 	bl	8001648 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afe:	f7fc fda3 	bl	8001648 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e09b      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b14:	4b40      	ldr	r3, [pc, #256]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ee      	bne.n	8004afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b26:	4b3c      	ldr	r3, [pc, #240]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8087 	beq.w	8004c4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b3c:	4b36      	ldr	r3, [pc, #216]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d061      	beq.n	8004c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d146      	bne.n	8004bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b50:	4b33      	ldr	r3, [pc, #204]	@ (8004c20 <HAL_RCC_OscConfig+0x4cc>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fc fd77 	bl	8001648 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7fc fd73 	bl	8001648 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e06d      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b70:	4b29      	ldr	r3, [pc, #164]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b84:	d108      	bne.n	8004b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b86:	4b24      	ldr	r3, [pc, #144]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	4921      	ldr	r1, [pc, #132]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b98:	4b1f      	ldr	r3, [pc, #124]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a19      	ldr	r1, [r3, #32]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	491b      	ldr	r1, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <HAL_RCC_OscConfig+0x4cc>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fc fd47 	bl	8001648 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fc fd43 	bl	8001648 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e03d      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x46a>
 8004bdc:	e035      	b.n	8004c4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <HAL_RCC_OscConfig+0x4cc>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fc fd30 	bl	8001648 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fc fd2c 	bl	8001648 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e026      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_RCC_OscConfig+0x4c4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x498>
 8004c0a:	e01e      	b.n	8004c4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e019      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c24:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCC_OscConfig+0x500>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d106      	bne.n	8004c46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40021000 	.word	0x40021000

08004c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0d0      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d910      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b67      	ldr	r3, [pc, #412]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0207 	bic.w	r2, r3, #7
 8004c82:	4965      	ldr	r1, [pc, #404]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b63      	ldr	r3, [pc, #396]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0b8      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cb4:	4b59      	ldr	r3, [pc, #356]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a58      	ldr	r2, [pc, #352]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ccc:	4b53      	ldr	r3, [pc, #332]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a52      	ldr	r2, [pc, #328]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004cd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd8:	4b50      	ldr	r3, [pc, #320]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	494d      	ldr	r1, [pc, #308]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d040      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b47      	ldr	r3, [pc, #284]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d115      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e07f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	4b41      	ldr	r3, [pc, #260]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e073      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d26:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06b      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d36:	4b39      	ldr	r3, [pc, #228]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f023 0203 	bic.w	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4936      	ldr	r1, [pc, #216]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d48:	f7fc fc7e 	bl	8001648 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7fc fc7a 	bl	8001648 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e053      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	4b2d      	ldr	r3, [pc, #180]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 020c 	and.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d1eb      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d78:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d210      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 0207 	bic.w	r2, r3, #7
 8004d8e:	4922      	ldr	r1, [pc, #136]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b20      	ldr	r3, [pc, #128]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e032      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db4:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4916      	ldr	r1, [pc, #88]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dd2:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	490e      	ldr	r1, [pc, #56]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004de6:	f000 f821 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8004dea:	4602      	mov	r2, r0
 8004dec:	4b0b      	ldr	r3, [pc, #44]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	490a      	ldr	r1, [pc, #40]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004df8:	5ccb      	ldrb	r3, [r1, r3]
 8004dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfe:	4a09      	ldr	r2, [pc, #36]	@ (8004e24 <HAL_RCC_ClockConfig+0x1cc>)
 8004e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e02:	4b09      	ldr	r3, [pc, #36]	@ (8004e28 <HAL_RCC_ClockConfig+0x1d0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fc fbdc 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40022000 	.word	0x40022000
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	0800c578 	.word	0x0800c578
 8004e24:	20000000 	.word	0x20000000
 8004e28:	20000004 	.word	0x20000004

08004e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d002      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x30>
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d003      	beq.n	8004e62 <HAL_RCC_GetSysClockFreq+0x36>
 8004e5a:	e027      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e5e:	613b      	str	r3, [r7, #16]
      break;
 8004e60:	e027      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	0c9b      	lsrs	r3, r3, #18
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	4a17      	ldr	r2, [pc, #92]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
 8004e6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d010      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e7a:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	0c5b      	lsrs	r3, r3, #17
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	4a11      	ldr	r2, [pc, #68]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e86:	5cd3      	ldrb	r3, [r2, r3]
 8004e88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e8e:	fb03 f202 	mul.w	r2, r3, r2
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e004      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	613b      	str	r3, [r7, #16]
      break;
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004eae:	613b      	str	r3, [r7, #16]
      break;
 8004eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eb2:	693b      	ldr	r3, [r7, #16]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	007a1200 	.word	0x007a1200
 8004ec8:	0800c590 	.word	0x0800c590
 8004ecc:	0800c5a0 	.word	0x0800c5a0
 8004ed0:	003d0900 	.word	0x003d0900

08004ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed8:	4b02      	ldr	r3, [pc, #8]	@ (8004ee4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eda:	681b      	ldr	r3, [r3, #0]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	20000000 	.word	0x20000000

08004ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004eec:	f7ff fff2 	bl	8004ed4 <HAL_RCC_GetHCLKFreq>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	4903      	ldr	r1, [pc, #12]	@ (8004f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efe:	5ccb      	ldrb	r3, [r1, r3]
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	0800c588 	.word	0x0800c588

08004f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f18:	4b0a      	ldr	r3, [pc, #40]	@ (8004f44 <RCC_Delay+0x34>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f48 <RCC_Delay+0x38>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0a5b      	lsrs	r3, r3, #9
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f2c:	bf00      	nop
  }
  while (Delay --);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1e5a      	subs	r2, r3, #1
 8004f32:	60fa      	str	r2, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f9      	bne.n	8004f2c <RCC_Delay+0x1c>
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	20000000 	.word	0x20000000
 8004f48:	10624dd3 	.word	0x10624dd3

08004f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d07d      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f78:	4b4c      	ldr	r3, [pc, #304]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	61d3      	str	r3, [r2, #28]
 8004f84:	4b49      	ldr	r3, [pc, #292]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	4b46      	ldr	r3, [pc, #280]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d118      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa0:	4b43      	ldr	r3, [pc, #268]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a42      	ldr	r2, [pc, #264]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fac:	f7fc fb4c 	bl	8001648 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb4:	f7fc fb48 	bl	8001648 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b64      	cmp	r3, #100	@ 0x64
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e06d      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd2:	4b36      	ldr	r3, [pc, #216]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02e      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d027      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005000:	4b2c      	ldr	r3, [pc, #176]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005006:	4a29      	ldr	r2, [pc, #164]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d014      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005016:	f7fc fb17 	bl	8001648 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501c:	e00a      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501e:	f7fc fb13 	bl	8001648 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e036      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	4b1d      	ldr	r3, [pc, #116]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ee      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005040:	4b1a      	ldr	r3, [pc, #104]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4917      	ldr	r1, [pc, #92]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504e:	4313      	orrs	r3, r2
 8005050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d105      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005058:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	4a13      	ldr	r2, [pc, #76]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005070:	4b0e      	ldr	r3, [pc, #56]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	490b      	ldr	r1, [pc, #44]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800508e:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4904      	ldr	r1, [pc, #16]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40007000 	.word	0x40007000
 80050b4:	42420440 	.word	0x42420440

080050b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	4638      	mov	r0, r7
 80050c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr

080050d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050e2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80050e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005106:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800510a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	b29b      	uxth	r3, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	b29b      	uxth	r3, r3
 800511c:	4013      	ands	r3, r2
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	4638      	mov	r0, r7
 8005154:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005184:	b480      	push	{r7}
 8005186:	b09d      	sub	sp, #116	@ 0x74
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	78db      	ldrb	r3, [r3, #3]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d81f      	bhi.n	80051f6 <USB_ActivateEndpoint+0x72>
 80051b6:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <USB_ActivateEndpoint+0x38>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051cd 	.word	0x080051cd
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051ff 	.word	0x080051ff
 80051c8:	080051db 	.word	0x080051db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80051cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80051d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80051d8:	e012      	b.n	8005200 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80051de:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80051e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80051e6:	e00b      	b.n	8005200 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80051ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80051f4:	e004      	b.n	8005200 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80051fc:	e000      	b.n	8005200 <USB_ActivateEndpoint+0x7c>
      break;
 80051fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800520e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800521a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800521e:	b29b      	uxth	r3, r3
 8005220:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005238:	b29b      	uxth	r3, r3
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	4313      	orrs	r3, r2
 8005240:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800525a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800525e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005262:	b29b      	uxth	r3, r3
 8005264:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	7b1b      	ldrb	r3, [r3, #12]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f040 8178 	bne.w	8005560 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8084 	beq.w	8005382 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005284:	b29b      	uxth	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	011a      	lsls	r2, r3, #4
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	827b      	strh	r3, [r7, #18]
 80052bc:	8a7b      	ldrh	r3, [r7, #18]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01b      	beq.n	80052fe <USB_ActivateEndpoint+0x17a>
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052dc:	823b      	strh	r3, [r7, #16]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8a3b      	ldrh	r3, [r7, #16]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	78db      	ldrb	r3, [r3, #3]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d020      	beq.n	8005348 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800531c:	81bb      	strh	r3, [r7, #12]
 800531e:	89bb      	ldrh	r3, [r7, #12]
 8005320:	f083 0320 	eor.w	r3, r3, #32
 8005324:	81bb      	strh	r3, [r7, #12]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	89bb      	ldrh	r3, [r7, #12]
 8005332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800533a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800533e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
 8005346:	e2d5      	b.n	80058f4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800535e:	81fb      	strh	r3, [r7, #14]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	89fb      	ldrh	r3, [r7, #14]
 800536c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800537c:	b29b      	uxth	r3, r3
 800537e:	8013      	strh	r3, [r2, #0]
 8005380:	e2b8      	b.n	80058f4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	633b      	str	r3, [r7, #48]	@ 0x30
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	4413      	add	r3, r2
 8005394:	633b      	str	r3, [r7, #48]	@ 0x30
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	011a      	lsls	r2, r3, #4
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	88db      	ldrh	r3, [r3, #6]
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	4413      	add	r3, r2
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	011a      	lsls	r2, r3, #4
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80053f0:	d91d      	bls.n	800542e <USB_ActivateEndpoint+0x2aa>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <USB_ActivateEndpoint+0x288>
 8005406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005408:	3b01      	subs	r3, #1
 800540a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29a      	uxth	r2, r3
 8005412:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005414:	b29b      	uxth	r3, r3
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	b29b      	uxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005426:	b29a      	uxth	r2, r3
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e026      	b.n	800547c <USB_ActivateEndpoint+0x2f8>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <USB_ActivateEndpoint+0x2c8>
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005444:	b29a      	uxth	r2, r3
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	e017      	b.n	800547c <USB_ActivateEndpoint+0x2f8>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <USB_ActivateEndpoint+0x2e2>
 8005460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005462:	3301      	adds	r3, #1
 8005464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29a      	uxth	r2, r3
 800546c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800546e:	b29b      	uxth	r3, r3
 8005470:	029b      	lsls	r3, r3, #10
 8005472:	b29b      	uxth	r3, r3
 8005474:	4313      	orrs	r3, r2
 8005476:	b29a      	uxth	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	847b      	strh	r3, [r7, #34]	@ 0x22
 800548a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800548c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01b      	beq.n	80054cc <USB_ActivateEndpoint+0x348>
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054aa:	843b      	strh	r3, [r7, #32]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	8c3b      	ldrh	r3, [r7, #32]
 80054b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d124      	bne.n	800551e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	83bb      	strh	r3, [r7, #28]
 80054ec:	8bbb      	ldrh	r3, [r7, #28]
 80054ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80054f2:	83bb      	strh	r3, [r7, #28]
 80054f4:	8bbb      	ldrh	r3, [r7, #28]
 80054f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054fa:	83bb      	strh	r3, [r7, #28]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	8bbb      	ldrh	r3, [r7, #28]
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]
 800551c:	e1ea      	b.n	80058f4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005534:	83fb      	strh	r3, [r7, #30]
 8005536:	8bfb      	ldrh	r3, [r7, #30]
 8005538:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800553c:	83fb      	strh	r3, [r7, #30]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	441a      	add	r2, r3
 8005548:	8bfb      	ldrh	r3, [r7, #30]
 800554a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800554e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800555a:	b29b      	uxth	r3, r3
 800555c:	8013      	strh	r3, [r2, #0]
 800555e:	e1c9      	b.n	80058f4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	78db      	ldrb	r3, [r3, #3]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d11e      	bne.n	80055a6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005598:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800559c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	8013      	strh	r3, [r2, #0]
 80055a4:	e01d      	b.n	80055e2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80055b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055bc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055f2:	4413      	add	r3, r2
 80055f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	011a      	lsls	r2, r3, #4
 80055fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005604:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	891b      	ldrh	r3, [r3, #8]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	657b      	str	r3, [r7, #84]	@ 0x54
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005620:	b29b      	uxth	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005626:	4413      	add	r3, r2
 8005628:	657b      	str	r3, [r7, #84]	@ 0x54
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	011a      	lsls	r2, r3, #4
 8005630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005632:	4413      	add	r3, r2
 8005634:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005638:	653b      	str	r3, [r7, #80]	@ 0x50
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	895b      	ldrh	r3, [r3, #10]
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	b29b      	uxth	r3, r3
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005648:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 8093 	bne.w	800577a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01b      	beq.n	80056a8 <USB_ActivateEndpoint+0x524>
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005686:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	441a      	add	r2, r3
 8005692:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005694:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005698:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800569c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80056b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80056b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01b      	beq.n	80056f8 <USB_ActivateEndpoint+0x574>
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80056e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800570a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005710:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005712:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005716:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005718:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800571a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800571e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800572c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005756:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800576c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005774:	b29b      	uxth	r3, r3
 8005776:	8013      	strh	r3, [r2, #0]
 8005778:	e0bc      	b.n	80058f4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800578a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800578e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01d      	beq.n	80057d2 <USB_ActivateEndpoint+0x64e>
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80057be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80057e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01d      	beq.n	800582a <USB_ActivateEndpoint+0x6a6>
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005804:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800581a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005822:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005826:	b29b      	uxth	r3, r3
 8005828:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	78db      	ldrb	r3, [r3, #3]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d024      	beq.n	800587c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005848:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800584c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005850:	f083 0320 	eor.w	r3, r3, #32
 8005854:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005866:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005876:	b29b      	uxth	r3, r3
 8005878:	8013      	strh	r3, [r2, #0]
 800587a:	e01d      	b.n	80058b8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800588e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005892:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	441a      	add	r2, r3
 80058a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80058a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	441a      	add	r2, r3
 80058dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80058f4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3774      	adds	r7, #116	@ 0x74
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop

08005904 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005904:	b480      	push	{r7}
 8005906:	b08d      	sub	sp, #52	@ 0x34
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	7b1b      	ldrb	r3, [r3, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 808e 	bne.w	8005a34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d044      	beq.n	80059aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	81bb      	strh	r3, [r7, #12]
 800592e:	89bb      	ldrh	r3, [r7, #12]
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01b      	beq.n	8005970 <USB_DeactivateEndpoint+0x6c>
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800594e:	817b      	strh	r3, [r7, #10]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	897b      	ldrh	r3, [r7, #10]
 800595c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005968:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800596c:	b29b      	uxth	r3, r3
 800596e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005986:	813b      	strh	r3, [r7, #8]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	893b      	ldrh	r3, [r7, #8]
 8005994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800599c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]
 80059a8:	e192      	b.n	8005cd0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	827b      	strh	r3, [r7, #18]
 80059b8:	8a7b      	ldrh	r3, [r7, #18]
 80059ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01b      	beq.n	80059fa <USB_DeactivateEndpoint+0xf6>
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d8:	823b      	strh	r3, [r7, #16]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	441a      	add	r2, r3
 80059e4:	8a3b      	ldrh	r3, [r7, #16]
 80059e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a10:	81fb      	strh	r3, [r7, #14]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	441a      	add	r2, r3
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	8013      	strh	r3, [r2, #0]
 8005a32:	e14d      	b.n	8005cd0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f040 80a5 	bne.w	8005b88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	843b      	strh	r3, [r7, #32]
 8005a4c:	8c3b      	ldrh	r3, [r7, #32]
 8005a4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01b      	beq.n	8005a8e <USB_DeactivateEndpoint+0x18a>
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6c:	83fb      	strh	r3, [r7, #30]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	8bfb      	ldrh	r3, [r7, #30]
 8005a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	83bb      	strh	r3, [r7, #28]
 8005a9c:	8bbb      	ldrh	r3, [r7, #28]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01b      	beq.n	8005ade <USB_DeactivateEndpoint+0x1da>
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abc:	837b      	strh	r3, [r7, #26]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	8b7b      	ldrh	r3, [r7, #26]
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af4:	833b      	strh	r3, [r7, #24]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	8b3b      	ldrh	r3, [r7, #24]
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2c:	82fb      	strh	r3, [r7, #22]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	8afb      	ldrh	r3, [r7, #22]
 8005b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b64:	82bb      	strh	r3, [r7, #20]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	8abb      	ldrh	r3, [r7, #20]
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
 8005b86:	e0a3      	b.n	8005cd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005b96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <USB_DeactivateEndpoint+0x2d4>
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005be6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <USB_DeactivateEndpoint+0x324>
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	441a      	add	r2, r3
 8005cba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005cbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3734      	adds	r7, #52	@ 0x34
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b0c2      	sub	sp, #264	@ 0x108
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cea:	6018      	str	r0, [r3, #0]
 8005cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	f040 86b7 	bne.w	8006a76 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d908      	bls.n	8005d36 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d34:	e007      	b.n	8005d46 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	7b1b      	ldrb	r3, [r3, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d13a      	bne.n	8005dcc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6959      	ldr	r1, [r3, #20]
 8005d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	88da      	ldrh	r2, [r3, #6]
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d78:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f001 fc9c 	bl	80076ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	011a      	lsls	r2, r3, #4
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	f000 be1f 	b.w	8006a0a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f040 8462 	bne.w	80066a2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f240 83df 	bls.w	80065ba <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e22:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e68:	1ad2      	subs	r2, r2, r3
 8005e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 81c7 	beq.w	800622c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d177      	bne.n	8005faa <USB_EPStartXfer+0x2ce>
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eda:	4413      	add	r3, r2
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	011a      	lsls	r2, r3, #4
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f0c:	d921      	bls.n	8005f52 <USB_EPStartXfer+0x276>
 8005f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <USB_EPStartXfer+0x252>
 8005f24:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	801a      	strh	r2, [r3, #0]
 8005f50:	e050      	b.n	8005ff4 <USB_EPStartXfer+0x318>
 8005f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <USB_EPStartXfer+0x294>
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	801a      	strh	r2, [r3, #0]
 8005f6e:	e041      	b.n	8005ff4 <USB_EPStartXfer+0x318>
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f74:	085b      	lsrs	r3, r3, #1
 8005f76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <USB_EPStartXfer+0x2b4>
 8005f86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	029b      	lsls	r3, r3, #10
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	e024      	b.n	8005ff4 <USB_EPStartXfer+0x318>
 8005faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d11c      	bne.n	8005ff4 <USB_EPStartXfer+0x318>
 8005fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	4413      	add	r3, r2
 8005fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	011a      	lsls	r2, r3, #4
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	895b      	ldrh	r3, [r3, #10]
 8006000:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6959      	ldr	r1, [r3, #20]
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006014:	b29b      	uxth	r3, r3
 8006016:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800601a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800601e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006022:	6800      	ldr	r0, [r0, #0]
 8006024:	f001 fb49 	bl	80076ba <USB_WritePMA>
            ep->xfer_buff += len;
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006038:	441a      	add	r2, r3
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	429a      	cmp	r2, r3
 8006060:	d90f      	bls.n	8006082 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006072:	1ad2      	subs	r2, r2, r3
 8006074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	621a      	str	r2, [r3, #32]
 8006080:	e00e      	b.n	80060a0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d177      	bne.n	80061a0 <USB_EPStartXfer+0x4c4>
 80060b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	461a      	mov	r2, r3
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	4413      	add	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	011a      	lsls	r2, r3, #4
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006100:	2b3e      	cmp	r3, #62	@ 0x3e
 8006102:	d921      	bls.n	8006148 <USB_EPStartXfer+0x46c>
 8006104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <USB_EPStartXfer+0x448>
 800611a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800611e:	3b01      	subs	r3, #1
 8006120:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29a      	uxth	r2, r3
 800612a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800612e:	b29b      	uxth	r3, r3
 8006130:	029b      	lsls	r3, r3, #10
 8006132:	b29b      	uxth	r3, r3
 8006134:	4313      	orrs	r3, r2
 8006136:	b29b      	uxth	r3, r3
 8006138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006140:	b29a      	uxth	r2, r3
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e056      	b.n	80061f6 <USB_EPStartXfer+0x51a>
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <USB_EPStartXfer+0x48a>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615e:	b29a      	uxth	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	e047      	b.n	80061f6 <USB_EPStartXfer+0x51a>
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <USB_EPStartXfer+0x4aa>
 800617c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006180:	3301      	adds	r3, #1
 8006182:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29a      	uxth	r2, r3
 800618c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006190:	b29b      	uxth	r3, r3
 8006192:	029b      	lsls	r3, r3, #10
 8006194:	b29b      	uxth	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b29a      	uxth	r2, r3
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e02a      	b.n	80061f6 <USB_EPStartXfer+0x51a>
 80061a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d122      	bne.n	80061f6 <USB_EPStartXfer+0x51a>
 80061b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	623b      	str	r3, [r7, #32]
 80061bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	4413      	add	r3, r2
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	011a      	lsls	r2, r3, #4
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	4413      	add	r3, r2
 80061e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	891b      	ldrh	r3, [r3, #8]
 8006202:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6959      	ldr	r1, [r3, #20]
 8006212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006216:	b29b      	uxth	r3, r3
 8006218:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800621c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006220:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006224:	6800      	ldr	r0, [r0, #0]
 8006226:	f001 fa48 	bl	80076ba <USB_WritePMA>
 800622a:	e3ee      	b.n	8006a0a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800622c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d177      	bne.n	800632c <USB_EPStartXfer+0x650>
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800625c:	4413      	add	r3, r2
 800625e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	011a      	lsls	r2, r3, #4
 800626e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006270:	4413      	add	r3, r2
 8006272:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006276:	647b      	str	r3, [r7, #68]	@ 0x44
 8006278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006282:	b29a      	uxth	r2, r3
 8006284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628c:	2b3e      	cmp	r3, #62	@ 0x3e
 800628e:	d921      	bls.n	80062d4 <USB_EPStartXfer+0x5f8>
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <USB_EPStartXfer+0x5d4>
 80062a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062aa:	3b01      	subs	r3, #1
 80062ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	029b      	lsls	r3, r3, #10
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4313      	orrs	r3, r2
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e056      	b.n	8006382 <USB_EPStartXfer+0x6a6>
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <USB_EPStartXfer+0x616>
 80062dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	e047      	b.n	8006382 <USB_EPStartXfer+0x6a6>
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <USB_EPStartXfer+0x636>
 8006308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800630c:	3301      	adds	r3, #1
 800630e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29a      	uxth	r2, r3
 8006318:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800631c:	b29b      	uxth	r3, r3
 800631e:	029b      	lsls	r3, r3, #10
 8006320:	b29b      	uxth	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b29a      	uxth	r2, r3
 8006326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e02a      	b.n	8006382 <USB_EPStartXfer+0x6a6>
 800632c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d122      	bne.n	8006382 <USB_EPStartXfer+0x6a6>
 800633c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	653b      	str	r3, [r7, #80]	@ 0x50
 8006348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800635c:	4413      	add	r3, r2
 800635e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	011a      	lsls	r2, r3, #4
 800636e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006370:	4413      	add	r3, r2
 8006372:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	b29a      	uxth	r2, r3
 800637e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006380:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	891b      	ldrh	r3, [r3, #8]
 800638e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6959      	ldr	r1, [r3, #20]
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063b0:	6800      	ldr	r0, [r0, #0]
 80063b2:	f001 f982 	bl	80076ba <USB_WritePMA>
            ep->xfer_buff += len;
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c6:	441a      	add	r2, r3
 80063c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d90f      	bls.n	8006410 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	621a      	str	r2, [r3, #32]
 800640e:	e00e      	b.n	800642e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	643b      	str	r3, [r7, #64]	@ 0x40
 800643a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d177      	bne.n	800653a <USB_EPStartXfer+0x85e>
 800644a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	4413      	add	r3, r2
 800646c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	011a      	lsls	r2, r3, #4
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	4413      	add	r3, r2
 8006480:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
 8006486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006490:	b29a      	uxth	r2, r3
 8006492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649a:	2b3e      	cmp	r3, #62	@ 0x3e
 800649c:	d921      	bls.n	80064e2 <USB_EPStartXfer+0x806>
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d104      	bne.n	80064be <USB_EPStartXfer+0x7e2>
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b8:	3b01      	subs	r3, #1
 80064ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	029b      	lsls	r3, r3, #10
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	e050      	b.n	8006584 <USB_EPStartXfer+0x8a8>
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <USB_EPStartXfer+0x824>
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e041      	b.n	8006584 <USB_EPStartXfer+0x8a8>
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <USB_EPStartXfer+0x844>
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	3301      	adds	r3, #1
 800651c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29a      	uxth	r2, r3
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29b      	uxth	r3, r3
 8006530:	4313      	orrs	r3, r2
 8006532:	b29a      	uxth	r2, r3
 8006534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	e024      	b.n	8006584 <USB_EPStartXfer+0x8a8>
 800653a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	785b      	ldrb	r3, [r3, #1]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d11c      	bne.n	8006584 <USB_EPStartXfer+0x8a8>
 800654a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006558:	b29b      	uxth	r3, r3
 800655a:	461a      	mov	r2, r3
 800655c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800655e:	4413      	add	r3, r2
 8006560:	643b      	str	r3, [r7, #64]	@ 0x40
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	011a      	lsls	r2, r3, #4
 8006570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006572:	4413      	add	r3, r2
 8006574:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	b29a      	uxth	r2, r3
 8006580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006582:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	895b      	ldrh	r3, [r3, #10]
 8006590:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6959      	ldr	r1, [r3, #20]
 80065a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	f001 f881 	bl	80076ba <USB_WritePMA>
 80065b8:	e227      	b.n	8006a0a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80065ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80065ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065f0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	441a      	add	r2, r3
 800660e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006612:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006616:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800661a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006622:	b29b      	uxth	r3, r3
 8006624:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006640:	b29b      	uxth	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006646:	4413      	add	r3, r2
 8006648:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800664a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800664e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011a      	lsls	r2, r3, #4
 8006658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800665a:	4413      	add	r3, r2
 800665c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006660:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	b29a      	uxth	r2, r3
 8006668:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800666a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	891b      	ldrh	r3, [r3, #8]
 8006678:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6959      	ldr	r1, [r3, #20]
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	b29b      	uxth	r3, r3
 800668e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006692:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006696:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	f001 f80d 	bl	80076ba <USB_WritePMA>
 80066a0:	e1b3      	b.n	8006a0a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	1ad2      	subs	r2, r2, r3
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80c6 	beq.w	8006874 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	785b      	ldrb	r3, [r3, #1]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d177      	bne.n	80067f4 <USB_EPStartXfer+0xb18>
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006724:	4413      	add	r3, r2
 8006726:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	011a      	lsls	r2, r3, #4
 8006736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006738:	4413      	add	r3, r2
 800673a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800673e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800674a:	b29a      	uxth	r2, r3
 800674c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	2b3e      	cmp	r3, #62	@ 0x3e
 8006756:	d921      	bls.n	800679c <USB_EPStartXfer+0xac0>
 8006758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <USB_EPStartXfer+0xa9c>
 800676e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006772:	3b01      	subs	r3, #1
 8006774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29a      	uxth	r2, r3
 800677e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006782:	b29b      	uxth	r3, r3
 8006784:	029b      	lsls	r3, r3, #10
 8006786:	b29b      	uxth	r3, r3
 8006788:	4313      	orrs	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006794:	b29a      	uxth	r2, r3
 8006796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	e050      	b.n	800683e <USB_EPStartXfer+0xb62>
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <USB_EPStartXfer+0xade>
 80067a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e041      	b.n	800683e <USB_EPStartXfer+0xb62>
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <USB_EPStartXfer+0xafe>
 80067d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067d4:	3301      	adds	r3, #1
 80067d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80067da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	4313      	orrs	r3, r2
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e024      	b.n	800683e <USB_EPStartXfer+0xb62>
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d11c      	bne.n	800683e <USB_EPStartXfer+0xb62>
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006812:	b29b      	uxth	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006818:	4413      	add	r3, r2
 800681a:	673b      	str	r3, [r7, #112]	@ 0x70
 800681c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	011a      	lsls	r2, r3, #4
 800682a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800682c:	4413      	add	r3, r2
 800682e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006838:	b29a      	uxth	r2, r3
 800683a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800683c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	895b      	ldrh	r3, [r3, #10]
 800684a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6959      	ldr	r1, [r3, #20]
 800685a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685e:	b29b      	uxth	r3, r3
 8006860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006864:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006868:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f000 ff24 	bl	80076ba <USB_WritePMA>
 8006872:	e0ca      	b.n	8006a0a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d177      	bne.n	8006974 <USB_EPStartXfer+0xc98>
 8006884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068a4:	4413      	add	r3, r2
 80068a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	011a      	lsls	r2, r3, #4
 80068b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80068d6:	d921      	bls.n	800691c <USB_EPStartXfer+0xc40>
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <USB_EPStartXfer+0xc1c>
 80068ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80068f2:	3b01      	subs	r3, #1
 80068f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80068f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006902:	b29b      	uxth	r3, r3
 8006904:	029b      	lsls	r3, r3, #10
 8006906:	b29b      	uxth	r3, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	b29b      	uxth	r3, r3
 800690c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006914:	b29a      	uxth	r2, r3
 8006916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	e05c      	b.n	80069d6 <USB_EPStartXfer+0xcfa>
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <USB_EPStartXfer+0xc5e>
 8006924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006932:	b29a      	uxth	r2, r3
 8006934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e04d      	b.n	80069d6 <USB_EPStartXfer+0xcfa>
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	085b      	lsrs	r3, r3, #1
 8006940:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <USB_EPStartXfer+0xc7e>
 8006950:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800695a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29a      	uxth	r2, r3
 8006960:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006964:	b29b      	uxth	r3, r3
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	b29b      	uxth	r3, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	e030      	b.n	80069d6 <USB_EPStartXfer+0xcfa>
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d128      	bne.n	80069d6 <USB_EPStartXfer+0xcfa>
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069a8:	4413      	add	r3, r2
 80069aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	011a      	lsls	r2, r3, #4
 80069bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80069d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	891b      	ldrh	r3, [r3, #8]
 80069e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6959      	ldr	r1, [r3, #20]
 80069f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a04:	6800      	ldr	r0, [r0, #0]
 8006a06:	f000 fe58 	bl	80076ba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a30:	817b      	strh	r3, [r7, #10]
 8006a32:	897b      	ldrh	r3, [r7, #10]
 8006a34:	f083 0310 	eor.w	r3, r3, #16
 8006a38:	817b      	strh	r3, [r7, #10]
 8006a3a:	897b      	ldrh	r3, [r7, #10]
 8006a3c:	f083 0320 	eor.w	r3, r3, #32
 8006a40:	817b      	strh	r3, [r7, #10]
 8006a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	897b      	ldrh	r3, [r7, #10]
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
 8006a72:	f000 bcde 	b.w	8007432 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	7b1b      	ldrb	r3, [r3, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f040 80bb 	bne.w	8006bfe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d917      	bls.n	8006ad4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac4:	1ad2      	subs	r2, r2, r3
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	619a      	str	r2, [r3, #24]
 8006ad2:	e00e      	b.n	8006af2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b16:	4413      	add	r3, r2
 8006b18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	011a      	lsls	r2, r3, #4
 8006b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b2e:	4413      	add	r3, r2
 8006b30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b50:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b52:	d924      	bls.n	8006b9e <USB_EPStartXfer+0xec2>
 8006b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d104      	bne.n	8006b74 <USB_EPStartXfer+0xe98>
 8006b6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4313      	orrs	r3, r2
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	f000 bc10 	b.w	80073be <USB_EPStartXfer+0x16e2>
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10c      	bne.n	8006bc0 <USB_EPStartXfer+0xee4>
 8006ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	e3fe      	b.n	80073be <USB_EPStartXfer+0x16e2>
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <USB_EPStartXfer+0xf04>
 8006bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	029b      	lsls	r3, r3, #10
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	e3df      	b.n	80073be <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	78db      	ldrb	r3, [r3, #3]
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	f040 8218 	bne.w	8007040 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	785b      	ldrb	r3, [r3, #1]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 809d 	bne.w	8006d5c <USB_EPStartXfer+0x1080>
 8006c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	461a      	mov	r2, r3
 8006c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c46:	4413      	add	r3, r2
 8006c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	011a      	lsls	r2, r3, #4
 8006c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c5e:	4413      	add	r3, r2
 8006c60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c8a:	d92b      	bls.n	8006ce4 <USB_EPStartXfer+0x1008>
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d104      	bne.n	8006cbc <USB_EPStartXfer+0xfe0>
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	029b      	lsls	r3, r3, #10
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e070      	b.n	8006dc6 <USB_EPStartXfer+0x10ea>
 8006ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10c      	bne.n	8006d0e <USB_EPStartXfer+0x1032>
 8006cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e05b      	b.n	8006dc6 <USB_EPStartXfer+0x10ea>
 8006d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <USB_EPStartXfer+0x1062>
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4313      	orrs	r3, r2
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006d58:	801a      	strh	r2, [r3, #0]
 8006d5a:	e034      	b.n	8006dc6 <USB_EPStartXfer+0x10ea>
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d12c      	bne.n	8006dc6 <USB_EPStartXfer+0x10ea>
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d90:	4413      	add	r3, r2
 8006d92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	011a      	lsls	r2, r3, #4
 8006da4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006da8:	4413      	add	r3, r2
 8006daa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 809d 	bne.w	8006f20 <USB_EPStartXfer+0x1244>
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	011a      	lsls	r2, r3, #4
 8006e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e4e:	d92b      	bls.n	8006ea8 <USB_EPStartXfer+0x11cc>
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 031f 	and.w	r3, r3, #31
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <USB_EPStartXfer+0x11a4>
 8006e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	029b      	lsls	r3, r3, #10
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	4313      	orrs	r3, r2
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	e069      	b.n	8006f7c <USB_EPStartXfer+0x12a0>
 8006ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10c      	bne.n	8006ed2 <USB_EPStartXfer+0x11f6>
 8006eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ece:	801a      	strh	r2, [r3, #0]
 8006ed0:	e054      	b.n	8006f7c <USB_EPStartXfer+0x12a0>
 8006ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <USB_EPStartXfer+0x1226>
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efc:	3301      	adds	r3, #1
 8006efe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	029b      	lsls	r3, r3, #10
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	e02d      	b.n	8006f7c <USB_EPStartXfer+0x12a0>
 8006f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d125      	bne.n	8006f7c <USB_EPStartXfer+0x12a0>
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f46:	4413      	add	r3, r2
 8006f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	011a      	lsls	r2, r3, #4
 8006f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f5e:	4413      	add	r3, r2
 8006f60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f7a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8218 	beq.w	80073be <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <USB_EPStartXfer+0x12ea>
 8006fba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10d      	bne.n	8006fe2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 81f5 	bne.w	80073be <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f040 81ee 	bne.w	80073be <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007008:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800700c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	441a      	add	r2, r3
 8007026:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007036:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]
 800703e:	e1be      	b.n	80073be <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	78db      	ldrb	r3, [r3, #3]
 800704c:	2b01      	cmp	r3, #1
 800704e:	f040 81b4 	bne.w	80073ba <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	d917      	bls.n	800709e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	619a      	str	r2, [r3, #24]
 800709c:	e00e      	b.n	80070bc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2200      	movs	r2, #0
 80070ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f040 8085 	bne.w	80071d8 <USB_EPStartXfer+0x14fc>
 80070ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070f2:	4413      	add	r3, r2
 80070f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	011a      	lsls	r2, r3, #4
 8007106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800710a:	4413      	add	r3, r2
 800710c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712c:	2b3e      	cmp	r3, #62	@ 0x3e
 800712e:	d923      	bls.n	8007178 <USB_EPStartXfer+0x149c>
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <USB_EPStartXfer+0x1474>
 8007146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800714a:	3b01      	subs	r3, #1
 800714c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29a      	uxth	r2, r3
 8007158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715c:	b29b      	uxth	r3, r3
 800715e:	029b      	lsls	r3, r3, #10
 8007160:	b29b      	uxth	r3, r3
 8007162:	4313      	orrs	r3, r2
 8007164:	b29b      	uxth	r3, r3
 8007166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	e060      	b.n	800723a <USB_EPStartXfer+0x155e>
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10c      	bne.n	800719a <USB_EPStartXfer+0x14be>
 8007180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007190:	b29a      	uxth	r2, r3
 8007192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	e04f      	b.n	800723a <USB_EPStartXfer+0x155e>
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <USB_EPStartXfer+0x14de>
 80071b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071b4:	3301      	adds	r3, #1
 80071b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	029b      	lsls	r3, r3, #10
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e030      	b.n	800723a <USB_EPStartXfer+0x155e>
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d128      	bne.n	800723a <USB_EPStartXfer+0x155e>
 80071e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80071f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007204:	b29b      	uxth	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800720c:	4413      	add	r3, r2
 800720e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	011a      	lsls	r2, r3, #4
 8007220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007224:	4413      	add	r3, r2
 8007226:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800722a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007232:	b29a      	uxth	r2, r3
 8007234:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 8085 	bne.w	8007364 <USB_EPStartXfer+0x1688>
 800725a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007276:	b29b      	uxth	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800727e:	4413      	add	r3, r2
 8007280:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	011a      	lsls	r2, r3, #4
 8007292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007296:	4413      	add	r3, r2
 8007298:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800729c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ba:	d923      	bls.n	8007304 <USB_EPStartXfer+0x1628>
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <USB_EPStartXfer+0x1600>
 80072d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072d6:	3b01      	subs	r3, #1
 80072d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	029b      	lsls	r3, r3, #10
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	4313      	orrs	r3, r2
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	e05c      	b.n	80073be <USB_EPStartXfer+0x16e2>
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10c      	bne.n	8007326 <USB_EPStartXfer+0x164a>
 800730c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e04b      	b.n	80073be <USB_EPStartXfer+0x16e2>
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <USB_EPStartXfer+0x166a>
 800733c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007340:	3301      	adds	r3, #1
 8007342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29a      	uxth	r2, r3
 800734e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007352:	b29b      	uxth	r3, r3
 8007354:	029b      	lsls	r3, r3, #10
 8007356:	b29b      	uxth	r3, r3
 8007358:	4313      	orrs	r3, r2
 800735a:	b29a      	uxth	r2, r3
 800735c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	e02c      	b.n	80073be <USB_EPStartXfer+0x16e2>
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d124      	bne.n	80073be <USB_EPStartXfer+0x16e2>
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007382:	b29b      	uxth	r3, r3
 8007384:	461a      	mov	r2, r3
 8007386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800738a:	4413      	add	r3, r2
 800738c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	011a      	lsls	r2, r3, #4
 800739e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073a2:	4413      	add	r3, r2
 80073a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	e001      	b.n	80073be <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e03a      	b.n	8007434 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80073e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80073ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80073f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80073f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80073f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80073fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	441a      	add	r2, r3
 800741a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d020      	beq.n	8007492 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007466:	81bb      	strh	r3, [r7, #12]
 8007468:	89bb      	ldrh	r3, [r7, #12]
 800746a:	f083 0310 	eor.w	r3, r3, #16
 800746e:	81bb      	strh	r3, [r7, #12]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	441a      	add	r2, r3
 800747a:	89bb      	ldrh	r3, [r7, #12]
 800747c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800748c:	b29b      	uxth	r3, r3
 800748e:	8013      	strh	r3, [r2, #0]
 8007490:	e01f      	b.n	80074d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a8:	81fb      	strh	r3, [r7, #14]
 80074aa:	89fb      	ldrh	r3, [r7, #14]
 80074ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80074b0:	81fb      	strh	r3, [r7, #14]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	441a      	add	r2, r3
 80074bc:	89fb      	ldrh	r3, [r7, #14]
 80074be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr

080074de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	7b1b      	ldrb	r3, [r3, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 809d 	bne.w	800762c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d04c      	beq.n	8007594 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	823b      	strh	r3, [r7, #16]
 8007508:	8a3b      	ldrh	r3, [r7, #16]
 800750a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01b      	beq.n	800754a <USB_EPClearStall+0x6c>
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007528:	81fb      	strh	r3, [r7, #14]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	89fb      	ldrh	r3, [r7, #14]
 8007536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800753e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007542:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007546:	b29b      	uxth	r3, r3
 8007548:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	78db      	ldrb	r3, [r3, #3]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d06c      	beq.n	800762c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007568:	81bb      	strh	r3, [r7, #12]
 800756a:	89bb      	ldrh	r3, [r7, #12]
 800756c:	f083 0320 	eor.w	r3, r3, #32
 8007570:	81bb      	strh	r3, [r7, #12]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	441a      	add	r2, r3
 800757c:	89bb      	ldrh	r3, [r7, #12]
 800757e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800758a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800758e:	b29b      	uxth	r3, r3
 8007590:	8013      	strh	r3, [r2, #0]
 8007592:	e04b      	b.n	800762c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	82fb      	strh	r3, [r7, #22]
 80075a2:	8afb      	ldrh	r3, [r7, #22]
 80075a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01b      	beq.n	80075e4 <USB_EPClearStall+0x106>
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c2:	82bb      	strh	r3, [r7, #20]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	8abb      	ldrh	r3, [r7, #20]
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075fa:	827b      	strh	r3, [r7, #18]
 80075fc:	8a7b      	ldrh	r3, [r7, #18]
 80075fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007602:	827b      	strh	r3, [r7, #18]
 8007604:	8a7b      	ldrh	r3, [r7, #18]
 8007606:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800760a:	827b      	strh	r3, [r7, #18]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	8a7b      	ldrh	r3, [r7, #18]
 8007618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800761c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007628:	b29b      	uxth	r3, r3
 800762a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2280      	movs	r2, #128	@ 0x80
 800764e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr

0800765e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr

08007672 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr

08007686 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007694:	b29b      	uxth	r3, r3
 8007696:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007698:	68fb      	ldr	r3, [r7, #12]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr

080076ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b08b      	sub	sp, #44	@ 0x2c
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	4611      	mov	r1, r2
 80076c6:	461a      	mov	r2, r3
 80076c8:	460b      	mov	r3, r1
 80076ca:	80fb      	strh	r3, [r7, #6]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076d0:	88bb      	ldrh	r3, [r7, #4]
 80076d2:	3301      	adds	r3, #1
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	005a      	lsls	r2, r3, #1
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f2:	e01f      	b.n	8007734 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	3301      	adds	r3, #1
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b21b      	sxth	r3, r3
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	b21a      	sxth	r2, r3
 8007706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800770a:	4313      	orrs	r3, r2
 800770c:	b21b      	sxth	r3, r3
 800770e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	8a7a      	ldrh	r2, [r7, #18]
 8007714:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	3302      	adds	r3, #2
 800771a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	3302      	adds	r3, #2
 8007720:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	3301      	adds	r3, #1
 8007726:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	3301      	adds	r3, #1
 800772c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	3b01      	subs	r3, #1
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1dc      	bne.n	80076f4 <USB_WritePMA+0x3a>
  }
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	372c      	adds	r7, #44	@ 0x2c
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007746:	b480      	push	{r7}
 8007748:	b08b      	sub	sp, #44	@ 0x2c
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	4611      	mov	r1, r2
 8007752:	461a      	mov	r2, r3
 8007754:	460b      	mov	r3, r1
 8007756:	80fb      	strh	r3, [r7, #6]
 8007758:	4613      	mov	r3, r2
 800775a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800775c:	88bb      	ldrh	r3, [r7, #4]
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	b29b      	uxth	r3, r3
 8007762:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	005a      	lsls	r2, r3, #1
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007778:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
 800777e:	e01b      	b.n	80077b8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	3302      	adds	r3, #2
 800778c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3301      	adds	r3, #1
 800779a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	3301      	adds	r3, #1
 80077aa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	3302      	adds	r3, #2
 80077b0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	3b01      	subs	r3, #1
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e0      	bne.n	8007780 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80077be:	88bb      	ldrh	r3, [r7, #4]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	701a      	strb	r2, [r3, #0]
  }
}
 80077da:	bf00      	nop
 80077dc:	372c      	adds	r7, #44	@ 0x2c
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	7c1b      	ldrb	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d115      	bne.n	8007828 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007800:	2202      	movs	r2, #2
 8007802:	2181      	movs	r1, #129	@ 0x81
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 fe82 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007814:	2202      	movs	r2, #2
 8007816:	2101      	movs	r1, #1
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fe78 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007826:	e012      	b.n	800784e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007828:	2340      	movs	r3, #64	@ 0x40
 800782a:	2202      	movs	r2, #2
 800782c:	2181      	movs	r1, #129	@ 0x81
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fe6d 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800783a:	2340      	movs	r3, #64	@ 0x40
 800783c:	2202      	movs	r2, #2
 800783e:	2101      	movs	r1, #1
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fe64 	bl	800950e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800784e:	2308      	movs	r3, #8
 8007850:	2203      	movs	r2, #3
 8007852:	2182      	movs	r1, #130	@ 0x82
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fe5a 	bl	800950e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007860:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007864:	f001 ff7a 	bl	800975c <USBD_static_malloc>
 8007868:	4602      	mov	r2, r0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800787a:	2301      	movs	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
 800787e:	e026      	b.n	80078ce <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007886:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7c1b      	ldrb	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078b4:	2101      	movs	r1, #1
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 ff19 	bl	80096ee <USBD_LL_PrepareReceive>
 80078bc:	e007      	b.n	80078ce <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078c4:	2340      	movs	r3, #64	@ 0x40
 80078c6:	2101      	movs	r1, #1
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 ff10 	bl	80096ee <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078e8:	2181      	movs	r1, #129	@ 0x81
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 fe35 	bl	800955a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078f6:	2101      	movs	r1, #1
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fe2e 	bl	800955a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007906:	2182      	movs	r1, #130	@ 0x82
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fe26 	bl	800955a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00e      	beq.n	800793c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792e:	4618      	mov	r0, r3
 8007930:	f001 ff20 	bl	8009774 <USBD_static_free>
    pdev->pClassData = NULL;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b086      	sub	sp, #24
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007956:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800796c:	2b00      	cmp	r3, #0
 800796e:	d039      	beq.n	80079e4 <USBD_CDC_Setup+0x9e>
 8007970:	2b20      	cmp	r3, #32
 8007972:	d17f      	bne.n	8007a74 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	88db      	ldrh	r3, [r3, #6]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d029      	beq.n	80079d0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b25b      	sxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	da11      	bge.n	80079aa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007992:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	88d2      	ldrh	r2, [r2, #6]
 8007998:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800799a:	6939      	ldr	r1, [r7, #16]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	88db      	ldrh	r3, [r3, #6]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fa06 	bl	8008db4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80079a8:	e06b      	b.n	8007a82 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	785a      	ldrb	r2, [r3, #1]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	88db      	ldrh	r3, [r3, #6]
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079c0:	6939      	ldr	r1, [r7, #16]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88db      	ldrh	r3, [r3, #6]
 80079c6:	461a      	mov	r2, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fa21 	bl	8008e10 <USBD_CtlPrepareRx>
      break;
 80079ce:	e058      	b.n	8007a82 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	7850      	ldrb	r0, [r2, #1]
 80079dc:	2200      	movs	r2, #0
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	4798      	blx	r3
      break;
 80079e2:	e04e      	b.n	8007a82 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b0b      	cmp	r3, #11
 80079ea:	d02e      	beq.n	8007a4a <USBD_CDC_Setup+0x104>
 80079ec:	2b0b      	cmp	r3, #11
 80079ee:	dc38      	bgt.n	8007a62 <USBD_CDC_Setup+0x11c>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <USBD_CDC_Setup+0xb4>
 80079f4:	2b0a      	cmp	r3, #10
 80079f6:	d014      	beq.n	8007a22 <USBD_CDC_Setup+0xdc>
 80079f8:	e033      	b.n	8007a62 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d107      	bne.n	8007a14 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a04:	f107 030c 	add.w	r3, r7, #12
 8007a08:	2202      	movs	r2, #2
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f9d1 	bl	8008db4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a12:	e02e      	b.n	8007a72 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 f962 	bl	8008ce0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a20:	e027      	b.n	8007a72 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d107      	bne.n	8007a3c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a2c:	f107 030f 	add.w	r3, r7, #15
 8007a30:	2201      	movs	r2, #1
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f9bd 	bl	8008db4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a3a:	e01a      	b.n	8007a72 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 f94e 	bl	8008ce0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a44:	2302      	movs	r3, #2
 8007a46:	75fb      	strb	r3, [r7, #23]
          break;
 8007a48:	e013      	b.n	8007a72 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d00d      	beq.n	8007a70 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 f942 	bl	8008ce0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a60:	e006      	b.n	8007a70 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f93b 	bl	8008ce0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a6e:	e000      	b.n	8007a72 <USBD_CDC_Setup+0x12c>
          break;
 8007a70:	bf00      	nop
      }
      break;
 8007a72:	e006      	b.n	8007a82 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f932 	bl	8008ce0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a80:	bf00      	nop
  }

  return ret;
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a9e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007aa6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d03a      	beq.n	8007b28 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	331c      	adds	r3, #28
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d029      	beq.n	8007b1c <USBD_CDC_DataIn+0x90>
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	331c      	adds	r3, #28
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	78f9      	ldrb	r1, [r7, #3]
 8007adc:	68b8      	ldr	r0, [r7, #8]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4403      	add	r3, r0
 8007ae8:	3320      	adds	r3, #32
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	fbb2 f1f3 	udiv	r1, r2, r3
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d110      	bne.n	8007b1c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	331c      	adds	r3, #28
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b0e:	78f9      	ldrb	r1, [r7, #3]
 8007b10:	2300      	movs	r3, #0
 8007b12:	2200      	movs	r2, #0
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fdc7 	bl	80096a8 <USBD_LL_Transmit>
 8007b1a:	e003      	b.n	8007b24 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	e000      	b.n	8007b2a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b28:	2302      	movs	r3, #2
  }
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fdf2 	bl	8009734 <USBD_LL_GetRxDataSize>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00d      	beq.n	8007b7e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007b76:	4611      	mov	r1, r2
 8007b78:	4798      	blx	r3

    return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e000      	b.n	8007b80 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b7e:	2302      	movs	r3, #2
  }
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b96:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d014      	beq.n	8007bcc <USBD_CDC_EP0_RxReady+0x44>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007ba8:	2bff      	cmp	r3, #255	@ 0xff
 8007baa:	d00f      	beq.n	8007bcc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007bba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	@ 0xff
 8007bc8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2243      	movs	r2, #67	@ 0x43
 8007be4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007be6:	4b03      	ldr	r3, [pc, #12]	@ (8007bf4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000094 	.word	0x20000094

08007bf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2243      	movs	r2, #67	@ 0x43
 8007c04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c06:	4b03      	ldr	r3, [pc, #12]	@ (8007c14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20000050 	.word	0x20000050

08007c18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2243      	movs	r2, #67	@ 0x43
 8007c24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c26:	4b03      	ldr	r3, [pc, #12]	@ (8007c34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	200000d8 	.word	0x200000d8

08007c38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	220a      	movs	r2, #10
 8007c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c46:	4b03      	ldr	r3, [pc, #12]	@ (8007c54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	2000000c 	.word	0x2000000c

08007c58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c62:	2302      	movs	r3, #2
 8007c64:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c98:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr

08007cdc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01c      	beq.n	8007d30 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d115      	bne.n	8007d2c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2181      	movs	r1, #129	@ 0x81
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fcc0 	bl	80096a8 <USBD_LL_Transmit>

      return USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e002      	b.n	8007d32 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e000      	b.n	8007d32 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d30:	2302      	movs	r3, #2
  }
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d017      	beq.n	8007d84 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7c1b      	ldrb	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d66:	2101      	movs	r1, #1
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fcc0 	bl	80096ee <USBD_LL_PrepareReceive>
 8007d6e:	e007      	b.n	8007d80 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d76:	2340      	movs	r3, #64	@ 0x40
 8007d78:	2101      	movs	r1, #1
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 fcb7 	bl	80096ee <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007da2:	2302      	movs	r3, #2
 8007da4:	e01a      	b.n	8007ddc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	79fa      	ldrb	r2, [r7, #7]
 8007dd2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f001 fb25 	bl	8009424 <USBD_LL_Init>

  return USBD_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d006      	beq.n	8007e06 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
 8007e04:	e001      	b.n	8007e0a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007e06:	2302      	movs	r3, #2
 8007e08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr

08007e16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 fb5a 	bl	80094d8 <USBD_LL_Start>

  return USBD_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00c      	beq.n	8007e76 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	78fa      	ldrb	r2, [r7, #3]
 8007e66:	4611      	mov	r1, r2
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	78fa      	ldrb	r2, [r7, #3]
 8007e96:	4611      	mov	r1, r2
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 fed8 	bl	8008c6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ecc:	461a      	mov	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d016      	beq.n	8007f10 <USBD_LL_SetupStage+0x6a>
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d81c      	bhi.n	8007f20 <USBD_LL_SetupStage+0x7a>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <USBD_LL_SetupStage+0x4a>
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d008      	beq.n	8007f00 <USBD_LL_SetupStage+0x5a>
 8007eee:	e017      	b.n	8007f20 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f9cb 	bl	8008294 <USBD_StdDevReq>
      break;
 8007efe:	e01a      	b.n	8007f36 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa2d 	bl	8008368 <USBD_StdItfReq>
      break;
 8007f0e:	e012      	b.n	8007f36 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fa6d 	bl	80083f8 <USBD_StdEPReq>
      break;
 8007f1e:	e00a      	b.n	8007f36 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007f26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 fb32 	bl	8009598 <USBD_LL_StallEP>
      break;
 8007f34:	bf00      	nop
  }

  return USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d14b      	bne.n	8007fec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f5a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d134      	bne.n	8007fd0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d919      	bls.n	8007fa6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	1ad2      	subs	r2, r2, r3
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d203      	bcs.n	8007f94 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	e002      	b.n	8007f9a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 ff54 	bl	8008e4c <USBD_CtlContinueRx>
 8007fa4:	e038      	b.n	8008018 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d105      	bne.n	8007fc8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 ff51 	bl	8008e70 <USBD_CtlSendStatus>
 8007fce:	e023      	b.n	8008018 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007fd6:	2b05      	cmp	r3, #5
 8007fd8:	d11e      	bne.n	8008018 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f001 fad7 	bl	8009598 <USBD_LL_StallEP>
 8007fea:	e015      	b.n	8008018 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00d      	beq.n	8008014 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d108      	bne.n	8008014 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	7afa      	ldrb	r2, [r7, #11]
 800800c:	4611      	mov	r1, r2
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	4798      	blx	r3
 8008012:	e001      	b.n	8008018 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008014:	2302      	movs	r3, #2
 8008016:	e000      	b.n	800801a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	460b      	mov	r3, r1
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008030:	7afb      	ldrb	r3, [r7, #11]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d17f      	bne.n	8008136 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3314      	adds	r3, #20
 800803a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008042:	2b02      	cmp	r3, #2
 8008044:	d15c      	bne.n	8008100 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	429a      	cmp	r2, r3
 8008050:	d915      	bls.n	800807e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	b29b      	uxth	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 febe 	bl	8008dec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008070:	2300      	movs	r3, #0
 8008072:	2200      	movs	r2, #0
 8008074:	2100      	movs	r1, #0
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f001 fb39 	bl	80096ee <USBD_LL_PrepareReceive>
 800807c:	e04e      	b.n	800811c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	6912      	ldr	r2, [r2, #16]
 8008086:	fbb3 f1f2 	udiv	r1, r3, r2
 800808a:	fb01 f202 	mul.w	r2, r1, r2
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d11c      	bne.n	80080ce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800809c:	429a      	cmp	r2, r3
 800809e:	d316      	bcc.n	80080ce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d20f      	bcs.n	80080ce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080ae:	2200      	movs	r2, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 fe9a 	bl	8008dec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080c0:	2300      	movs	r3, #0
 80080c2:	2200      	movs	r2, #0
 80080c4:	2100      	movs	r1, #0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f001 fb11 	bl	80096ee <USBD_LL_PrepareReceive>
 80080cc:	e026      	b.n	800811c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d105      	bne.n	80080f0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80080f0:	2180      	movs	r1, #128	@ 0x80
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f001 fa50 	bl	8009598 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fecc 	bl	8008e96 <USBD_CtlReceiveStatus>
 80080fe:	e00d      	b.n	800811c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008106:	2b04      	cmp	r3, #4
 8008108:	d004      	beq.n	8008114 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008114:	2180      	movs	r1, #128	@ 0x80
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f001 fa3e 	bl	8009598 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008122:	2b01      	cmp	r3, #1
 8008124:	d11d      	bne.n	8008162 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f7ff fe81 	bl	8007e2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008134:	e015      	b.n	8008162 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00d      	beq.n	800815e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008148:	2b03      	cmp	r3, #3
 800814a:	d108      	bne.n	800815e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	7afa      	ldrb	r2, [r7, #11]
 8008156:	4611      	mov	r1, r2
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	4798      	blx	r3
 800815c:	e001      	b.n	8008162 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800815e:	2302      	movs	r3, #2
 8008160:	e000      	b.n	8008164 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008174:	2340      	movs	r3, #64	@ 0x40
 8008176:	2200      	movs	r2, #0
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 f9c7 	bl	800950e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2240      	movs	r2, #64	@ 0x40
 800818c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008190:	2340      	movs	r3, #64	@ 0x40
 8008192:	2200      	movs	r2, #0
 8008194:	2180      	movs	r1, #128	@ 0x80
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f9b9 	bl	800950e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2240      	movs	r2, #64	@ 0x40
 80081a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d009      	beq.n	80081e4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6852      	ldr	r2, [r2, #4]
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	4611      	mov	r1, r2
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
  }

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr

0800820c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2204      	movs	r2, #4
 8008224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr

08008234 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008242:	2b04      	cmp	r3, #4
 8008244:	d105      	bne.n	8008252 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800826c:	2b03      	cmp	r3, #3
 800826e:	d10b      	bne.n	8008288 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082aa:	2b40      	cmp	r3, #64	@ 0x40
 80082ac:	d005      	beq.n	80082ba <USBD_StdDevReq+0x26>
 80082ae:	2b40      	cmp	r3, #64	@ 0x40
 80082b0:	d84f      	bhi.n	8008352 <USBD_StdDevReq+0xbe>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <USBD_StdDevReq+0x36>
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d14b      	bne.n	8008352 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
      break;
 80082c8:	e048      	b.n	800835c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b09      	cmp	r3, #9
 80082d0:	d839      	bhi.n	8008346 <USBD_StdDevReq+0xb2>
 80082d2:	a201      	add	r2, pc, #4	@ (adr r2, 80082d8 <USBD_StdDevReq+0x44>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	08008329 	.word	0x08008329
 80082dc:	0800833d 	.word	0x0800833d
 80082e0:	08008347 	.word	0x08008347
 80082e4:	08008333 	.word	0x08008333
 80082e8:	08008347 	.word	0x08008347
 80082ec:	0800830b 	.word	0x0800830b
 80082f0:	08008301 	.word	0x08008301
 80082f4:	08008347 	.word	0x08008347
 80082f8:	0800831f 	.word	0x0800831f
 80082fc:	08008315 	.word	0x08008315
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f9dc 	bl	80086c0 <USBD_GetDescriptor>
          break;
 8008308:	e022      	b.n	8008350 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fb3f 	bl	8008990 <USBD_SetAddress>
          break;
 8008312:	e01d      	b.n	8008350 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb7e 	bl	8008a18 <USBD_SetConfig>
          break;
 800831c:	e018      	b.n	8008350 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fc07 	bl	8008b34 <USBD_GetConfig>
          break;
 8008326:	e013      	b.n	8008350 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc37 	bl	8008b9e <USBD_GetStatus>
          break;
 8008330:	e00e      	b.n	8008350 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fc65 	bl	8008c04 <USBD_SetFeature>
          break;
 800833a:	e009      	b.n	8008350 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fc74 	bl	8008c2c <USBD_ClrFeature>
          break;
 8008344:	e004      	b.n	8008350 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fcc9 	bl	8008ce0 <USBD_CtlError>
          break;
 800834e:	bf00      	nop
      }
      break;
 8008350:	e004      	b.n	800835c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fcc3 	bl	8008ce0 <USBD_CtlError>
      break;
 800835a:	bf00      	nop
  }

  return ret;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop

08008368 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800837e:	2b40      	cmp	r3, #64	@ 0x40
 8008380:	d005      	beq.n	800838e <USBD_StdItfReq+0x26>
 8008382:	2b40      	cmp	r3, #64	@ 0x40
 8008384:	d82e      	bhi.n	80083e4 <USBD_StdItfReq+0x7c>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <USBD_StdItfReq+0x26>
 800838a:	2b20      	cmp	r3, #32
 800838c:	d12a      	bne.n	80083e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008394:	3b01      	subs	r3, #1
 8008396:	2b02      	cmp	r3, #2
 8008398:	d81d      	bhi.n	80083d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	889b      	ldrh	r3, [r3, #4]
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d813      	bhi.n	80083cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	88db      	ldrh	r3, [r3, #6]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d110      	bne.n	80083e0 <USBD_StdItfReq+0x78>
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10d      	bne.n	80083e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fd53 	bl	8008e70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083ca:	e009      	b.n	80083e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fc86 	bl	8008ce0 <USBD_CtlError>
          break;
 80083d4:	e004      	b.n	80083e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc81 	bl	8008ce0 <USBD_CtlError>
          break;
 80083de:	e000      	b.n	80083e2 <USBD_StdItfReq+0x7a>
          break;
 80083e0:	bf00      	nop
      }
      break;
 80083e2:	e004      	b.n	80083ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fc7a 	bl	8008ce0 <USBD_CtlError>
      break;
 80083ec:	bf00      	nop
  }

  return USBD_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	889b      	ldrh	r3, [r3, #4]
 800840a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008414:	2b40      	cmp	r3, #64	@ 0x40
 8008416:	d007      	beq.n	8008428 <USBD_StdEPReq+0x30>
 8008418:	2b40      	cmp	r3, #64	@ 0x40
 800841a:	f200 8146 	bhi.w	80086aa <USBD_StdEPReq+0x2b2>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <USBD_StdEPReq+0x40>
 8008422:	2b20      	cmp	r3, #32
 8008424:	f040 8141 	bne.w	80086aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
      break;
 8008436:	e13d      	b.n	80086b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008440:	2b20      	cmp	r3, #32
 8008442:	d10a      	bne.n	800845a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	e12d      	b.n	80086b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d007      	beq.n	8008472 <USBD_StdEPReq+0x7a>
 8008462:	2b03      	cmp	r3, #3
 8008464:	f300 811b 	bgt.w	800869e <USBD_StdEPReq+0x2a6>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d072      	beq.n	8008552 <USBD_StdEPReq+0x15a>
 800846c:	2b01      	cmp	r3, #1
 800846e:	d03a      	beq.n	80084e6 <USBD_StdEPReq+0xee>
 8008470:	e115      	b.n	800869e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008478:	2b02      	cmp	r3, #2
 800847a:	d002      	beq.n	8008482 <USBD_StdEPReq+0x8a>
 800847c:	2b03      	cmp	r3, #3
 800847e:	d015      	beq.n	80084ac <USBD_StdEPReq+0xb4>
 8008480:	e02b      	b.n	80084da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <USBD_StdEPReq+0xaa>
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b80      	cmp	r3, #128	@ 0x80
 800848c:	d009      	beq.n	80084a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f880 	bl	8009598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008498:	2180      	movs	r1, #128	@ 0x80
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 f87c 	bl	8009598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084a0:	e020      	b.n	80084e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fc1b 	bl	8008ce0 <USBD_CtlError>
              break;
 80084aa:	e01b      	b.n	80084e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	885b      	ldrh	r3, [r3, #2]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10e      	bne.n	80084d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <USBD_StdEPReq+0xda>
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	2b80      	cmp	r3, #128	@ 0x80
 80084be:	d008      	beq.n	80084d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	88db      	ldrh	r3, [r3, #6]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d104      	bne.n	80084d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f863 	bl	8009598 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fccc 	bl	8008e70 <USBD_CtlSendStatus>

              break;
 80084d8:	e004      	b.n	80084e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fbff 	bl	8008ce0 <USBD_CtlError>
              break;
 80084e2:	bf00      	nop
          }
          break;
 80084e4:	e0e0      	b.n	80086a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d002      	beq.n	80084f6 <USBD_StdEPReq+0xfe>
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d015      	beq.n	8008520 <USBD_StdEPReq+0x128>
 80084f4:	e026      	b.n	8008544 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00c      	beq.n	8008516 <USBD_StdEPReq+0x11e>
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b80      	cmp	r3, #128	@ 0x80
 8008500:	d009      	beq.n	8008516 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f846 	bl	8009598 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800850c:	2180      	movs	r1, #128	@ 0x80
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 f842 	bl	8009598 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008514:	e01c      	b.n	8008550 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fbe1 	bl	8008ce0 <USBD_CtlError>
              break;
 800851e:	e017      	b.n	8008550 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	885b      	ldrh	r3, [r3, #2]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d112      	bne.n	800854e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008532:	7bbb      	ldrb	r3, [r7, #14]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 f84d 	bl	80095d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fc97 	bl	8008e70 <USBD_CtlSendStatus>
              }
              break;
 8008542:	e004      	b.n	800854e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fbca 	bl	8008ce0 <USBD_CtlError>
              break;
 800854c:	e000      	b.n	8008550 <USBD_StdEPReq+0x158>
              break;
 800854e:	bf00      	nop
          }
          break;
 8008550:	e0aa      	b.n	80086a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008558:	2b02      	cmp	r3, #2
 800855a:	d002      	beq.n	8008562 <USBD_StdEPReq+0x16a>
 800855c:	2b03      	cmp	r3, #3
 800855e:	d032      	beq.n	80085c6 <USBD_StdEPReq+0x1ce>
 8008560:	e097      	b.n	8008692 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <USBD_StdEPReq+0x180>
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b80      	cmp	r3, #128	@ 0x80
 800856c:	d004      	beq.n	8008578 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fbb5 	bl	8008ce0 <USBD_CtlError>
                break;
 8008576:	e091      	b.n	800869c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da0b      	bge.n	8008598 <USBD_StdEPReq+0x1a0>
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	3310      	adds	r3, #16
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	3304      	adds	r3, #4
 8008596:	e00b      	b.n	80085b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	3304      	adds	r3, #4
 80085b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2202      	movs	r2, #2
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fbf8 	bl	8008db4 <USBD_CtlSendData>
              break;
 80085c4:	e06a      	b.n	800869c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da11      	bge.n	80085f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	f003 020f 	and.w	r2, r3, #15
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	3318      	adds	r3, #24
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d117      	bne.n	8008618 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fb78 	bl	8008ce0 <USBD_CtlError>
                  break;
 80085f0:	e054      	b.n	800869c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	f003 020f 	and.w	r2, r3, #15
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb65 	bl	8008ce0 <USBD_CtlError>
                  break;
 8008616:	e041      	b.n	800869c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800861c:	2b00      	cmp	r3, #0
 800861e:	da0b      	bge.n	8008638 <USBD_StdEPReq+0x240>
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	3310      	adds	r3, #16
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	3304      	adds	r3, #4
 8008636:	e00b      	b.n	8008650 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	3304      	adds	r3, #4
 8008650:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008652:	7bbb      	ldrb	r3, [r7, #14]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <USBD_StdEPReq+0x266>
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b80      	cmp	r3, #128	@ 0x80
 800865c:	d103      	bne.n	8008666 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e00e      	b.n	8008684 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 ffd2 	bl	8009614 <USBD_LL_IsStallEP>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e002      	b.n	8008684 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2202      	movs	r2, #2
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb92 	bl	8008db4 <USBD_CtlSendData>
              break;
 8008690:	e004      	b.n	800869c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fb23 	bl	8008ce0 <USBD_CtlError>
              break;
 800869a:	bf00      	nop
          }
          break;
 800869c:	e004      	b.n	80086a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fb1d 	bl	8008ce0 <USBD_CtlError>
          break;
 80086a6:	bf00      	nop
      }
      break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fb17 	bl	8008ce0 <USBD_CtlError>
      break;
 80086b2:	bf00      	nop
  }

  return ret;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	0a1b      	lsrs	r3, r3, #8
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	2b06      	cmp	r3, #6
 80086e2:	f200 8128 	bhi.w	8008936 <USBD_GetDescriptor+0x276>
 80086e6:	a201      	add	r2, pc, #4	@ (adr r2, 80086ec <USBD_GetDescriptor+0x2c>)
 80086e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ec:	08008709 	.word	0x08008709
 80086f0:	08008721 	.word	0x08008721
 80086f4:	08008761 	.word	0x08008761
 80086f8:	08008937 	.word	0x08008937
 80086fc:	08008937 	.word	0x08008937
 8008700:	080088d7 	.word	0x080088d7
 8008704:	08008903 	.word	0x08008903
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	7c12      	ldrb	r2, [r2, #16]
 8008714:	f107 0108 	add.w	r1, r7, #8
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	60f8      	str	r0, [r7, #12]
      break;
 800871e:	e112      	b.n	8008946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	7c1b      	ldrb	r3, [r3, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10d      	bne.n	8008744 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800872e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008730:	f107 0208 	add.w	r2, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3301      	adds	r3, #1
 800873e:	2202      	movs	r2, #2
 8008740:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008742:	e100      	b.n	8008946 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800874a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874c:	f107 0208 	add.w	r2, r7, #8
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
 8008754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	2202      	movs	r2, #2
 800875c:	701a      	strb	r2, [r3, #0]
      break;
 800875e:	e0f2      	b.n	8008946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	885b      	ldrh	r3, [r3, #2]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b05      	cmp	r3, #5
 8008768:	f200 80ac 	bhi.w	80088c4 <USBD_GetDescriptor+0x204>
 800876c:	a201      	add	r2, pc, #4	@ (adr r2, 8008774 <USBD_GetDescriptor+0xb4>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	0800878d 	.word	0x0800878d
 8008778:	080087c1 	.word	0x080087c1
 800877c:	080087f5 	.word	0x080087f5
 8008780:	08008829 	.word	0x08008829
 8008784:	0800885d 	.word	0x0800885d
 8008788:	08008891 	.word	0x08008891
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	7c12      	ldrb	r2, [r2, #16]
 80087a4:	f107 0108 	add.w	r1, r7, #8
 80087a8:	4610      	mov	r0, r2
 80087aa:	4798      	blx	r3
 80087ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ae:	e091      	b.n	80088d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fa94 	bl	8008ce0 <USBD_CtlError>
            err++;
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	3301      	adds	r3, #1
 80087bc:	72fb      	strb	r3, [r7, #11]
          break;
 80087be:	e089      	b.n	80088d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00b      	beq.n	80087e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7c12      	ldrb	r2, [r2, #16]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087e2:	e077      	b.n	80088d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa7a 	bl	8008ce0 <USBD_CtlError>
            err++;
 80087ec:	7afb      	ldrb	r3, [r7, #11]
 80087ee:	3301      	adds	r3, #1
 80087f0:	72fb      	strb	r3, [r7, #11]
          break;
 80087f2:	e06f      	b.n	80088d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	7c12      	ldrb	r2, [r2, #16]
 800880c:	f107 0108 	add.w	r1, r7, #8
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008816:	e05d      	b.n	80088d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa60 	bl	8008ce0 <USBD_CtlError>
            err++;
 8008820:	7afb      	ldrb	r3, [r7, #11]
 8008822:	3301      	adds	r3, #1
 8008824:	72fb      	strb	r3, [r7, #11]
          break;
 8008826:	e055      	b.n	80088d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00b      	beq.n	800884c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7c12      	ldrb	r2, [r2, #16]
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800884a:	e043      	b.n	80088d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa46 	bl	8008ce0 <USBD_CtlError>
            err++;
 8008854:	7afb      	ldrb	r3, [r7, #11]
 8008856:	3301      	adds	r3, #1
 8008858:	72fb      	strb	r3, [r7, #11]
          break;
 800885a:	e03b      	b.n	80088d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00b      	beq.n	8008880 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7c12      	ldrb	r2, [r2, #16]
 8008874:	f107 0108 	add.w	r1, r7, #8
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
 800887c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800887e:	e029      	b.n	80088d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa2c 	bl	8008ce0 <USBD_CtlError>
            err++;
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	3301      	adds	r3, #1
 800888c:	72fb      	strb	r3, [r7, #11]
          break;
 800888e:	e021      	b.n	80088d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	7c12      	ldrb	r2, [r2, #16]
 80088a8:	f107 0108 	add.w	r1, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b2:	e00f      	b.n	80088d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fa12 	bl	8008ce0 <USBD_CtlError>
            err++;
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	3301      	adds	r3, #1
 80088c0:	72fb      	strb	r3, [r7, #11]
          break;
 80088c2:	e007      	b.n	80088d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa0a 	bl	8008ce0 <USBD_CtlError>
          err++;
 80088cc:	7afb      	ldrb	r3, [r7, #11]
 80088ce:	3301      	adds	r3, #1
 80088d0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80088d2:	e038      	b.n	8008946 <USBD_GetDescriptor+0x286>
 80088d4:	e037      	b.n	8008946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7c1b      	ldrb	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e6:	f107 0208 	add.w	r2, r7, #8
 80088ea:	4610      	mov	r0, r2
 80088ec:	4798      	blx	r3
 80088ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088f0:	e029      	b.n	8008946 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f9f3 	bl	8008ce0 <USBD_CtlError>
        err++;
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	3301      	adds	r3, #1
 80088fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008900:	e021      	b.n	8008946 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	7c1b      	ldrb	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10d      	bne.n	8008926 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008912:	f107 0208 	add.w	r2, r7, #8
 8008916:	4610      	mov	r0, r2
 8008918:	4798      	blx	r3
 800891a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	2207      	movs	r2, #7
 8008922:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008924:	e00f      	b.n	8008946 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9d9 	bl	8008ce0 <USBD_CtlError>
        err++;
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	3301      	adds	r3, #1
 8008932:	72fb      	strb	r3, [r7, #11]
      break;
 8008934:	e007      	b.n	8008946 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f9d1 	bl	8008ce0 <USBD_CtlError>
      err++;
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	3301      	adds	r3, #1
 8008942:	72fb      	strb	r3, [r7, #11]
      break;
 8008944:	bf00      	nop
  }

  if (err != 0U)
 8008946:	7afb      	ldrb	r3, [r7, #11]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d11c      	bne.n	8008986 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800894c:	893b      	ldrh	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d011      	beq.n	8008976 <USBD_GetDescriptor+0x2b6>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	88db      	ldrh	r3, [r3, #6]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88da      	ldrh	r2, [r3, #6]
 800895e:	893b      	ldrh	r3, [r7, #8]
 8008960:	4293      	cmp	r3, r2
 8008962:	bf28      	it	cs
 8008964:	4613      	movcs	r3, r2
 8008966:	b29b      	uxth	r3, r3
 8008968:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800896a:	893b      	ldrh	r3, [r7, #8]
 800896c:	461a      	mov	r2, r3
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fa1f 	bl	8008db4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	88db      	ldrh	r3, [r3, #6]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d104      	bne.n	8008988 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa76 	bl	8008e70 <USBD_CtlSendStatus>
 8008984:	e000      	b.n	8008988 <USBD_GetDescriptor+0x2c8>
    return;
 8008986:	bf00      	nop
    }
  }
}
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop

08008990 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	889b      	ldrh	r3, [r3, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d130      	bne.n	8008a04 <USBD_SetAddress+0x74>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	88db      	ldrh	r3, [r3, #6]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d12c      	bne.n	8008a04 <USBD_SetAddress+0x74>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80089b0:	d828      	bhi.n	8008a04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	885b      	ldrh	r3, [r3, #2]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d104      	bne.n	80089d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f988 	bl	8008ce0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d0:	e01d      	b.n	8008a0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7bfa      	ldrb	r2, [r7, #15]
 80089d6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fe43 	bl	800966a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fa43 	bl	8008e70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f8:	e009      	b.n	8008a0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a02:	e004      	b.n	8008a0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f96a 	bl	8008ce0 <USBD_CtlError>
  }
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	4b41      	ldr	r3, [pc, #260]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008a2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a2c:	4b40      	ldr	r3, [pc, #256]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d904      	bls.n	8008a3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f952 	bl	8008ce0 <USBD_CtlError>
 8008a3c:	e075      	b.n	8008b2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d002      	beq.n	8008a4e <USBD_SetConfig+0x36>
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d023      	beq.n	8008a94 <USBD_SetConfig+0x7c>
 8008a4c:	e062      	b.n	8008b14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a4e:	4b38      	ldr	r3, [pc, #224]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d01a      	beq.n	8008a8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008a56:	4b36      	ldr	r3, [pc, #216]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2203      	movs	r2, #3
 8008a64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a68:	4b31      	ldr	r3, [pc, #196]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff f9e7 	bl	8007e42 <USBD_SetClassConfig>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d104      	bne.n	8008a84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f92f 	bl	8008ce0 <USBD_CtlError>
            return;
 8008a82:	e052      	b.n	8008b2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9f3 	bl	8008e70 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a8a:	e04e      	b.n	8008b2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f9ef 	bl	8008e70 <USBD_CtlSendStatus>
        break;
 8008a92:	e04a      	b.n	8008b2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a94:	4b26      	ldr	r3, [pc, #152]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d112      	bne.n	8008ac2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008aa4:	4b22      	ldr	r3, [pc, #136]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008aae:	4b20      	ldr	r3, [pc, #128]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff f9e3 	bl	8007e80 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9d8 	bl	8008e70 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ac0:	e033      	b.n	8008b2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d01d      	beq.n	8008b0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff f9d1 	bl	8007e80 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008ade:	4b14      	ldr	r3, [pc, #80]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ae8:	4b11      	ldr	r3, [pc, #68]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff f9a7 	bl	8007e42 <USBD_SetClassConfig>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d104      	bne.n	8008b04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8ef 	bl	8008ce0 <USBD_CtlError>
            return;
 8008b02:	e012      	b.n	8008b2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f9b3 	bl	8008e70 <USBD_CtlSendStatus>
        break;
 8008b0a:	e00e      	b.n	8008b2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f9af 	bl	8008e70 <USBD_CtlSendStatus>
        break;
 8008b12:	e00a      	b.n	8008b2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f8e2 	bl	8008ce0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b1c:	4b04      	ldr	r3, [pc, #16]	@ (8008b30 <USBD_SetConfig+0x118>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff f9ac 	bl	8007e80 <USBD_ClrClassConfig>
        break;
 8008b28:	bf00      	nop
    }
  }
}
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	200003bc 	.word	0x200003bc

08008b34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d004      	beq.n	8008b50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f8c9 	bl	8008ce0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b4e:	e022      	b.n	8008b96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	dc02      	bgt.n	8008b60 <USBD_GetConfig+0x2c>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	dc03      	bgt.n	8008b66 <USBD_GetConfig+0x32>
 8008b5e:	e015      	b.n	8008b8c <USBD_GetConfig+0x58>
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetConfig+0x48>
 8008b64:	e012      	b.n	8008b8c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3308      	adds	r3, #8
 8008b70:	2201      	movs	r2, #1
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f91d 	bl	8008db4 <USBD_CtlSendData>
        break;
 8008b7a:	e00c      	b.n	8008b96 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	2201      	movs	r2, #1
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f915 	bl	8008db4 <USBD_CtlSendData>
        break;
 8008b8a:	e004      	b.n	8008b96 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f8a6 	bl	8008ce0 <USBD_CtlError>
        break;
 8008b94:	bf00      	nop
}
 8008b96:	bf00      	nop
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d81e      	bhi.n	8008bf2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	88db      	ldrh	r3, [r3, #6]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d004      	beq.n	8008bc6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f88e 	bl	8008ce0 <USBD_CtlError>
        break;
 8008bc4:	e01a      	b.n	8008bfc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f043 0202 	orr.w	r2, r3, #2
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	330c      	adds	r3, #12
 8008be6:	2202      	movs	r2, #2
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f8e2 	bl	8008db4 <USBD_CtlSendData>
      break;
 8008bf0:	e004      	b.n	8008bfc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f873 	bl	8008ce0 <USBD_CtlError>
      break;
 8008bfa:	bf00      	nop
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	885b      	ldrh	r3, [r3, #2]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d106      	bne.n	8008c24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f926 	bl	8008e70 <USBD_CtlSendStatus>
  }
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d80b      	bhi.n	8008c5a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d10c      	bne.n	8008c64 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f90c 	bl	8008e70 <USBD_CtlSendStatus>
      }
      break;
 8008c58:	e004      	b.n	8008c64 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f83f 	bl	8008ce0 <USBD_CtlError>
      break;
 8008c62:	e000      	b.n	8008c66 <USBD_ClrFeature+0x3a>
      break;
 8008c64:	bf00      	nop
  }
}
 8008c66:	bf00      	nop
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	785a      	ldrb	r2, [r3, #1]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	3303      	adds	r3, #3
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	021b      	lsls	r3, r3, #8
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	3305      	adds	r3, #5
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	3306      	adds	r3, #6
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	3307      	adds	r3, #7
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	80da      	strh	r2, [r3, #6]

}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr

08008ce0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008cea:	2180      	movs	r1, #128	@ 0x80
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc53 	bl	8009598 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fc4f 	bl	8009598 <USBD_LL_StallEP>
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d032      	beq.n	8008d7e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f834 	bl	8008d86 <USBD_GetLen>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	3301      	adds	r3, #1
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	75fa      	strb	r2, [r7, #23]
 8008d32:	461a      	mov	r2, r3
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4413      	add	r3, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	7812      	ldrb	r2, [r2, #0]
 8008d3c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	75fa      	strb	r2, [r7, #23]
 8008d44:	461a      	mov	r2, r3
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	4413      	add	r3, r2
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008d4e:	e012      	b.n	8008d76 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	60fa      	str	r2, [r7, #12]
 8008d56:	7dfa      	ldrb	r2, [r7, #23]
 8008d58:	1c51      	adds	r1, r2, #1
 8008d5a:	75f9      	strb	r1, [r7, #23]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	440a      	add	r2, r1
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	75fa      	strb	r2, [r7, #23]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	4413      	add	r3, r2
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e8      	bne.n	8008d50 <USBD_GetString+0x4e>
    }
  }
}
 8008d7e:	bf00      	nop
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008d92:	e005      	b.n	8008da0 <USBD_GetLen+0x1a>
  {
    len++;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	3301      	adds	r3, #1
 8008d98:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1f5      	bne.n	8008d94 <USBD_GetLen+0xe>
  }

  return len;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bc80      	pop	{r7}
 8008db2:	4770      	bx	lr

08008db4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008dca:	88fa      	ldrh	r2, [r7, #6]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008dd0:	88fa      	ldrh	r2, [r7, #6]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	2100      	movs	r1, #0
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fc63 	bl	80096a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	2100      	movs	r1, #0
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fc51 	bl	80096a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2203      	movs	r2, #3
 8008e22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008e26:	88fa      	ldrh	r2, [r7, #6]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008e2e:	88fa      	ldrh	r2, [r7, #6]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 fc56 	bl	80096ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e5a:	88fb      	ldrh	r3, [r7, #6]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 fc44 	bl	80096ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e80:	2300      	movs	r3, #0
 8008e82:	2200      	movs	r2, #0
 8008e84:	2100      	movs	r1, #0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fc0e 	bl	80096a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2205      	movs	r2, #5
 8008ea2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fc1e 	bl	80096ee <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4912      	ldr	r1, [pc, #72]	@ (8008f0c <MX_USB_DEVICE_Init+0x50>)
 8008ec4:	4812      	ldr	r0, [pc, #72]	@ (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ec6:	f7fe ff62 	bl	8007d8e <USBD_Init>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ed0:	f7f8 f9c8 	bl	8001264 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ed4:	490f      	ldr	r1, [pc, #60]	@ (8008f14 <MX_USB_DEVICE_Init+0x58>)
 8008ed6:	480e      	ldr	r0, [pc, #56]	@ (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ed8:	f7fe ff84 	bl	8007de4 <USBD_RegisterClass>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ee2:	f7f8 f9bf 	bl	8001264 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ee6:	490c      	ldr	r1, [pc, #48]	@ (8008f18 <MX_USB_DEVICE_Init+0x5c>)
 8008ee8:	4809      	ldr	r0, [pc, #36]	@ (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008eea:	f7fe feb5 	bl	8007c58 <USBD_CDC_RegisterInterface>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ef4:	f7f8 f9b6 	bl	8001264 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ef8:	4805      	ldr	r0, [pc, #20]	@ (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008efa:	f7fe ff8c 	bl	8007e16 <USBD_Start>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f04:	f7f8 f9ae 	bl	8001264 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f08:	bf00      	nop
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	2000012c 	.word	0x2000012c
 8008f10:	200003c0 	.word	0x200003c0
 8008f14:	20000018 	.word	0x20000018
 8008f18:	2000011c 	.word	0x2000011c

08008f1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f20:	2200      	movs	r2, #0
 8008f22:	4905      	ldr	r1, [pc, #20]	@ (8008f38 <CDC_Init_FS+0x1c>)
 8008f24:	4805      	ldr	r0, [pc, #20]	@ (8008f3c <CDC_Init_FS+0x20>)
 8008f26:	f7fe fead 	bl	8007c84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f2a:	4905      	ldr	r1, [pc, #20]	@ (8008f40 <CDC_Init_FS+0x24>)
 8008f2c:	4803      	ldr	r0, [pc, #12]	@ (8008f3c <CDC_Init_FS+0x20>)
 8008f2e:	f7fe fec2 	bl	8007cb6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20000a84 	.word	0x20000a84
 8008f3c:	200003c0 	.word	0x200003c0
 8008f40:	20000684 	.word	0x20000684

08008f44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr
	...

08008f54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	71fb      	strb	r3, [r7, #7]
 8008f60:	4613      	mov	r3, r2
 8008f62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b23      	cmp	r3, #35	@ 0x23
 8008f68:	d84a      	bhi.n	8009000 <CDC_Control_FS+0xac>
 8008f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f70 <CDC_Control_FS+0x1c>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08009001 	.word	0x08009001
 8008f74:	08009001 	.word	0x08009001
 8008f78:	08009001 	.word	0x08009001
 8008f7c:	08009001 	.word	0x08009001
 8008f80:	08009001 	.word	0x08009001
 8008f84:	08009001 	.word	0x08009001
 8008f88:	08009001 	.word	0x08009001
 8008f8c:	08009001 	.word	0x08009001
 8008f90:	08009001 	.word	0x08009001
 8008f94:	08009001 	.word	0x08009001
 8008f98:	08009001 	.word	0x08009001
 8008f9c:	08009001 	.word	0x08009001
 8008fa0:	08009001 	.word	0x08009001
 8008fa4:	08009001 	.word	0x08009001
 8008fa8:	08009001 	.word	0x08009001
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	08009001 	.word	0x08009001
 8008fb4:	08009001 	.word	0x08009001
 8008fb8:	08009001 	.word	0x08009001
 8008fbc:	08009001 	.word	0x08009001
 8008fc0:	08009001 	.word	0x08009001
 8008fc4:	08009001 	.word	0x08009001
 8008fc8:	08009001 	.word	0x08009001
 8008fcc:	08009001 	.word	0x08009001
 8008fd0:	08009001 	.word	0x08009001
 8008fd4:	08009001 	.word	0x08009001
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009001 	.word	0x08009001
 8008fe8:	08009001 	.word	0x08009001
 8008fec:	08009001 	.word	0x08009001
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009001 	.word	0x08009001
 8008ff8:	08009001 	.word	0x08009001
 8008ffc:	08009001 	.word	0x08009001
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009000:	bf00      	nop
  }

  return (USBD_OK);
 8009002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop

08009010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	4805      	ldr	r0, [pc, #20]	@ (8009034 <CDC_Receive_FS+0x24>)
 800901e:	f7fe fe4a 	bl	8007cb6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009022:	4804      	ldr	r0, [pc, #16]	@ (8009034 <CDC_Receive_FS+0x24>)
 8009024:	f7fe fe89 	bl	8007d3a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009028:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800902a:	4618      	mov	r0, r3
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	200003c0 	.word	0x200003c0

08009038 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009048:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <CDC_Transmit_FS+0x48>)
 800904a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800904e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800905a:	2301      	movs	r3, #1
 800905c:	e00b      	b.n	8009076 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800905e:	887b      	ldrh	r3, [r7, #2]
 8009060:	461a      	mov	r2, r3
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	4806      	ldr	r0, [pc, #24]	@ (8009080 <CDC_Transmit_FS+0x48>)
 8009066:	f7fe fe0d 	bl	8007c84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800906a:	4805      	ldr	r0, [pc, #20]	@ (8009080 <CDC_Transmit_FS+0x48>)
 800906c:	f7fe fe36 	bl	8007cdc <USBD_CDC_TransmitPacket>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	200003c0 	.word	0x200003c0

08009084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	6039      	str	r1, [r7, #0]
 800908e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2212      	movs	r2, #18
 8009094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009096:	4b03      	ldr	r3, [pc, #12]	@ (80090a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000148 	.word	0x20000148

080090a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	6039      	str	r1, [r7, #0]
 80090b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2204      	movs	r2, #4
 80090b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090ba:	4b03      	ldr	r3, [pc, #12]	@ (80090c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	2000015c 	.word	0x2000015c

080090cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4907      	ldr	r1, [pc, #28]	@ (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
 80090e2:	4808      	ldr	r0, [pc, #32]	@ (8009104 <USBD_FS_ProductStrDescriptor+0x38>)
 80090e4:	f7ff fe0d 	bl	8008d02 <USBD_GetString>
 80090e8:	e004      	b.n	80090f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	4904      	ldr	r1, [pc, #16]	@ (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
 80090ee:	4805      	ldr	r0, [pc, #20]	@ (8009104 <USBD_FS_ProductStrDescriptor+0x38>)
 80090f0:	f7ff fe07 	bl	8008d02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f4:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000e84 	.word	0x20000e84
 8009104:	0800c530 	.word	0x0800c530

08009108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	4904      	ldr	r1, [pc, #16]	@ (8009128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009118:	4804      	ldr	r0, [pc, #16]	@ (800912c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800911a:	f7ff fdf2 	bl	8008d02 <USBD_GetString>
  return USBD_StrDesc;
 800911e:	4b02      	ldr	r3, [pc, #8]	@ (8009128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20000e84 	.word	0x20000e84
 800912c:	0800c548 	.word	0x0800c548

08009130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	221a      	movs	r2, #26
 8009140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009142:	f000 f843 	bl	80091cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009146:	4b02      	ldr	r3, [pc, #8]	@ (8009150 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000160 	.word	0x20000160

08009154 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4907      	ldr	r1, [pc, #28]	@ (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
 800916a:	4808      	ldr	r0, [pc, #32]	@ (800918c <USBD_FS_ConfigStrDescriptor+0x38>)
 800916c:	f7ff fdc9 	bl	8008d02 <USBD_GetString>
 8009170:	e004      	b.n	800917c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4904      	ldr	r1, [pc, #16]	@ (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009176:	4805      	ldr	r0, [pc, #20]	@ (800918c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009178:	f7ff fdc3 	bl	8008d02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000e84 	.word	0x20000e84
 800918c:	0800c55c 	.word	0x0800c55c

08009190 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d105      	bne.n	80091ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4907      	ldr	r1, [pc, #28]	@ (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091a6:	4808      	ldr	r0, [pc, #32]	@ (80091c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091a8:	f7ff fdab 	bl	8008d02 <USBD_GetString>
 80091ac:	e004      	b.n	80091b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4904      	ldr	r1, [pc, #16]	@ (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091b2:	4805      	ldr	r0, [pc, #20]	@ (80091c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091b4:	f7ff fda5 	bl	8008d02 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091b8:	4b02      	ldr	r3, [pc, #8]	@ (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000e84 	.word	0x20000e84
 80091c8:	0800c568 	.word	0x0800c568

080091cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009210 <Get_SerialNum+0x44>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009214 <Get_SerialNum+0x48>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091de:	4b0e      	ldr	r3, [pc, #56]	@ (8009218 <Get_SerialNum+0x4c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4413      	add	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091f2:	2208      	movs	r2, #8
 80091f4:	4909      	ldr	r1, [pc, #36]	@ (800921c <Get_SerialNum+0x50>)
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f814 	bl	8009224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091fc:	2204      	movs	r2, #4
 80091fe:	4908      	ldr	r1, [pc, #32]	@ (8009220 <Get_SerialNum+0x54>)
 8009200:	68b8      	ldr	r0, [r7, #8]
 8009202:	f000 f80f 	bl	8009224 <IntToUnicode>
  }
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	1ffff7e8 	.word	0x1ffff7e8
 8009214:	1ffff7ec 	.word	0x1ffff7ec
 8009218:	1ffff7f0 	.word	0x1ffff7f0
 800921c:	20000162 	.word	0x20000162
 8009220:	20000172 	.word	0x20000172

08009224 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009236:	2300      	movs	r3, #0
 8009238:	75fb      	strb	r3, [r7, #23]
 800923a:	e027      	b.n	800928c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	0f1b      	lsrs	r3, r3, #28
 8009240:	2b09      	cmp	r3, #9
 8009242:	d80b      	bhi.n	800925c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0f1b      	lsrs	r3, r3, #28
 8009248:	b2da      	uxtb	r2, r3
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4619      	mov	r1, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	440b      	add	r3, r1
 8009254:	3230      	adds	r2, #48	@ 0x30
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	e00a      	b.n	8009272 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	0f1b      	lsrs	r3, r3, #28
 8009260:	b2da      	uxtb	r2, r3
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	4619      	mov	r1, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	440b      	add	r3, r1
 800926c:	3237      	adds	r2, #55	@ 0x37
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	3301      	adds	r3, #1
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	3301      	adds	r3, #1
 800928a:	75fb      	strb	r3, [r7, #23]
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	429a      	cmp	r2, r3
 8009292:	d3d3      	bcc.n	800923c <IntToUnicode+0x18>
  }
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr

080092a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a0d      	ldr	r2, [pc, #52]	@ (80092e4 <HAL_PCD_MspInit+0x44>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d113      	bne.n	80092da <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80092b2:	4b0d      	ldr	r3, [pc, #52]	@ (80092e8 <HAL_PCD_MspInit+0x48>)
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	4a0c      	ldr	r2, [pc, #48]	@ (80092e8 <HAL_PCD_MspInit+0x48>)
 80092b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80092bc:	61d3      	str	r3, [r2, #28]
 80092be:	4b0a      	ldr	r3, [pc, #40]	@ (80092e8 <HAL_PCD_MspInit+0x48>)
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80092ca:	2200      	movs	r2, #0
 80092cc:	2100      	movs	r1, #0
 80092ce:	2014      	movs	r0, #20
 80092d0:	f7f8 fabf 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80092d4:	2014      	movs	r0, #20
 80092d6:	f7f8 fad8 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40005c00 	.word	0x40005c00
 80092e8:	40021000 	.word	0x40021000

080092ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f7fe fdcf 	bl	8007ea6 <USBD_LL_SetupStage>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009322:	78fa      	ldrb	r2, [r7, #3]
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	4613      	mov	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	440b      	add	r3, r1
 8009330:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	4619      	mov	r1, r3
 800933a:	f7fe fe01 	bl	8007f40 <USBD_LL_DataOutStage>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b082      	sub	sp, #8
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	440b      	add	r3, r1
 8009366:	3324      	adds	r3, #36	@ 0x24
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	4619      	mov	r1, r3
 800936e:	f7fe fe58 	bl	8008022 <USBD_LL_DataInStage>
}
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe ff68 	bl	800825e <USBD_LL_SOF>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800939e:	2301      	movs	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	799b      	ldrb	r3, [r3, #6]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d001      	beq.n	80093ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093aa:	f7f7 ff5b 	bl	8001264 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093b4:	7bfa      	ldrb	r2, [r7, #15]
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe ff18 	bl	80081ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fed1 	bl	800816c <USBD_LL_Reset>
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe ff12 	bl	800820c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7a9b      	ldrb	r3, [r3, #10]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093f0:	4b04      	ldr	r3, [pc, #16]	@ (8009404 <HAL_PCD_SuspendCallback+0x30>)
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	4a03      	ldr	r2, [pc, #12]	@ (8009404 <HAL_PCD_SuspendCallback+0x30>)
 80093f6:	f043 0306 	orr.w	r3, r3, #6
 80093fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed00 	.word	0xe000ed00

08009408 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe ff0c 	bl	8008234 <USBD_LL_Resume>
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800942c:	4a28      	ldr	r2, [pc, #160]	@ (80094d0 <USBD_LL_Init+0xac>)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a26      	ldr	r2, [pc, #152]	@ (80094d0 <USBD_LL_Init+0xac>)
 8009438:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800943c:	4b24      	ldr	r3, [pc, #144]	@ (80094d0 <USBD_LL_Init+0xac>)
 800943e:	4a25      	ldr	r2, [pc, #148]	@ (80094d4 <USBD_LL_Init+0xb0>)
 8009440:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009442:	4b23      	ldr	r3, [pc, #140]	@ (80094d0 <USBD_LL_Init+0xac>)
 8009444:	2208      	movs	r2, #8
 8009446:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009448:	4b21      	ldr	r3, [pc, #132]	@ (80094d0 <USBD_LL_Init+0xac>)
 800944a:	2202      	movs	r2, #2
 800944c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800944e:	4b20      	ldr	r3, [pc, #128]	@ (80094d0 <USBD_LL_Init+0xac>)
 8009450:	2200      	movs	r2, #0
 8009452:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009454:	4b1e      	ldr	r3, [pc, #120]	@ (80094d0 <USBD_LL_Init+0xac>)
 8009456:	2200      	movs	r2, #0
 8009458:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800945a:	4b1d      	ldr	r3, [pc, #116]	@ (80094d0 <USBD_LL_Init+0xac>)
 800945c:	2200      	movs	r2, #0
 800945e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009460:	481b      	ldr	r0, [pc, #108]	@ (80094d0 <USBD_LL_Init+0xac>)
 8009462:	f7f9 fc16 	bl	8002c92 <HAL_PCD_Init>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800946c:	f7f7 fefa 	bl	8001264 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009476:	2318      	movs	r3, #24
 8009478:	2200      	movs	r2, #0
 800947a:	2100      	movs	r1, #0
 800947c:	f7fb f927 	bl	80046ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009486:	2358      	movs	r3, #88	@ 0x58
 8009488:	2200      	movs	r2, #0
 800948a:	2180      	movs	r1, #128	@ 0x80
 800948c:	f7fb f91f 	bl	80046ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009496:	23c0      	movs	r3, #192	@ 0xc0
 8009498:	2200      	movs	r2, #0
 800949a:	2181      	movs	r1, #129	@ 0x81
 800949c:	f7fb f917 	bl	80046ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80094a6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80094aa:	2200      	movs	r2, #0
 80094ac:	2101      	movs	r1, #1
 80094ae:	f7fb f90e 	bl	80046ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80094b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094bc:	2200      	movs	r2, #0
 80094be:	2182      	movs	r1, #130	@ 0x82
 80094c0:	f7fb f905 	bl	80046ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20001084 	.word	0x20001084
 80094d4:	40005c00 	.word	0x40005c00

080094d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f9 fcc5 	bl	8002e7e <HAL_PCD_Start>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f94e 	bl	800979c <USBD_Get_USB_Status>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009504:	7bbb      	ldrb	r3, [r7, #14]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	461a      	mov	r2, r3
 800951c:	4603      	mov	r3, r0
 800951e:	70fb      	strb	r3, [r7, #3]
 8009520:	460b      	mov	r3, r1
 8009522:	70bb      	strb	r3, [r7, #2]
 8009524:	4613      	mov	r3, r2
 8009526:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009536:	78bb      	ldrb	r3, [r7, #2]
 8009538:	883a      	ldrh	r2, [r7, #0]
 800953a:	78f9      	ldrb	r1, [r7, #3]
 800953c:	f7f9 fe19 	bl	8003172 <HAL_PCD_EP_Open>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f928 	bl	800979c <USBD_Get_USB_Status>
 800954c:	4603      	mov	r3, r0
 800954e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009550:	7bbb      	ldrb	r3, [r7, #14]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7f9 fe57 	bl	800322c <HAL_PCD_EP_Close>
 800957e:	4603      	mov	r3, r0
 8009580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f909 	bl	800979c <USBD_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	4611      	mov	r1, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f9 feff 	bl	80033ba <HAL_PCD_EP_SetStall>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f8ea 	bl	800979c <USBD_Get_USB_Status>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80095f0:	78fa      	ldrb	r2, [r7, #3]
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7f9 ff40 	bl	800347a <HAL_PCD_EP_ClrStall>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f8cb 	bl	800979c <USBD_Get_USB_Status>
 8009606:	4603      	mov	r3, r0
 8009608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960a:	7bbb      	ldrb	r3, [r7, #14]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009626:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800962c:	2b00      	cmp	r3, #0
 800962e:	da0b      	bge.n	8009648 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009630:	78fb      	ldrb	r3, [r7, #3]
 8009632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	440b      	add	r3, r1
 8009642:	3312      	adds	r3, #18
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	e00b      	b.n	8009660 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	440b      	add	r3, r1
 800965a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800965e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	bc80      	pop	{r7}
 8009668:	4770      	bx	lr

0800966a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009684:	78fa      	ldrb	r2, [r7, #3]
 8009686:	4611      	mov	r1, r2
 8009688:	4618      	mov	r0, r3
 800968a:	f7f9 fd4e 	bl	800312a <HAL_PCD_SetAddress>
 800968e:	4603      	mov	r3, r0
 8009690:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	4618      	mov	r0, r3
 8009696:	f000 f881 	bl	800979c <USBD_Get_USB_Status>
 800969a:	4603      	mov	r3, r0
 800969c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969e:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	461a      	mov	r2, r3
 80096b4:	460b      	mov	r3, r1
 80096b6:	72fb      	strb	r3, [r7, #11]
 80096b8:	4613      	mov	r3, r2
 80096ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096ca:	893b      	ldrh	r3, [r7, #8]
 80096cc:	7af9      	ldrb	r1, [r7, #11]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	f7f9 fe3c 	bl	800334c <HAL_PCD_EP_Transmit>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 f85e 	bl	800979c <USBD_Get_USB_Status>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b086      	sub	sp, #24
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	461a      	mov	r2, r3
 80096fa:	460b      	mov	r3, r1
 80096fc:	72fb      	strb	r3, [r7, #11]
 80096fe:	4613      	mov	r3, r2
 8009700:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009710:	893b      	ldrh	r3, [r7, #8]
 8009712:	7af9      	ldrb	r1, [r7, #11]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	f7f9 fdd1 	bl	80032bc <HAL_PCD_EP_Receive>
 800971a:	4603      	mov	r3, r0
 800971c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800971e:	7dfb      	ldrb	r3, [r7, #23]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f83b 	bl	800979c <USBD_Get_USB_Status>
 8009726:	4603      	mov	r3, r0
 8009728:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800972a:	7dbb      	ldrb	r3, [r7, #22]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7f9 fde7 	bl	800331e <HAL_PCD_EP_GetRxCount>
 8009750:	4603      	mov	r3, r0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009764:	4b02      	ldr	r3, [pc, #8]	@ (8009770 <USBD_static_malloc+0x14>)
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr
 8009770:	2000135c 	.word	0x2000135c

08009774 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	bc80      	pop	{r7}
 8009784:	4770      	bx	lr

08009786 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009792:	bf00      	nop
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	bc80      	pop	{r7}
 800979a:	4770      	bx	lr

0800979c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d817      	bhi.n	80097e0 <USBD_Get_USB_Status+0x44>
 80097b0:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <USBD_Get_USB_Status+0x1c>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097c9 	.word	0x080097c9
 80097bc:	080097cf 	.word	0x080097cf
 80097c0:	080097d5 	.word	0x080097d5
 80097c4:	080097db 	.word	0x080097db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e00b      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ce:	2302      	movs	r3, #2
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e008      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	e005      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097da:	2302      	movs	r3, #2
 80097dc:	73fb      	strb	r3, [r7, #15]
    break;
 80097de:	e002      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097e0:	2302      	movs	r3, #2
 80097e2:	73fb      	strb	r3, [r7, #15]
    break;
 80097e4:	bf00      	nop
  }
  return usb_status;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bc80      	pop	{r7}
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop

080097f4 <__cvt>:
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097fa:	461d      	mov	r5, r3
 80097fc:	bfbb      	ittet	lt
 80097fe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009802:	461d      	movlt	r5, r3
 8009804:	2300      	movge	r3, #0
 8009806:	232d      	movlt	r3, #45	@ 0x2d
 8009808:	b088      	sub	sp, #32
 800980a:	4614      	mov	r4, r2
 800980c:	bfb8      	it	lt
 800980e:	4614      	movlt	r4, r2
 8009810:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009812:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009814:	7013      	strb	r3, [r2, #0]
 8009816:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009818:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800981c:	f023 0820 	bic.w	r8, r3, #32
 8009820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009824:	d005      	beq.n	8009832 <__cvt+0x3e>
 8009826:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800982a:	d100      	bne.n	800982e <__cvt+0x3a>
 800982c:	3601      	adds	r6, #1
 800982e:	2302      	movs	r3, #2
 8009830:	e000      	b.n	8009834 <__cvt+0x40>
 8009832:	2303      	movs	r3, #3
 8009834:	aa07      	add	r2, sp, #28
 8009836:	9204      	str	r2, [sp, #16]
 8009838:	aa06      	add	r2, sp, #24
 800983a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800983e:	e9cd 3600 	strd	r3, r6, [sp]
 8009842:	4622      	mov	r2, r4
 8009844:	462b      	mov	r3, r5
 8009846:	f000 fe83 	bl	800a550 <_dtoa_r>
 800984a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800984e:	4607      	mov	r7, r0
 8009850:	d119      	bne.n	8009886 <__cvt+0x92>
 8009852:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009854:	07db      	lsls	r3, r3, #31
 8009856:	d50e      	bpl.n	8009876 <__cvt+0x82>
 8009858:	eb00 0906 	add.w	r9, r0, r6
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	4620      	mov	r0, r4
 8009862:	4629      	mov	r1, r5
 8009864:	f7f7 f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8009868:	b108      	cbz	r0, 800986e <__cvt+0x7a>
 800986a:	f8cd 901c 	str.w	r9, [sp, #28]
 800986e:	2230      	movs	r2, #48	@ 0x30
 8009870:	9b07      	ldr	r3, [sp, #28]
 8009872:	454b      	cmp	r3, r9
 8009874:	d31e      	bcc.n	80098b4 <__cvt+0xc0>
 8009876:	4638      	mov	r0, r7
 8009878:	9b07      	ldr	r3, [sp, #28]
 800987a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800987c:	1bdb      	subs	r3, r3, r7
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	b008      	add	sp, #32
 8009882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009886:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800988a:	eb00 0906 	add.w	r9, r0, r6
 800988e:	d1e5      	bne.n	800985c <__cvt+0x68>
 8009890:	7803      	ldrb	r3, [r0, #0]
 8009892:	2b30      	cmp	r3, #48	@ 0x30
 8009894:	d10a      	bne.n	80098ac <__cvt+0xb8>
 8009896:	2200      	movs	r2, #0
 8009898:	2300      	movs	r3, #0
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f7 f883 	bl	80009a8 <__aeabi_dcmpeq>
 80098a2:	b918      	cbnz	r0, 80098ac <__cvt+0xb8>
 80098a4:	f1c6 0601 	rsb	r6, r6, #1
 80098a8:	f8ca 6000 	str.w	r6, [sl]
 80098ac:	f8da 3000 	ldr.w	r3, [sl]
 80098b0:	4499      	add	r9, r3
 80098b2:	e7d3      	b.n	800985c <__cvt+0x68>
 80098b4:	1c59      	adds	r1, r3, #1
 80098b6:	9107      	str	r1, [sp, #28]
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	e7d9      	b.n	8009870 <__cvt+0x7c>

080098bc <__exponent>:
 80098bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098be:	2900      	cmp	r1, #0
 80098c0:	bfb6      	itet	lt
 80098c2:	232d      	movlt	r3, #45	@ 0x2d
 80098c4:	232b      	movge	r3, #43	@ 0x2b
 80098c6:	4249      	neglt	r1, r1
 80098c8:	2909      	cmp	r1, #9
 80098ca:	7002      	strb	r2, [r0, #0]
 80098cc:	7043      	strb	r3, [r0, #1]
 80098ce:	dd29      	ble.n	8009924 <__exponent+0x68>
 80098d0:	f10d 0307 	add.w	r3, sp, #7
 80098d4:	461d      	mov	r5, r3
 80098d6:	270a      	movs	r7, #10
 80098d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80098dc:	461a      	mov	r2, r3
 80098de:	fb07 1416 	mls	r4, r7, r6, r1
 80098e2:	3430      	adds	r4, #48	@ 0x30
 80098e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098e8:	460c      	mov	r4, r1
 80098ea:	2c63      	cmp	r4, #99	@ 0x63
 80098ec:	4631      	mov	r1, r6
 80098ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80098f2:	dcf1      	bgt.n	80098d8 <__exponent+0x1c>
 80098f4:	3130      	adds	r1, #48	@ 0x30
 80098f6:	1e94      	subs	r4, r2, #2
 80098f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098fc:	4623      	mov	r3, r4
 80098fe:	1c41      	adds	r1, r0, #1
 8009900:	42ab      	cmp	r3, r5
 8009902:	d30a      	bcc.n	800991a <__exponent+0x5e>
 8009904:	f10d 0309 	add.w	r3, sp, #9
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	42ac      	cmp	r4, r5
 800990c:	bf88      	it	hi
 800990e:	2300      	movhi	r3, #0
 8009910:	3302      	adds	r3, #2
 8009912:	4403      	add	r3, r0
 8009914:	1a18      	subs	r0, r3, r0
 8009916:	b003      	add	sp, #12
 8009918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800991a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800991e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009922:	e7ed      	b.n	8009900 <__exponent+0x44>
 8009924:	2330      	movs	r3, #48	@ 0x30
 8009926:	3130      	adds	r1, #48	@ 0x30
 8009928:	7083      	strb	r3, [r0, #2]
 800992a:	70c1      	strb	r1, [r0, #3]
 800992c:	1d03      	adds	r3, r0, #4
 800992e:	e7f1      	b.n	8009914 <__exponent+0x58>

08009930 <_printf_float>:
 8009930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	b091      	sub	sp, #68	@ 0x44
 8009936:	460c      	mov	r4, r1
 8009938:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800993c:	4616      	mov	r6, r2
 800993e:	461f      	mov	r7, r3
 8009940:	4605      	mov	r5, r0
 8009942:	f000 fcf5 	bl	800a330 <_localeconv_r>
 8009946:	6803      	ldr	r3, [r0, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	9308      	str	r3, [sp, #32]
 800994c:	f7f6 fc00 	bl	8000150 <strlen>
 8009950:	2300      	movs	r3, #0
 8009952:	930e      	str	r3, [sp, #56]	@ 0x38
 8009954:	f8d8 3000 	ldr.w	r3, [r8]
 8009958:	9009      	str	r0, [sp, #36]	@ 0x24
 800995a:	3307      	adds	r3, #7
 800995c:	f023 0307 	bic.w	r3, r3, #7
 8009960:	f103 0208 	add.w	r2, r3, #8
 8009964:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009968:	f8d4 b000 	ldr.w	fp, [r4]
 800996c:	f8c8 2000 	str.w	r2, [r8]
 8009970:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009974:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800997a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800997e:	f04f 32ff 	mov.w	r2, #4294967295
 8009982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009986:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800998a:	4b9c      	ldr	r3, [pc, #624]	@ (8009bfc <_printf_float+0x2cc>)
 800998c:	f7f7 f83e 	bl	8000a0c <__aeabi_dcmpun>
 8009990:	bb70      	cbnz	r0, 80099f0 <_printf_float+0xc0>
 8009992:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009996:	f04f 32ff 	mov.w	r2, #4294967295
 800999a:	4b98      	ldr	r3, [pc, #608]	@ (8009bfc <_printf_float+0x2cc>)
 800999c:	f7f7 f818 	bl	80009d0 <__aeabi_dcmple>
 80099a0:	bb30      	cbnz	r0, 80099f0 <_printf_float+0xc0>
 80099a2:	2200      	movs	r2, #0
 80099a4:	2300      	movs	r3, #0
 80099a6:	4640      	mov	r0, r8
 80099a8:	4649      	mov	r1, r9
 80099aa:	f7f7 f807 	bl	80009bc <__aeabi_dcmplt>
 80099ae:	b110      	cbz	r0, 80099b6 <_printf_float+0x86>
 80099b0:	232d      	movs	r3, #45	@ 0x2d
 80099b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099b6:	4a92      	ldr	r2, [pc, #584]	@ (8009c00 <_printf_float+0x2d0>)
 80099b8:	4b92      	ldr	r3, [pc, #584]	@ (8009c04 <_printf_float+0x2d4>)
 80099ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099be:	bf8c      	ite	hi
 80099c0:	4690      	movhi	r8, r2
 80099c2:	4698      	movls	r8, r3
 80099c4:	2303      	movs	r3, #3
 80099c6:	f04f 0900 	mov.w	r9, #0
 80099ca:	6123      	str	r3, [r4, #16]
 80099cc:	f02b 0304 	bic.w	r3, fp, #4
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	4633      	mov	r3, r6
 80099d4:	4621      	mov	r1, r4
 80099d6:	4628      	mov	r0, r5
 80099d8:	9700      	str	r7, [sp, #0]
 80099da:	aa0f      	add	r2, sp, #60	@ 0x3c
 80099dc:	f000 f9d4 	bl	8009d88 <_printf_common>
 80099e0:	3001      	adds	r0, #1
 80099e2:	f040 8090 	bne.w	8009b06 <_printf_float+0x1d6>
 80099e6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ea:	b011      	add	sp, #68	@ 0x44
 80099ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	4642      	mov	r2, r8
 80099f2:	464b      	mov	r3, r9
 80099f4:	4640      	mov	r0, r8
 80099f6:	4649      	mov	r1, r9
 80099f8:	f7f7 f808 	bl	8000a0c <__aeabi_dcmpun>
 80099fc:	b148      	cbz	r0, 8009a12 <_printf_float+0xe2>
 80099fe:	464b      	mov	r3, r9
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfb8      	it	lt
 8009a04:	232d      	movlt	r3, #45	@ 0x2d
 8009a06:	4a80      	ldr	r2, [pc, #512]	@ (8009c08 <_printf_float+0x2d8>)
 8009a08:	bfb8      	it	lt
 8009a0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8009c0c <_printf_float+0x2dc>)
 8009a10:	e7d3      	b.n	80099ba <_printf_float+0x8a>
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	d13f      	bne.n	8009a9c <_printf_float+0x16c>
 8009a1c:	2306      	movs	r3, #6
 8009a1e:	6063      	str	r3, [r4, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	9206      	str	r2, [sp, #24]
 8009a2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8009a2c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009a30:	aa0d      	add	r2, sp, #52	@ 0x34
 8009a32:	9203      	str	r2, [sp, #12]
 8009a34:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009a38:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009a3c:	6863      	ldr	r3, [r4, #4]
 8009a3e:	4642      	mov	r2, r8
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4628      	mov	r0, r5
 8009a44:	464b      	mov	r3, r9
 8009a46:	910a      	str	r1, [sp, #40]	@ 0x28
 8009a48:	f7ff fed4 	bl	80097f4 <__cvt>
 8009a4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a4e:	4680      	mov	r8, r0
 8009a50:	2947      	cmp	r1, #71	@ 0x47
 8009a52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009a54:	d128      	bne.n	8009aa8 <_printf_float+0x178>
 8009a56:	1cc8      	adds	r0, r1, #3
 8009a58:	db02      	blt.n	8009a60 <_printf_float+0x130>
 8009a5a:	6863      	ldr	r3, [r4, #4]
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	dd40      	ble.n	8009ae2 <_printf_float+0x1b2>
 8009a60:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a64:	fa5f fa8a 	uxtb.w	sl, sl
 8009a68:	4652      	mov	r2, sl
 8009a6a:	3901      	subs	r1, #1
 8009a6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a70:	910d      	str	r1, [sp, #52]	@ 0x34
 8009a72:	f7ff ff23 	bl	80098bc <__exponent>
 8009a76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a78:	4681      	mov	r9, r0
 8009a7a:	1813      	adds	r3, r2, r0
 8009a7c:	2a01      	cmp	r2, #1
 8009a7e:	6123      	str	r3, [r4, #16]
 8009a80:	dc02      	bgt.n	8009a88 <_printf_float+0x158>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	07d2      	lsls	r2, r2, #31
 8009a86:	d501      	bpl.n	8009a8c <_printf_float+0x15c>
 8009a88:	3301      	adds	r3, #1
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d09e      	beq.n	80099d2 <_printf_float+0xa2>
 8009a94:	232d      	movs	r3, #45	@ 0x2d
 8009a96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a9a:	e79a      	b.n	80099d2 <_printf_float+0xa2>
 8009a9c:	2947      	cmp	r1, #71	@ 0x47
 8009a9e:	d1bf      	bne.n	8009a20 <_printf_float+0xf0>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1bd      	bne.n	8009a20 <_printf_float+0xf0>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e7ba      	b.n	8009a1e <_printf_float+0xee>
 8009aa8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009aac:	d9dc      	bls.n	8009a68 <_printf_float+0x138>
 8009aae:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ab2:	d118      	bne.n	8009ae6 <_printf_float+0x1b6>
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	6863      	ldr	r3, [r4, #4]
 8009ab8:	dd0b      	ble.n	8009ad2 <_printf_float+0x1a2>
 8009aba:	6121      	str	r1, [r4, #16]
 8009abc:	b913      	cbnz	r3, 8009ac4 <_printf_float+0x194>
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	07d0      	lsls	r0, r2, #31
 8009ac2:	d502      	bpl.n	8009aca <_printf_float+0x19a>
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	440b      	add	r3, r1
 8009ac8:	6123      	str	r3, [r4, #16]
 8009aca:	f04f 0900 	mov.w	r9, #0
 8009ace:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ad0:	e7dc      	b.n	8009a8c <_printf_float+0x15c>
 8009ad2:	b913      	cbnz	r3, 8009ada <_printf_float+0x1aa>
 8009ad4:	6822      	ldr	r2, [r4, #0]
 8009ad6:	07d2      	lsls	r2, r2, #31
 8009ad8:	d501      	bpl.n	8009ade <_printf_float+0x1ae>
 8009ada:	3302      	adds	r3, #2
 8009adc:	e7f4      	b.n	8009ac8 <_printf_float+0x198>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e7f2      	b.n	8009ac8 <_printf_float+0x198>
 8009ae2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae8:	4299      	cmp	r1, r3
 8009aea:	db05      	blt.n	8009af8 <_printf_float+0x1c8>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	6121      	str	r1, [r4, #16]
 8009af0:	07d8      	lsls	r0, r3, #31
 8009af2:	d5ea      	bpl.n	8009aca <_printf_float+0x19a>
 8009af4:	1c4b      	adds	r3, r1, #1
 8009af6:	e7e7      	b.n	8009ac8 <_printf_float+0x198>
 8009af8:	2900      	cmp	r1, #0
 8009afa:	bfcc      	ite	gt
 8009afc:	2201      	movgt	r2, #1
 8009afe:	f1c1 0202 	rsble	r2, r1, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	e7e0      	b.n	8009ac8 <_printf_float+0x198>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	055a      	lsls	r2, r3, #21
 8009b0a:	d407      	bmi.n	8009b1c <_printf_float+0x1ec>
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	4642      	mov	r2, r8
 8009b10:	4631      	mov	r1, r6
 8009b12:	4628      	mov	r0, r5
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	d12b      	bne.n	8009b72 <_printf_float+0x242>
 8009b1a:	e764      	b.n	80099e6 <_printf_float+0xb6>
 8009b1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b20:	f240 80dc 	bls.w	8009cdc <_printf_float+0x3ac>
 8009b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f7f6 ff3c 	bl	80009a8 <__aeabi_dcmpeq>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d033      	beq.n	8009b9c <_printf_float+0x26c>
 8009b34:	2301      	movs	r3, #1
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	4a35      	ldr	r2, [pc, #212]	@ (8009c10 <_printf_float+0x2e0>)
 8009b3c:	47b8      	blx	r7
 8009b3e:	3001      	adds	r0, #1
 8009b40:	f43f af51 	beq.w	80099e6 <_printf_float+0xb6>
 8009b44:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009b48:	4543      	cmp	r3, r8
 8009b4a:	db02      	blt.n	8009b52 <_printf_float+0x222>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	07d8      	lsls	r0, r3, #31
 8009b50:	d50f      	bpl.n	8009b72 <_printf_float+0x242>
 8009b52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	47b8      	blx	r7
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	f43f af42 	beq.w	80099e6 <_printf_float+0xb6>
 8009b62:	f04f 0900 	mov.w	r9, #0
 8009b66:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b6a:	f104 0a1a 	add.w	sl, r4, #26
 8009b6e:	45c8      	cmp	r8, r9
 8009b70:	dc09      	bgt.n	8009b86 <_printf_float+0x256>
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	079b      	lsls	r3, r3, #30
 8009b76:	f100 8102 	bmi.w	8009d7e <_printf_float+0x44e>
 8009b7a:	68e0      	ldr	r0, [r4, #12]
 8009b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7e:	4298      	cmp	r0, r3
 8009b80:	bfb8      	it	lt
 8009b82:	4618      	movlt	r0, r3
 8009b84:	e731      	b.n	80099ea <_printf_float+0xba>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4652      	mov	r2, sl
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f af28 	beq.w	80099e6 <_printf_float+0xb6>
 8009b96:	f109 0901 	add.w	r9, r9, #1
 8009b9a:	e7e8      	b.n	8009b6e <_printf_float+0x23e>
 8009b9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	dc38      	bgt.n	8009c14 <_printf_float+0x2e4>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	4a19      	ldr	r2, [pc, #100]	@ (8009c10 <_printf_float+0x2e0>)
 8009baa:	47b8      	blx	r7
 8009bac:	3001      	adds	r0, #1
 8009bae:	f43f af1a 	beq.w	80099e6 <_printf_float+0xb6>
 8009bb2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009bb6:	ea59 0303 	orrs.w	r3, r9, r3
 8009bba:	d102      	bne.n	8009bc2 <_printf_float+0x292>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	07d9      	lsls	r1, r3, #31
 8009bc0:	d5d7      	bpl.n	8009b72 <_printf_float+0x242>
 8009bc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b8      	blx	r7
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f43f af0a 	beq.w	80099e6 <_printf_float+0xb6>
 8009bd2:	f04f 0a00 	mov.w	sl, #0
 8009bd6:	f104 0b1a 	add.w	fp, r4, #26
 8009bda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bdc:	425b      	negs	r3, r3
 8009bde:	4553      	cmp	r3, sl
 8009be0:	dc01      	bgt.n	8009be6 <_printf_float+0x2b6>
 8009be2:	464b      	mov	r3, r9
 8009be4:	e793      	b.n	8009b0e <_printf_float+0x1de>
 8009be6:	2301      	movs	r3, #1
 8009be8:	465a      	mov	r2, fp
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f aef8 	beq.w	80099e6 <_printf_float+0xb6>
 8009bf6:	f10a 0a01 	add.w	sl, sl, #1
 8009bfa:	e7ee      	b.n	8009bda <_printf_float+0x2aa>
 8009bfc:	7fefffff 	.word	0x7fefffff
 8009c00:	0800c5a6 	.word	0x0800c5a6
 8009c04:	0800c5a2 	.word	0x0800c5a2
 8009c08:	0800c5ae 	.word	0x0800c5ae
 8009c0c:	0800c5aa 	.word	0x0800c5aa
 8009c10:	0800c5b2 	.word	0x0800c5b2
 8009c14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c16:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009c1a:	4553      	cmp	r3, sl
 8009c1c:	bfa8      	it	ge
 8009c1e:	4653      	movge	r3, sl
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	4699      	mov	r9, r3
 8009c24:	dc36      	bgt.n	8009c94 <_printf_float+0x364>
 8009c26:	f04f 0b00 	mov.w	fp, #0
 8009c2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c2e:	f104 021a 	add.w	r2, r4, #26
 8009c32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c34:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c36:	eba3 0309 	sub.w	r3, r3, r9
 8009c3a:	455b      	cmp	r3, fp
 8009c3c:	dc31      	bgt.n	8009ca2 <_printf_float+0x372>
 8009c3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c40:	459a      	cmp	sl, r3
 8009c42:	dc3a      	bgt.n	8009cba <_printf_float+0x38a>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07da      	lsls	r2, r3, #31
 8009c48:	d437      	bmi.n	8009cba <_printf_float+0x38a>
 8009c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c4c:	ebaa 0903 	sub.w	r9, sl, r3
 8009c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c52:	ebaa 0303 	sub.w	r3, sl, r3
 8009c56:	4599      	cmp	r9, r3
 8009c58:	bfa8      	it	ge
 8009c5a:	4699      	movge	r9, r3
 8009c5c:	f1b9 0f00 	cmp.w	r9, #0
 8009c60:	dc33      	bgt.n	8009cca <_printf_float+0x39a>
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c6a:	f104 0b1a 	add.w	fp, r4, #26
 8009c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c70:	ebaa 0303 	sub.w	r3, sl, r3
 8009c74:	eba3 0309 	sub.w	r3, r3, r9
 8009c78:	4543      	cmp	r3, r8
 8009c7a:	f77f af7a 	ble.w	8009b72 <_printf_float+0x242>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	465a      	mov	r2, fp
 8009c82:	4631      	mov	r1, r6
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b8      	blx	r7
 8009c88:	3001      	adds	r0, #1
 8009c8a:	f43f aeac 	beq.w	80099e6 <_printf_float+0xb6>
 8009c8e:	f108 0801 	add.w	r8, r8, #1
 8009c92:	e7ec      	b.n	8009c6e <_printf_float+0x33e>
 8009c94:	4642      	mov	r2, r8
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d1c2      	bne.n	8009c26 <_printf_float+0x2f6>
 8009ca0:	e6a1      	b.n	80099e6 <_printf_float+0xb6>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	920a      	str	r2, [sp, #40]	@ 0x28
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f ae9a 	beq.w	80099e6 <_printf_float+0xb6>
 8009cb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cb4:	f10b 0b01 	add.w	fp, fp, #1
 8009cb8:	e7bb      	b.n	8009c32 <_printf_float+0x302>
 8009cba:	4631      	mov	r1, r6
 8009cbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d1c0      	bne.n	8009c4a <_printf_float+0x31a>
 8009cc8:	e68d      	b.n	80099e6 <_printf_float+0xb6>
 8009cca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ccc:	464b      	mov	r3, r9
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	4442      	add	r2, r8
 8009cd4:	47b8      	blx	r7
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d1c3      	bne.n	8009c62 <_printf_float+0x332>
 8009cda:	e684      	b.n	80099e6 <_printf_float+0xb6>
 8009cdc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009ce0:	f1ba 0f01 	cmp.w	sl, #1
 8009ce4:	dc01      	bgt.n	8009cea <_printf_float+0x3ba>
 8009ce6:	07db      	lsls	r3, r3, #31
 8009ce8:	d536      	bpl.n	8009d58 <_printf_float+0x428>
 8009cea:	2301      	movs	r3, #1
 8009cec:	4642      	mov	r2, r8
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f ae76 	beq.w	80099e6 <_printf_float+0xb6>
 8009cfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	f43f ae6e 	beq.w	80099e6 <_printf_float+0xb6>
 8009d0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2300      	movs	r3, #0
 8009d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d16:	f7f6 fe47 	bl	80009a8 <__aeabi_dcmpeq>
 8009d1a:	b9c0      	cbnz	r0, 8009d4e <_printf_float+0x41e>
 8009d1c:	4653      	mov	r3, sl
 8009d1e:	f108 0201 	add.w	r2, r8, #1
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d10c      	bne.n	8009d46 <_printf_float+0x416>
 8009d2c:	e65b      	b.n	80099e6 <_printf_float+0xb6>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	465a      	mov	r2, fp
 8009d32:	4631      	mov	r1, r6
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b8      	blx	r7
 8009d38:	3001      	adds	r0, #1
 8009d3a:	f43f ae54 	beq.w	80099e6 <_printf_float+0xb6>
 8009d3e:	f108 0801 	add.w	r8, r8, #1
 8009d42:	45d0      	cmp	r8, sl
 8009d44:	dbf3      	blt.n	8009d2e <_printf_float+0x3fe>
 8009d46:	464b      	mov	r3, r9
 8009d48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d4c:	e6e0      	b.n	8009b10 <_printf_float+0x1e0>
 8009d4e:	f04f 0800 	mov.w	r8, #0
 8009d52:	f104 0b1a 	add.w	fp, r4, #26
 8009d56:	e7f4      	b.n	8009d42 <_printf_float+0x412>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	4642      	mov	r2, r8
 8009d5c:	e7e1      	b.n	8009d22 <_printf_float+0x3f2>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	464a      	mov	r2, r9
 8009d62:	4631      	mov	r1, r6
 8009d64:	4628      	mov	r0, r5
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f43f ae3c 	beq.w	80099e6 <_printf_float+0xb6>
 8009d6e:	f108 0801 	add.w	r8, r8, #1
 8009d72:	68e3      	ldr	r3, [r4, #12]
 8009d74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d76:	1a5b      	subs	r3, r3, r1
 8009d78:	4543      	cmp	r3, r8
 8009d7a:	dcf0      	bgt.n	8009d5e <_printf_float+0x42e>
 8009d7c:	e6fd      	b.n	8009b7a <_printf_float+0x24a>
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	f104 0919 	add.w	r9, r4, #25
 8009d86:	e7f4      	b.n	8009d72 <_printf_float+0x442>

08009d88 <_printf_common>:
 8009d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8c:	4616      	mov	r6, r2
 8009d8e:	4698      	mov	r8, r3
 8009d90:	688a      	ldr	r2, [r1, #8]
 8009d92:	690b      	ldr	r3, [r1, #16]
 8009d94:	4607      	mov	r7, r0
 8009d96:	4293      	cmp	r3, r2
 8009d98:	bfb8      	it	lt
 8009d9a:	4613      	movlt	r3, r2
 8009d9c:	6033      	str	r3, [r6, #0]
 8009d9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009da2:	460c      	mov	r4, r1
 8009da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009da8:	b10a      	cbz	r2, 8009dae <_printf_common+0x26>
 8009daa:	3301      	adds	r3, #1
 8009dac:	6033      	str	r3, [r6, #0]
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	0699      	lsls	r1, r3, #26
 8009db2:	bf42      	ittt	mi
 8009db4:	6833      	ldrmi	r3, [r6, #0]
 8009db6:	3302      	addmi	r3, #2
 8009db8:	6033      	strmi	r3, [r6, #0]
 8009dba:	6825      	ldr	r5, [r4, #0]
 8009dbc:	f015 0506 	ands.w	r5, r5, #6
 8009dc0:	d106      	bne.n	8009dd0 <_printf_common+0x48>
 8009dc2:	f104 0a19 	add.w	sl, r4, #25
 8009dc6:	68e3      	ldr	r3, [r4, #12]
 8009dc8:	6832      	ldr	r2, [r6, #0]
 8009dca:	1a9b      	subs	r3, r3, r2
 8009dcc:	42ab      	cmp	r3, r5
 8009dce:	dc2b      	bgt.n	8009e28 <_printf_common+0xa0>
 8009dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dd4:	6822      	ldr	r2, [r4, #0]
 8009dd6:	3b00      	subs	r3, #0
 8009dd8:	bf18      	it	ne
 8009dda:	2301      	movne	r3, #1
 8009ddc:	0692      	lsls	r2, r2, #26
 8009dde:	d430      	bmi.n	8009e42 <_printf_common+0xba>
 8009de0:	4641      	mov	r1, r8
 8009de2:	4638      	mov	r0, r7
 8009de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009de8:	47c8      	blx	r9
 8009dea:	3001      	adds	r0, #1
 8009dec:	d023      	beq.n	8009e36 <_printf_common+0xae>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	6922      	ldr	r2, [r4, #16]
 8009df2:	f003 0306 	and.w	r3, r3, #6
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	bf14      	ite	ne
 8009dfa:	2500      	movne	r5, #0
 8009dfc:	6833      	ldreq	r3, [r6, #0]
 8009dfe:	f04f 0600 	mov.w	r6, #0
 8009e02:	bf08      	it	eq
 8009e04:	68e5      	ldreq	r5, [r4, #12]
 8009e06:	f104 041a 	add.w	r4, r4, #26
 8009e0a:	bf08      	it	eq
 8009e0c:	1aed      	subeq	r5, r5, r3
 8009e0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e12:	bf08      	it	eq
 8009e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	bfc4      	itt	gt
 8009e1c:	1a9b      	subgt	r3, r3, r2
 8009e1e:	18ed      	addgt	r5, r5, r3
 8009e20:	42b5      	cmp	r5, r6
 8009e22:	d11a      	bne.n	8009e5a <_printf_common+0xd2>
 8009e24:	2000      	movs	r0, #0
 8009e26:	e008      	b.n	8009e3a <_printf_common+0xb2>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4652      	mov	r2, sl
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	4638      	mov	r0, r7
 8009e30:	47c8      	blx	r9
 8009e32:	3001      	adds	r0, #1
 8009e34:	d103      	bne.n	8009e3e <_printf_common+0xb6>
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3e:	3501      	adds	r5, #1
 8009e40:	e7c1      	b.n	8009dc6 <_printf_common+0x3e>
 8009e42:	2030      	movs	r0, #48	@ 0x30
 8009e44:	18e1      	adds	r1, r4, r3
 8009e46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e50:	4422      	add	r2, r4
 8009e52:	3302      	adds	r3, #2
 8009e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e58:	e7c2      	b.n	8009de0 <_printf_common+0x58>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4641      	mov	r1, r8
 8009e60:	4638      	mov	r0, r7
 8009e62:	47c8      	blx	r9
 8009e64:	3001      	adds	r0, #1
 8009e66:	d0e6      	beq.n	8009e36 <_printf_common+0xae>
 8009e68:	3601      	adds	r6, #1
 8009e6a:	e7d9      	b.n	8009e20 <_printf_common+0x98>

08009e6c <_printf_i>:
 8009e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e70:	7e0f      	ldrb	r7, [r1, #24]
 8009e72:	4691      	mov	r9, r2
 8009e74:	2f78      	cmp	r7, #120	@ 0x78
 8009e76:	4680      	mov	r8, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	469a      	mov	sl, r3
 8009e7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e82:	d807      	bhi.n	8009e94 <_printf_i+0x28>
 8009e84:	2f62      	cmp	r7, #98	@ 0x62
 8009e86:	d80a      	bhi.n	8009e9e <_printf_i+0x32>
 8009e88:	2f00      	cmp	r7, #0
 8009e8a:	f000 80d1 	beq.w	800a030 <_printf_i+0x1c4>
 8009e8e:	2f58      	cmp	r7, #88	@ 0x58
 8009e90:	f000 80b8 	beq.w	800a004 <_printf_i+0x198>
 8009e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e9c:	e03a      	b.n	8009f14 <_printf_i+0xa8>
 8009e9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ea2:	2b15      	cmp	r3, #21
 8009ea4:	d8f6      	bhi.n	8009e94 <_printf_i+0x28>
 8009ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8009eac <_printf_i+0x40>)
 8009ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eac:	08009f05 	.word	0x08009f05
 8009eb0:	08009f19 	.word	0x08009f19
 8009eb4:	08009e95 	.word	0x08009e95
 8009eb8:	08009e95 	.word	0x08009e95
 8009ebc:	08009e95 	.word	0x08009e95
 8009ec0:	08009e95 	.word	0x08009e95
 8009ec4:	08009f19 	.word	0x08009f19
 8009ec8:	08009e95 	.word	0x08009e95
 8009ecc:	08009e95 	.word	0x08009e95
 8009ed0:	08009e95 	.word	0x08009e95
 8009ed4:	08009e95 	.word	0x08009e95
 8009ed8:	0800a017 	.word	0x0800a017
 8009edc:	08009f43 	.word	0x08009f43
 8009ee0:	08009fd1 	.word	0x08009fd1
 8009ee4:	08009e95 	.word	0x08009e95
 8009ee8:	08009e95 	.word	0x08009e95
 8009eec:	0800a039 	.word	0x0800a039
 8009ef0:	08009e95 	.word	0x08009e95
 8009ef4:	08009f43 	.word	0x08009f43
 8009ef8:	08009e95 	.word	0x08009e95
 8009efc:	08009e95 	.word	0x08009e95
 8009f00:	08009fd9 	.word	0x08009fd9
 8009f04:	6833      	ldr	r3, [r6, #0]
 8009f06:	1d1a      	adds	r2, r3, #4
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6032      	str	r2, [r6, #0]
 8009f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f14:	2301      	movs	r3, #1
 8009f16:	e09c      	b.n	800a052 <_printf_i+0x1e6>
 8009f18:	6833      	ldr	r3, [r6, #0]
 8009f1a:	6820      	ldr	r0, [r4, #0]
 8009f1c:	1d19      	adds	r1, r3, #4
 8009f1e:	6031      	str	r1, [r6, #0]
 8009f20:	0606      	lsls	r6, r0, #24
 8009f22:	d501      	bpl.n	8009f28 <_printf_i+0xbc>
 8009f24:	681d      	ldr	r5, [r3, #0]
 8009f26:	e003      	b.n	8009f30 <_printf_i+0xc4>
 8009f28:	0645      	lsls	r5, r0, #25
 8009f2a:	d5fb      	bpl.n	8009f24 <_printf_i+0xb8>
 8009f2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	da03      	bge.n	8009f3c <_printf_i+0xd0>
 8009f34:	232d      	movs	r3, #45	@ 0x2d
 8009f36:	426d      	negs	r5, r5
 8009f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f3c:	230a      	movs	r3, #10
 8009f3e:	4858      	ldr	r0, [pc, #352]	@ (800a0a0 <_printf_i+0x234>)
 8009f40:	e011      	b.n	8009f66 <_printf_i+0xfa>
 8009f42:	6821      	ldr	r1, [r4, #0]
 8009f44:	6833      	ldr	r3, [r6, #0]
 8009f46:	0608      	lsls	r0, r1, #24
 8009f48:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f4c:	d402      	bmi.n	8009f54 <_printf_i+0xe8>
 8009f4e:	0649      	lsls	r1, r1, #25
 8009f50:	bf48      	it	mi
 8009f52:	b2ad      	uxthmi	r5, r5
 8009f54:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f56:	6033      	str	r3, [r6, #0]
 8009f58:	bf14      	ite	ne
 8009f5a:	230a      	movne	r3, #10
 8009f5c:	2308      	moveq	r3, #8
 8009f5e:	4850      	ldr	r0, [pc, #320]	@ (800a0a0 <_printf_i+0x234>)
 8009f60:	2100      	movs	r1, #0
 8009f62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f66:	6866      	ldr	r6, [r4, #4]
 8009f68:	2e00      	cmp	r6, #0
 8009f6a:	60a6      	str	r6, [r4, #8]
 8009f6c:	db05      	blt.n	8009f7a <_printf_i+0x10e>
 8009f6e:	6821      	ldr	r1, [r4, #0]
 8009f70:	432e      	orrs	r6, r5
 8009f72:	f021 0104 	bic.w	r1, r1, #4
 8009f76:	6021      	str	r1, [r4, #0]
 8009f78:	d04b      	beq.n	800a012 <_printf_i+0x1a6>
 8009f7a:	4616      	mov	r6, r2
 8009f7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f80:	fb03 5711 	mls	r7, r3, r1, r5
 8009f84:	5dc7      	ldrb	r7, [r0, r7]
 8009f86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f8a:	462f      	mov	r7, r5
 8009f8c:	42bb      	cmp	r3, r7
 8009f8e:	460d      	mov	r5, r1
 8009f90:	d9f4      	bls.n	8009f7c <_printf_i+0x110>
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d10b      	bne.n	8009fae <_printf_i+0x142>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	07df      	lsls	r7, r3, #31
 8009f9a:	d508      	bpl.n	8009fae <_printf_i+0x142>
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	6861      	ldr	r1, [r4, #4]
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	bfde      	ittt	le
 8009fa4:	2330      	movle	r3, #48	@ 0x30
 8009fa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009faa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fae:	1b92      	subs	r2, r2, r6
 8009fb0:	6122      	str	r2, [r4, #16]
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	f8cd a000 	str.w	sl, [sp]
 8009fbc:	aa03      	add	r2, sp, #12
 8009fbe:	f7ff fee3 	bl	8009d88 <_printf_common>
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d14a      	bne.n	800a05c <_printf_i+0x1f0>
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fca:	b004      	add	sp, #16
 8009fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	f043 0320 	orr.w	r3, r3, #32
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	2778      	movs	r7, #120	@ 0x78
 8009fda:	4832      	ldr	r0, [pc, #200]	@ (800a0a4 <_printf_i+0x238>)
 8009fdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	6831      	ldr	r1, [r6, #0]
 8009fe4:	061f      	lsls	r7, r3, #24
 8009fe6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fea:	d402      	bmi.n	8009ff2 <_printf_i+0x186>
 8009fec:	065f      	lsls	r7, r3, #25
 8009fee:	bf48      	it	mi
 8009ff0:	b2ad      	uxthmi	r5, r5
 8009ff2:	6031      	str	r1, [r6, #0]
 8009ff4:	07d9      	lsls	r1, r3, #31
 8009ff6:	bf44      	itt	mi
 8009ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8009ffc:	6023      	strmi	r3, [r4, #0]
 8009ffe:	b11d      	cbz	r5, 800a008 <_printf_i+0x19c>
 800a000:	2310      	movs	r3, #16
 800a002:	e7ad      	b.n	8009f60 <_printf_i+0xf4>
 800a004:	4826      	ldr	r0, [pc, #152]	@ (800a0a0 <_printf_i+0x234>)
 800a006:	e7e9      	b.n	8009fdc <_printf_i+0x170>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	f023 0320 	bic.w	r3, r3, #32
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	e7f6      	b.n	800a000 <_printf_i+0x194>
 800a012:	4616      	mov	r6, r2
 800a014:	e7bd      	b.n	8009f92 <_printf_i+0x126>
 800a016:	6833      	ldr	r3, [r6, #0]
 800a018:	6825      	ldr	r5, [r4, #0]
 800a01a:	1d18      	adds	r0, r3, #4
 800a01c:	6961      	ldr	r1, [r4, #20]
 800a01e:	6030      	str	r0, [r6, #0]
 800a020:	062e      	lsls	r6, r5, #24
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	d501      	bpl.n	800a02a <_printf_i+0x1be>
 800a026:	6019      	str	r1, [r3, #0]
 800a028:	e002      	b.n	800a030 <_printf_i+0x1c4>
 800a02a:	0668      	lsls	r0, r5, #25
 800a02c:	d5fb      	bpl.n	800a026 <_printf_i+0x1ba>
 800a02e:	8019      	strh	r1, [r3, #0]
 800a030:	2300      	movs	r3, #0
 800a032:	4616      	mov	r6, r2
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	e7bc      	b.n	8009fb2 <_printf_i+0x146>
 800a038:	6833      	ldr	r3, [r6, #0]
 800a03a:	2100      	movs	r1, #0
 800a03c:	1d1a      	adds	r2, r3, #4
 800a03e:	6032      	str	r2, [r6, #0]
 800a040:	681e      	ldr	r6, [r3, #0]
 800a042:	6862      	ldr	r2, [r4, #4]
 800a044:	4630      	mov	r0, r6
 800a046:	f000 f9ea 	bl	800a41e <memchr>
 800a04a:	b108      	cbz	r0, 800a050 <_printf_i+0x1e4>
 800a04c:	1b80      	subs	r0, r0, r6
 800a04e:	6060      	str	r0, [r4, #4]
 800a050:	6863      	ldr	r3, [r4, #4]
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2300      	movs	r3, #0
 800a056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a05a:	e7aa      	b.n	8009fb2 <_printf_i+0x146>
 800a05c:	4632      	mov	r2, r6
 800a05e:	4649      	mov	r1, r9
 800a060:	4640      	mov	r0, r8
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	47d0      	blx	sl
 800a066:	3001      	adds	r0, #1
 800a068:	d0ad      	beq.n	8009fc6 <_printf_i+0x15a>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	079b      	lsls	r3, r3, #30
 800a06e:	d413      	bmi.n	800a098 <_printf_i+0x22c>
 800a070:	68e0      	ldr	r0, [r4, #12]
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	4298      	cmp	r0, r3
 800a076:	bfb8      	it	lt
 800a078:	4618      	movlt	r0, r3
 800a07a:	e7a6      	b.n	8009fca <_printf_i+0x15e>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4632      	mov	r2, r6
 800a080:	4649      	mov	r1, r9
 800a082:	4640      	mov	r0, r8
 800a084:	47d0      	blx	sl
 800a086:	3001      	adds	r0, #1
 800a088:	d09d      	beq.n	8009fc6 <_printf_i+0x15a>
 800a08a:	3501      	adds	r5, #1
 800a08c:	68e3      	ldr	r3, [r4, #12]
 800a08e:	9903      	ldr	r1, [sp, #12]
 800a090:	1a5b      	subs	r3, r3, r1
 800a092:	42ab      	cmp	r3, r5
 800a094:	dcf2      	bgt.n	800a07c <_printf_i+0x210>
 800a096:	e7eb      	b.n	800a070 <_printf_i+0x204>
 800a098:	2500      	movs	r5, #0
 800a09a:	f104 0619 	add.w	r6, r4, #25
 800a09e:	e7f5      	b.n	800a08c <_printf_i+0x220>
 800a0a0:	0800c5b4 	.word	0x0800c5b4
 800a0a4:	0800c5c5 	.word	0x0800c5c5

0800a0a8 <std>:
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	b510      	push	{r4, lr}
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0b6:	6083      	str	r3, [r0, #8]
 800a0b8:	8181      	strh	r1, [r0, #12]
 800a0ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800a0bc:	81c2      	strh	r2, [r0, #14]
 800a0be:	6183      	str	r3, [r0, #24]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	2208      	movs	r2, #8
 800a0c4:	305c      	adds	r0, #92	@ 0x5c
 800a0c6:	f000 f92a 	bl	800a31e <memset>
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a100 <std+0x58>)
 800a0cc:	6224      	str	r4, [r4, #32]
 800a0ce:	6263      	str	r3, [r4, #36]	@ 0x24
 800a0d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a104 <std+0x5c>)
 800a0d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <std+0x60>)
 800a0d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <std+0x64>)
 800a0da:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a110 <std+0x68>)
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	d006      	beq.n	800a0f0 <std+0x48>
 800a0e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0e6:	4294      	cmp	r4, r2
 800a0e8:	d002      	beq.n	800a0f0 <std+0x48>
 800a0ea:	33d0      	adds	r3, #208	@ 0xd0
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	d105      	bne.n	800a0fc <std+0x54>
 800a0f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f8:	f000 b98e 	b.w	800a418 <__retarget_lock_init_recursive>
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	bf00      	nop
 800a100:	0800a299 	.word	0x0800a299
 800a104:	0800a2bb 	.word	0x0800a2bb
 800a108:	0800a2f3 	.word	0x0800a2f3
 800a10c:	0800a317 	.word	0x0800a317
 800a110:	2000157c 	.word	0x2000157c

0800a114 <stdio_exit_handler>:
 800a114:	4a02      	ldr	r2, [pc, #8]	@ (800a120 <stdio_exit_handler+0xc>)
 800a116:	4903      	ldr	r1, [pc, #12]	@ (800a124 <stdio_exit_handler+0x10>)
 800a118:	4803      	ldr	r0, [pc, #12]	@ (800a128 <stdio_exit_handler+0x14>)
 800a11a:	f000 b869 	b.w	800a1f0 <_fwalk_sglue>
 800a11e:	bf00      	nop
 800a120:	2000017c 	.word	0x2000017c
 800a124:	0800bd99 	.word	0x0800bd99
 800a128:	2000018c 	.word	0x2000018c

0800a12c <cleanup_stdio>:
 800a12c:	6841      	ldr	r1, [r0, #4]
 800a12e:	4b0c      	ldr	r3, [pc, #48]	@ (800a160 <cleanup_stdio+0x34>)
 800a130:	b510      	push	{r4, lr}
 800a132:	4299      	cmp	r1, r3
 800a134:	4604      	mov	r4, r0
 800a136:	d001      	beq.n	800a13c <cleanup_stdio+0x10>
 800a138:	f001 fe2e 	bl	800bd98 <_fflush_r>
 800a13c:	68a1      	ldr	r1, [r4, #8]
 800a13e:	4b09      	ldr	r3, [pc, #36]	@ (800a164 <cleanup_stdio+0x38>)
 800a140:	4299      	cmp	r1, r3
 800a142:	d002      	beq.n	800a14a <cleanup_stdio+0x1e>
 800a144:	4620      	mov	r0, r4
 800a146:	f001 fe27 	bl	800bd98 <_fflush_r>
 800a14a:	68e1      	ldr	r1, [r4, #12]
 800a14c:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <cleanup_stdio+0x3c>)
 800a14e:	4299      	cmp	r1, r3
 800a150:	d004      	beq.n	800a15c <cleanup_stdio+0x30>
 800a152:	4620      	mov	r0, r4
 800a154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a158:	f001 be1e 	b.w	800bd98 <_fflush_r>
 800a15c:	bd10      	pop	{r4, pc}
 800a15e:	bf00      	nop
 800a160:	2000157c 	.word	0x2000157c
 800a164:	200015e4 	.word	0x200015e4
 800a168:	2000164c 	.word	0x2000164c

0800a16c <global_stdio_init.part.0>:
 800a16c:	b510      	push	{r4, lr}
 800a16e:	4b0b      	ldr	r3, [pc, #44]	@ (800a19c <global_stdio_init.part.0+0x30>)
 800a170:	4c0b      	ldr	r4, [pc, #44]	@ (800a1a0 <global_stdio_init.part.0+0x34>)
 800a172:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a4 <global_stdio_init.part.0+0x38>)
 800a174:	4620      	mov	r0, r4
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	2104      	movs	r1, #4
 800a17a:	2200      	movs	r2, #0
 800a17c:	f7ff ff94 	bl	800a0a8 <std>
 800a180:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a184:	2201      	movs	r2, #1
 800a186:	2109      	movs	r1, #9
 800a188:	f7ff ff8e 	bl	800a0a8 <std>
 800a18c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a190:	2202      	movs	r2, #2
 800a192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a196:	2112      	movs	r1, #18
 800a198:	f7ff bf86 	b.w	800a0a8 <std>
 800a19c:	200016b4 	.word	0x200016b4
 800a1a0:	2000157c 	.word	0x2000157c
 800a1a4:	0800a115 	.word	0x0800a115

0800a1a8 <__sfp_lock_acquire>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	@ (800a1b0 <__sfp_lock_acquire+0x8>)
 800a1aa:	f000 b936 	b.w	800a41a <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	200016bd 	.word	0x200016bd

0800a1b4 <__sfp_lock_release>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	@ (800a1bc <__sfp_lock_release+0x8>)
 800a1b6:	f000 b931 	b.w	800a41c <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	200016bd 	.word	0x200016bd

0800a1c0 <__sinit>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	f7ff fff0 	bl	800a1a8 <__sfp_lock_acquire>
 800a1c8:	6a23      	ldr	r3, [r4, #32]
 800a1ca:	b11b      	cbz	r3, 800a1d4 <__sinit+0x14>
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f7ff bff0 	b.w	800a1b4 <__sfp_lock_release>
 800a1d4:	4b04      	ldr	r3, [pc, #16]	@ (800a1e8 <__sinit+0x28>)
 800a1d6:	6223      	str	r3, [r4, #32]
 800a1d8:	4b04      	ldr	r3, [pc, #16]	@ (800a1ec <__sinit+0x2c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f5      	bne.n	800a1cc <__sinit+0xc>
 800a1e0:	f7ff ffc4 	bl	800a16c <global_stdio_init.part.0>
 800a1e4:	e7f2      	b.n	800a1cc <__sinit+0xc>
 800a1e6:	bf00      	nop
 800a1e8:	0800a12d 	.word	0x0800a12d
 800a1ec:	200016b4 	.word	0x200016b4

0800a1f0 <_fwalk_sglue>:
 800a1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	4688      	mov	r8, r1
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a200:	f1b9 0901 	subs.w	r9, r9, #1
 800a204:	d505      	bpl.n	800a212 <_fwalk_sglue+0x22>
 800a206:	6824      	ldr	r4, [r4, #0]
 800a208:	2c00      	cmp	r4, #0
 800a20a:	d1f7      	bne.n	800a1fc <_fwalk_sglue+0xc>
 800a20c:	4630      	mov	r0, r6
 800a20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a212:	89ab      	ldrh	r3, [r5, #12]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d907      	bls.n	800a228 <_fwalk_sglue+0x38>
 800a218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a21c:	3301      	adds	r3, #1
 800a21e:	d003      	beq.n	800a228 <_fwalk_sglue+0x38>
 800a220:	4629      	mov	r1, r5
 800a222:	4638      	mov	r0, r7
 800a224:	47c0      	blx	r8
 800a226:	4306      	orrs	r6, r0
 800a228:	3568      	adds	r5, #104	@ 0x68
 800a22a:	e7e9      	b.n	800a200 <_fwalk_sglue+0x10>

0800a22c <sniprintf>:
 800a22c:	b40c      	push	{r2, r3}
 800a22e:	b530      	push	{r4, r5, lr}
 800a230:	4b18      	ldr	r3, [pc, #96]	@ (800a294 <sniprintf+0x68>)
 800a232:	1e0c      	subs	r4, r1, #0
 800a234:	681d      	ldr	r5, [r3, #0]
 800a236:	b09d      	sub	sp, #116	@ 0x74
 800a238:	da08      	bge.n	800a24c <sniprintf+0x20>
 800a23a:	238b      	movs	r3, #139	@ 0x8b
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	b01d      	add	sp, #116	@ 0x74
 800a244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a248:	b002      	add	sp, #8
 800a24a:	4770      	bx	lr
 800a24c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a250:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a254:	f04f 0300 	mov.w	r3, #0
 800a258:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a25a:	bf0c      	ite	eq
 800a25c:	4623      	moveq	r3, r4
 800a25e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a262:	9304      	str	r3, [sp, #16]
 800a264:	9307      	str	r3, [sp, #28]
 800a266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a26a:	9002      	str	r0, [sp, #8]
 800a26c:	9006      	str	r0, [sp, #24]
 800a26e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a272:	4628      	mov	r0, r5
 800a274:	ab21      	add	r3, sp, #132	@ 0x84
 800a276:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a278:	a902      	add	r1, sp, #8
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	f001 fc10 	bl	800baa0 <_svfiprintf_r>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	bfbc      	itt	lt
 800a284:	238b      	movlt	r3, #139	@ 0x8b
 800a286:	602b      	strlt	r3, [r5, #0]
 800a288:	2c00      	cmp	r4, #0
 800a28a:	d0da      	beq.n	800a242 <sniprintf+0x16>
 800a28c:	2200      	movs	r2, #0
 800a28e:	9b02      	ldr	r3, [sp, #8]
 800a290:	701a      	strb	r2, [r3, #0]
 800a292:	e7d6      	b.n	800a242 <sniprintf+0x16>
 800a294:	20000188 	.word	0x20000188

0800a298 <__sread>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	f000 f86c 	bl	800a37c <_read_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	bfab      	itete	ge
 800a2a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a2ac:	181b      	addge	r3, r3, r0
 800a2ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2b2:	bfac      	ite	ge
 800a2b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2b6:	81a3      	strhlt	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__swrite>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	461f      	mov	r7, r3
 800a2c0:	898b      	ldrh	r3, [r1, #12]
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	05db      	lsls	r3, r3, #23
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	d505      	bpl.n	800a2d8 <__swrite+0x1e>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	f000 f840 	bl	800a358 <_lseek_r>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	4632      	mov	r2, r6
 800a2dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ee:	f000 b857 	b.w	800a3a0 <_write_r>

0800a2f2 <__sseek>:
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fa:	f000 f82d 	bl	800a358 <_lseek_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	bf15      	itete	ne
 800a304:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a30a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a30e:	81a3      	strheq	r3, [r4, #12]
 800a310:	bf18      	it	ne
 800a312:	81a3      	strhne	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__sclose>:
 800a316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31a:	f000 b80d 	b.w	800a338 <_close_r>

0800a31e <memset>:
 800a31e:	4603      	mov	r3, r0
 800a320:	4402      	add	r2, r0
 800a322:	4293      	cmp	r3, r2
 800a324:	d100      	bne.n	800a328 <memset+0xa>
 800a326:	4770      	bx	lr
 800a328:	f803 1b01 	strb.w	r1, [r3], #1
 800a32c:	e7f9      	b.n	800a322 <memset+0x4>
	...

0800a330 <_localeconv_r>:
 800a330:	4800      	ldr	r0, [pc, #0]	@ (800a334 <_localeconv_r+0x4>)
 800a332:	4770      	bx	lr
 800a334:	200002c8 	.word	0x200002c8

0800a338 <_close_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	2300      	movs	r3, #0
 800a33c:	4d05      	ldr	r5, [pc, #20]	@ (800a354 <_close_r+0x1c>)
 800a33e:	4604      	mov	r4, r0
 800a340:	4608      	mov	r0, r1
 800a342:	602b      	str	r3, [r5, #0]
 800a344:	f7f7 f895 	bl	8001472 <_close>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d102      	bne.n	800a352 <_close_r+0x1a>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	b103      	cbz	r3, 800a352 <_close_r+0x1a>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	200016b8 	.word	0x200016b8

0800a358 <_lseek_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	2200      	movs	r2, #0
 800a362:	4d05      	ldr	r5, [pc, #20]	@ (800a378 <_lseek_r+0x20>)
 800a364:	602a      	str	r2, [r5, #0]
 800a366:	461a      	mov	r2, r3
 800a368:	f7f7 f8a7 	bl	80014ba <_lseek>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_lseek_r+0x1e>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_lseek_r+0x1e>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	200016b8 	.word	0x200016b8

0800a37c <_read_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	2200      	movs	r2, #0
 800a386:	4d05      	ldr	r5, [pc, #20]	@ (800a39c <_read_r+0x20>)
 800a388:	602a      	str	r2, [r5, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	f7f7 f838 	bl	8001400 <_read>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_read_r+0x1e>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_read_r+0x1e>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	200016b8 	.word	0x200016b8

0800a3a0 <_write_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	4d05      	ldr	r5, [pc, #20]	@ (800a3c0 <_write_r+0x20>)
 800a3ac:	602a      	str	r2, [r5, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f7f7 f843 	bl	800143a <_write>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_write_r+0x1e>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_write_r+0x1e>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	200016b8 	.word	0x200016b8

0800a3c4 <__errno>:
 800a3c4:	4b01      	ldr	r3, [pc, #4]	@ (800a3cc <__errno+0x8>)
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000188 	.word	0x20000188

0800a3d0 <__libc_init_array>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	2600      	movs	r6, #0
 800a3d4:	4d0c      	ldr	r5, [pc, #48]	@ (800a408 <__libc_init_array+0x38>)
 800a3d6:	4c0d      	ldr	r4, [pc, #52]	@ (800a40c <__libc_init_array+0x3c>)
 800a3d8:	1b64      	subs	r4, r4, r5
 800a3da:	10a4      	asrs	r4, r4, #2
 800a3dc:	42a6      	cmp	r6, r4
 800a3de:	d109      	bne.n	800a3f4 <__libc_init_array+0x24>
 800a3e0:	f002 f876 	bl	800c4d0 <_init>
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	4d0a      	ldr	r5, [pc, #40]	@ (800a410 <__libc_init_array+0x40>)
 800a3e8:	4c0a      	ldr	r4, [pc, #40]	@ (800a414 <__libc_init_array+0x44>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	42a6      	cmp	r6, r4
 800a3f0:	d105      	bne.n	800a3fe <__libc_init_array+0x2e>
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f8:	4798      	blx	r3
 800a3fa:	3601      	adds	r6, #1
 800a3fc:	e7ee      	b.n	800a3dc <__libc_init_array+0xc>
 800a3fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a402:	4798      	blx	r3
 800a404:	3601      	adds	r6, #1
 800a406:	e7f2      	b.n	800a3ee <__libc_init_array+0x1e>
 800a408:	0800c91c 	.word	0x0800c91c
 800a40c:	0800c91c 	.word	0x0800c91c
 800a410:	0800c91c 	.word	0x0800c91c
 800a414:	0800c920 	.word	0x0800c920

0800a418 <__retarget_lock_init_recursive>:
 800a418:	4770      	bx	lr

0800a41a <__retarget_lock_acquire_recursive>:
 800a41a:	4770      	bx	lr

0800a41c <__retarget_lock_release_recursive>:
 800a41c:	4770      	bx	lr

0800a41e <memchr>:
 800a41e:	4603      	mov	r3, r0
 800a420:	b510      	push	{r4, lr}
 800a422:	b2c9      	uxtb	r1, r1
 800a424:	4402      	add	r2, r0
 800a426:	4293      	cmp	r3, r2
 800a428:	4618      	mov	r0, r3
 800a42a:	d101      	bne.n	800a430 <memchr+0x12>
 800a42c:	2000      	movs	r0, #0
 800a42e:	e003      	b.n	800a438 <memchr+0x1a>
 800a430:	7804      	ldrb	r4, [r0, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	428c      	cmp	r4, r1
 800a436:	d1f6      	bne.n	800a426 <memchr+0x8>
 800a438:	bd10      	pop	{r4, pc}

0800a43a <quorem>:
 800a43a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43e:	6903      	ldr	r3, [r0, #16]
 800a440:	690c      	ldr	r4, [r1, #16]
 800a442:	4607      	mov	r7, r0
 800a444:	42a3      	cmp	r3, r4
 800a446:	db7e      	blt.n	800a546 <quorem+0x10c>
 800a448:	3c01      	subs	r4, #1
 800a44a:	00a3      	lsls	r3, r4, #2
 800a44c:	f100 0514 	add.w	r5, r0, #20
 800a450:	f101 0814 	add.w	r8, r1, #20
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a464:	3301      	adds	r3, #1
 800a466:	429a      	cmp	r2, r3
 800a468:	fbb2 f6f3 	udiv	r6, r2, r3
 800a46c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a470:	d32e      	bcc.n	800a4d0 <quorem+0x96>
 800a472:	f04f 0a00 	mov.w	sl, #0
 800a476:	46c4      	mov	ip, r8
 800a478:	46ae      	mov	lr, r5
 800a47a:	46d3      	mov	fp, sl
 800a47c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a480:	b298      	uxth	r0, r3
 800a482:	fb06 a000 	mla	r0, r6, r0, sl
 800a486:	0c1b      	lsrs	r3, r3, #16
 800a488:	0c02      	lsrs	r2, r0, #16
 800a48a:	fb06 2303 	mla	r3, r6, r3, r2
 800a48e:	f8de 2000 	ldr.w	r2, [lr]
 800a492:	b280      	uxth	r0, r0
 800a494:	b292      	uxth	r2, r2
 800a496:	1a12      	subs	r2, r2, r0
 800a498:	445a      	add	r2, fp
 800a49a:	f8de 0000 	ldr.w	r0, [lr]
 800a49e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a4a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a4ac:	b292      	uxth	r2, r2
 800a4ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4b2:	45e1      	cmp	r9, ip
 800a4b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a4b8:	f84e 2b04 	str.w	r2, [lr], #4
 800a4bc:	d2de      	bcs.n	800a47c <quorem+0x42>
 800a4be:	9b00      	ldr	r3, [sp, #0]
 800a4c0:	58eb      	ldr	r3, [r5, r3]
 800a4c2:	b92b      	cbnz	r3, 800a4d0 <quorem+0x96>
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	3b04      	subs	r3, #4
 800a4c8:	429d      	cmp	r5, r3
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	d32f      	bcc.n	800a52e <quorem+0xf4>
 800a4ce:	613c      	str	r4, [r7, #16]
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f001 f981 	bl	800b7d8 <__mcmp>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	db25      	blt.n	800a526 <quorem+0xec>
 800a4da:	4629      	mov	r1, r5
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4e2:	f8d1 c000 	ldr.w	ip, [r1]
 800a4e6:	fa1f fe82 	uxth.w	lr, r2
 800a4ea:	fa1f f38c 	uxth.w	r3, ip
 800a4ee:	eba3 030e 	sub.w	r3, r3, lr
 800a4f2:	4403      	add	r3, r0
 800a4f4:	0c12      	lsrs	r2, r2, #16
 800a4f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a4fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a504:	45c1      	cmp	r9, r8
 800a506:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a50a:	f841 3b04 	str.w	r3, [r1], #4
 800a50e:	d2e6      	bcs.n	800a4de <quorem+0xa4>
 800a510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a514:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a518:	b922      	cbnz	r2, 800a524 <quorem+0xea>
 800a51a:	3b04      	subs	r3, #4
 800a51c:	429d      	cmp	r5, r3
 800a51e:	461a      	mov	r2, r3
 800a520:	d30b      	bcc.n	800a53a <quorem+0x100>
 800a522:	613c      	str	r4, [r7, #16]
 800a524:	3601      	adds	r6, #1
 800a526:	4630      	mov	r0, r6
 800a528:	b003      	add	sp, #12
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52e:	6812      	ldr	r2, [r2, #0]
 800a530:	3b04      	subs	r3, #4
 800a532:	2a00      	cmp	r2, #0
 800a534:	d1cb      	bne.n	800a4ce <quorem+0x94>
 800a536:	3c01      	subs	r4, #1
 800a538:	e7c6      	b.n	800a4c8 <quorem+0x8e>
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	3b04      	subs	r3, #4
 800a53e:	2a00      	cmp	r2, #0
 800a540:	d1ef      	bne.n	800a522 <quorem+0xe8>
 800a542:	3c01      	subs	r4, #1
 800a544:	e7ea      	b.n	800a51c <quorem+0xe2>
 800a546:	2000      	movs	r0, #0
 800a548:	e7ee      	b.n	800a528 <quorem+0xee>
 800a54a:	0000      	movs	r0, r0
 800a54c:	0000      	movs	r0, r0
	...

0800a550 <_dtoa_r>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4614      	mov	r4, r2
 800a556:	461d      	mov	r5, r3
 800a558:	69c7      	ldr	r7, [r0, #28]
 800a55a:	b097      	sub	sp, #92	@ 0x5c
 800a55c:	4681      	mov	r9, r0
 800a55e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a562:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a564:	b97f      	cbnz	r7, 800a586 <_dtoa_r+0x36>
 800a566:	2010      	movs	r0, #16
 800a568:	f000 fe0e 	bl	800b188 <malloc>
 800a56c:	4602      	mov	r2, r0
 800a56e:	f8c9 001c 	str.w	r0, [r9, #28]
 800a572:	b920      	cbnz	r0, 800a57e <_dtoa_r+0x2e>
 800a574:	21ef      	movs	r1, #239	@ 0xef
 800a576:	4bac      	ldr	r3, [pc, #688]	@ (800a828 <_dtoa_r+0x2d8>)
 800a578:	48ac      	ldr	r0, [pc, #688]	@ (800a82c <_dtoa_r+0x2dc>)
 800a57a:	f001 fc6d 	bl	800be58 <__assert_func>
 800a57e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a582:	6007      	str	r7, [r0, #0]
 800a584:	60c7      	str	r7, [r0, #12]
 800a586:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a58a:	6819      	ldr	r1, [r3, #0]
 800a58c:	b159      	cbz	r1, 800a5a6 <_dtoa_r+0x56>
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	2301      	movs	r3, #1
 800a592:	4093      	lsls	r3, r2
 800a594:	604a      	str	r2, [r1, #4]
 800a596:	608b      	str	r3, [r1, #8]
 800a598:	4648      	mov	r0, r9
 800a59a:	f000 feeb 	bl	800b374 <_Bfree>
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	1e2b      	subs	r3, r5, #0
 800a5a8:	bfaf      	iteee	ge
 800a5aa:	2300      	movge	r3, #0
 800a5ac:	2201      	movlt	r2, #1
 800a5ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a5b2:	9307      	strlt	r3, [sp, #28]
 800a5b4:	bfa8      	it	ge
 800a5b6:	6033      	strge	r3, [r6, #0]
 800a5b8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a5bc:	4b9c      	ldr	r3, [pc, #624]	@ (800a830 <_dtoa_r+0x2e0>)
 800a5be:	bfb8      	it	lt
 800a5c0:	6032      	strlt	r2, [r6, #0]
 800a5c2:	ea33 0308 	bics.w	r3, r3, r8
 800a5c6:	d112      	bne.n	800a5ee <_dtoa_r+0x9e>
 800a5c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a5cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a5d4:	4323      	orrs	r3, r4
 800a5d6:	f000 855e 	beq.w	800b096 <_dtoa_r+0xb46>
 800a5da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a5dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a834 <_dtoa_r+0x2e4>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 8560 	beq.w	800b0a6 <_dtoa_r+0xb56>
 800a5e6:	f10a 0303 	add.w	r3, sl, #3
 800a5ea:	f000 bd5a 	b.w	800b0a2 <_dtoa_r+0xb52>
 800a5ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a5f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f7f6 f9d3 	bl	80009a8 <__aeabi_dcmpeq>
 800a602:	4607      	mov	r7, r0
 800a604:	b158      	cbz	r0, 800a61e <_dtoa_r+0xce>
 800a606:	2301      	movs	r3, #1
 800a608:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a60e:	b113      	cbz	r3, 800a616 <_dtoa_r+0xc6>
 800a610:	4b89      	ldr	r3, [pc, #548]	@ (800a838 <_dtoa_r+0x2e8>)
 800a612:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a83c <_dtoa_r+0x2ec>
 800a61a:	f000 bd44 	b.w	800b0a6 <_dtoa_r+0xb56>
 800a61e:	ab14      	add	r3, sp, #80	@ 0x50
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	ab15      	add	r3, sp, #84	@ 0x54
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	4648      	mov	r0, r9
 800a628:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a62c:	f001 f984 	bl	800b938 <__d2b>
 800a630:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a634:	9003      	str	r0, [sp, #12]
 800a636:	2e00      	cmp	r6, #0
 800a638:	d078      	beq.n	800a72c <_dtoa_r+0x1dc>
 800a63a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a63e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a640:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a648:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a64c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a650:	9712      	str	r7, [sp, #72]	@ 0x48
 800a652:	4619      	mov	r1, r3
 800a654:	2200      	movs	r2, #0
 800a656:	4b7a      	ldr	r3, [pc, #488]	@ (800a840 <_dtoa_r+0x2f0>)
 800a658:	f7f5 fd86 	bl	8000168 <__aeabi_dsub>
 800a65c:	a36c      	add	r3, pc, #432	@ (adr r3, 800a810 <_dtoa_r+0x2c0>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7f5 ff39 	bl	80004d8 <__aeabi_dmul>
 800a666:	a36c      	add	r3, pc, #432	@ (adr r3, 800a818 <_dtoa_r+0x2c8>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	f7f5 fd7e 	bl	800016c <__adddf3>
 800a670:	4604      	mov	r4, r0
 800a672:	4630      	mov	r0, r6
 800a674:	460d      	mov	r5, r1
 800a676:	f7f5 fec5 	bl	8000404 <__aeabi_i2d>
 800a67a:	a369      	add	r3, pc, #420	@ (adr r3, 800a820 <_dtoa_r+0x2d0>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f7f5 ff2a 	bl	80004d8 <__aeabi_dmul>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4620      	mov	r0, r4
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7f5 fd6e 	bl	800016c <__adddf3>
 800a690:	4604      	mov	r4, r0
 800a692:	460d      	mov	r5, r1
 800a694:	f7f6 f9d0 	bl	8000a38 <__aeabi_d2iz>
 800a698:	2200      	movs	r2, #0
 800a69a:	4607      	mov	r7, r0
 800a69c:	2300      	movs	r3, #0
 800a69e:	4620      	mov	r0, r4
 800a6a0:	4629      	mov	r1, r5
 800a6a2:	f7f6 f98b 	bl	80009bc <__aeabi_dcmplt>
 800a6a6:	b140      	cbz	r0, 800a6ba <_dtoa_r+0x16a>
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7f5 feab 	bl	8000404 <__aeabi_i2d>
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	f7f6 f979 	bl	80009a8 <__aeabi_dcmpeq>
 800a6b6:	b900      	cbnz	r0, 800a6ba <_dtoa_r+0x16a>
 800a6b8:	3f01      	subs	r7, #1
 800a6ba:	2f16      	cmp	r7, #22
 800a6bc:	d854      	bhi.n	800a768 <_dtoa_r+0x218>
 800a6be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6c2:	4b60      	ldr	r3, [pc, #384]	@ (800a844 <_dtoa_r+0x2f4>)
 800a6c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f7f6 f976 	bl	80009bc <__aeabi_dcmplt>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d04b      	beq.n	800a76c <_dtoa_r+0x21c>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	3f01      	subs	r7, #1
 800a6d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6dc:	1b9b      	subs	r3, r3, r6
 800a6de:	1e5a      	subs	r2, r3, #1
 800a6e0:	bf49      	itett	mi
 800a6e2:	f1c3 0301 	rsbmi	r3, r3, #1
 800a6e6:	2300      	movpl	r3, #0
 800a6e8:	9304      	strmi	r3, [sp, #16]
 800a6ea:	2300      	movmi	r3, #0
 800a6ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6ee:	bf54      	ite	pl
 800a6f0:	9304      	strpl	r3, [sp, #16]
 800a6f2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a6f4:	2f00      	cmp	r7, #0
 800a6f6:	db3b      	blt.n	800a770 <_dtoa_r+0x220>
 800a6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fa:	970e      	str	r7, [sp, #56]	@ 0x38
 800a6fc:	443b      	add	r3, r7
 800a6fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a700:	2300      	movs	r3, #0
 800a702:	930a      	str	r3, [sp, #40]	@ 0x28
 800a704:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a706:	2b09      	cmp	r3, #9
 800a708:	d865      	bhi.n	800a7d6 <_dtoa_r+0x286>
 800a70a:	2b05      	cmp	r3, #5
 800a70c:	bfc4      	itt	gt
 800a70e:	3b04      	subgt	r3, #4
 800a710:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a712:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a714:	bfc8      	it	gt
 800a716:	2400      	movgt	r4, #0
 800a718:	f1a3 0302 	sub.w	r3, r3, #2
 800a71c:	bfd8      	it	le
 800a71e:	2401      	movle	r4, #1
 800a720:	2b03      	cmp	r3, #3
 800a722:	d864      	bhi.n	800a7ee <_dtoa_r+0x29e>
 800a724:	e8df f003 	tbb	[pc, r3]
 800a728:	2c385553 	.word	0x2c385553
 800a72c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a730:	441e      	add	r6, r3
 800a732:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a736:	2b20      	cmp	r3, #32
 800a738:	bfc1      	itttt	gt
 800a73a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a73e:	fa08 f803 	lslgt.w	r8, r8, r3
 800a742:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a746:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a74a:	bfd6      	itet	le
 800a74c:	f1c3 0320 	rsble	r3, r3, #32
 800a750:	ea48 0003 	orrgt.w	r0, r8, r3
 800a754:	fa04 f003 	lslle.w	r0, r4, r3
 800a758:	f7f5 fe44 	bl	80003e4 <__aeabi_ui2d>
 800a75c:	2201      	movs	r2, #1
 800a75e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a762:	3e01      	subs	r6, #1
 800a764:	9212      	str	r2, [sp, #72]	@ 0x48
 800a766:	e774      	b.n	800a652 <_dtoa_r+0x102>
 800a768:	2301      	movs	r3, #1
 800a76a:	e7b5      	b.n	800a6d8 <_dtoa_r+0x188>
 800a76c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a76e:	e7b4      	b.n	800a6da <_dtoa_r+0x18a>
 800a770:	9b04      	ldr	r3, [sp, #16]
 800a772:	1bdb      	subs	r3, r3, r7
 800a774:	9304      	str	r3, [sp, #16]
 800a776:	427b      	negs	r3, r7
 800a778:	930a      	str	r3, [sp, #40]	@ 0x28
 800a77a:	2300      	movs	r3, #0
 800a77c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a77e:	e7c1      	b.n	800a704 <_dtoa_r+0x1b4>
 800a780:	2301      	movs	r3, #1
 800a782:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a784:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a786:	eb07 0b03 	add.w	fp, r7, r3
 800a78a:	f10b 0301 	add.w	r3, fp, #1
 800a78e:	2b01      	cmp	r3, #1
 800a790:	9308      	str	r3, [sp, #32]
 800a792:	bfb8      	it	lt
 800a794:	2301      	movlt	r3, #1
 800a796:	e006      	b.n	800a7a6 <_dtoa_r+0x256>
 800a798:	2301      	movs	r3, #1
 800a79a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a79c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dd28      	ble.n	800a7f4 <_dtoa_r+0x2a4>
 800a7a2:	469b      	mov	fp, r3
 800a7a4:	9308      	str	r3, [sp, #32]
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	2204      	movs	r2, #4
 800a7aa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a7ae:	f102 0514 	add.w	r5, r2, #20
 800a7b2:	429d      	cmp	r5, r3
 800a7b4:	d926      	bls.n	800a804 <_dtoa_r+0x2b4>
 800a7b6:	6041      	str	r1, [r0, #4]
 800a7b8:	4648      	mov	r0, r9
 800a7ba:	f000 fd9b 	bl	800b2f4 <_Balloc>
 800a7be:	4682      	mov	sl, r0
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d143      	bne.n	800a84c <_dtoa_r+0x2fc>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a7ca:	4b1f      	ldr	r3, [pc, #124]	@ (800a848 <_dtoa_r+0x2f8>)
 800a7cc:	e6d4      	b.n	800a578 <_dtoa_r+0x28>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e7e3      	b.n	800a79a <_dtoa_r+0x24a>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e7d5      	b.n	800a782 <_dtoa_r+0x232>
 800a7d6:	2401      	movs	r4, #1
 800a7d8:	2300      	movs	r3, #0
 800a7da:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a7dc:	9320      	str	r3, [sp, #128]	@ 0x80
 800a7de:	f04f 3bff 	mov.w	fp, #4294967295
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	2312      	movs	r3, #18
 800a7e6:	f8cd b020 	str.w	fp, [sp, #32]
 800a7ea:	9221      	str	r2, [sp, #132]	@ 0x84
 800a7ec:	e7db      	b.n	800a7a6 <_dtoa_r+0x256>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7f2:	e7f4      	b.n	800a7de <_dtoa_r+0x28e>
 800a7f4:	f04f 0b01 	mov.w	fp, #1
 800a7f8:	465b      	mov	r3, fp
 800a7fa:	f8cd b020 	str.w	fp, [sp, #32]
 800a7fe:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800a802:	e7d0      	b.n	800a7a6 <_dtoa_r+0x256>
 800a804:	3101      	adds	r1, #1
 800a806:	0052      	lsls	r2, r2, #1
 800a808:	e7d1      	b.n	800a7ae <_dtoa_r+0x25e>
 800a80a:	bf00      	nop
 800a80c:	f3af 8000 	nop.w
 800a810:	636f4361 	.word	0x636f4361
 800a814:	3fd287a7 	.word	0x3fd287a7
 800a818:	8b60c8b3 	.word	0x8b60c8b3
 800a81c:	3fc68a28 	.word	0x3fc68a28
 800a820:	509f79fb 	.word	0x509f79fb
 800a824:	3fd34413 	.word	0x3fd34413
 800a828:	0800c5e3 	.word	0x0800c5e3
 800a82c:	0800c5fa 	.word	0x0800c5fa
 800a830:	7ff00000 	.word	0x7ff00000
 800a834:	0800c5df 	.word	0x0800c5df
 800a838:	0800c5b3 	.word	0x0800c5b3
 800a83c:	0800c5b2 	.word	0x0800c5b2
 800a840:	3ff80000 	.word	0x3ff80000
 800a844:	0800c748 	.word	0x0800c748
 800a848:	0800c652 	.word	0x0800c652
 800a84c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a850:	6018      	str	r0, [r3, #0]
 800a852:	9b08      	ldr	r3, [sp, #32]
 800a854:	2b0e      	cmp	r3, #14
 800a856:	f200 80a1 	bhi.w	800a99c <_dtoa_r+0x44c>
 800a85a:	2c00      	cmp	r4, #0
 800a85c:	f000 809e 	beq.w	800a99c <_dtoa_r+0x44c>
 800a860:	2f00      	cmp	r7, #0
 800a862:	dd33      	ble.n	800a8cc <_dtoa_r+0x37c>
 800a864:	4b9c      	ldr	r3, [pc, #624]	@ (800aad8 <_dtoa_r+0x588>)
 800a866:	f007 020f 	and.w	r2, r7, #15
 800a86a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a86e:	05f8      	lsls	r0, r7, #23
 800a870:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a874:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800a878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a87c:	d516      	bpl.n	800a8ac <_dtoa_r+0x35c>
 800a87e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a882:	4b96      	ldr	r3, [pc, #600]	@ (800aadc <_dtoa_r+0x58c>)
 800a884:	2603      	movs	r6, #3
 800a886:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a88a:	f7f5 ff4f 	bl	800072c <__aeabi_ddiv>
 800a88e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a892:	f004 040f 	and.w	r4, r4, #15
 800a896:	4d91      	ldr	r5, [pc, #580]	@ (800aadc <_dtoa_r+0x58c>)
 800a898:	b954      	cbnz	r4, 800a8b0 <_dtoa_r+0x360>
 800a89a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8a2:	f7f5 ff43 	bl	800072c <__aeabi_ddiv>
 800a8a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8aa:	e028      	b.n	800a8fe <_dtoa_r+0x3ae>
 800a8ac:	2602      	movs	r6, #2
 800a8ae:	e7f2      	b.n	800a896 <_dtoa_r+0x346>
 800a8b0:	07e1      	lsls	r1, r4, #31
 800a8b2:	d508      	bpl.n	800a8c6 <_dtoa_r+0x376>
 800a8b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a8b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8bc:	f7f5 fe0c 	bl	80004d8 <__aeabi_dmul>
 800a8c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8c4:	3601      	adds	r6, #1
 800a8c6:	1064      	asrs	r4, r4, #1
 800a8c8:	3508      	adds	r5, #8
 800a8ca:	e7e5      	b.n	800a898 <_dtoa_r+0x348>
 800a8cc:	f000 80af 	beq.w	800aa2e <_dtoa_r+0x4de>
 800a8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8d4:	427c      	negs	r4, r7
 800a8d6:	4b80      	ldr	r3, [pc, #512]	@ (800aad8 <_dtoa_r+0x588>)
 800a8d8:	f004 020f 	and.w	r2, r4, #15
 800a8dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f7f5 fdf8 	bl	80004d8 <__aeabi_dmul>
 800a8e8:	2602      	movs	r6, #2
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8f0:	4d7a      	ldr	r5, [pc, #488]	@ (800aadc <_dtoa_r+0x58c>)
 800a8f2:	1124      	asrs	r4, r4, #4
 800a8f4:	2c00      	cmp	r4, #0
 800a8f6:	f040 808f 	bne.w	800aa18 <_dtoa_r+0x4c8>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1d3      	bne.n	800a8a6 <_dtoa_r+0x356>
 800a8fe:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800a902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8094 	beq.w	800aa32 <_dtoa_r+0x4e2>
 800a90a:	2200      	movs	r2, #0
 800a90c:	4620      	mov	r0, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	4b73      	ldr	r3, [pc, #460]	@ (800aae0 <_dtoa_r+0x590>)
 800a912:	f7f6 f853 	bl	80009bc <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	f000 808b 	beq.w	800aa32 <_dtoa_r+0x4e2>
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 8087 	beq.w	800aa32 <_dtoa_r+0x4e2>
 800a924:	f1bb 0f00 	cmp.w	fp, #0
 800a928:	dd34      	ble.n	800a994 <_dtoa_r+0x444>
 800a92a:	4620      	mov	r0, r4
 800a92c:	2200      	movs	r2, #0
 800a92e:	4629      	mov	r1, r5
 800a930:	4b6c      	ldr	r3, [pc, #432]	@ (800aae4 <_dtoa_r+0x594>)
 800a932:	f7f5 fdd1 	bl	80004d8 <__aeabi_dmul>
 800a936:	465c      	mov	r4, fp
 800a938:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a93c:	f107 38ff 	add.w	r8, r7, #4294967295
 800a940:	3601      	adds	r6, #1
 800a942:	4630      	mov	r0, r6
 800a944:	f7f5 fd5e 	bl	8000404 <__aeabi_i2d>
 800a948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a94c:	f7f5 fdc4 	bl	80004d8 <__aeabi_dmul>
 800a950:	2200      	movs	r2, #0
 800a952:	4b65      	ldr	r3, [pc, #404]	@ (800aae8 <_dtoa_r+0x598>)
 800a954:	f7f5 fc0a 	bl	800016c <__adddf3>
 800a958:	4605      	mov	r5, r0
 800a95a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a95e:	2c00      	cmp	r4, #0
 800a960:	d16a      	bne.n	800aa38 <_dtoa_r+0x4e8>
 800a962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a966:	2200      	movs	r2, #0
 800a968:	4b60      	ldr	r3, [pc, #384]	@ (800aaec <_dtoa_r+0x59c>)
 800a96a:	f7f5 fbfd 	bl	8000168 <__aeabi_dsub>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a976:	462a      	mov	r2, r5
 800a978:	4633      	mov	r3, r6
 800a97a:	f7f6 f83d 	bl	80009f8 <__aeabi_dcmpgt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f040 8298 	bne.w	800aeb4 <_dtoa_r+0x964>
 800a984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a988:	462a      	mov	r2, r5
 800a98a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a98e:	f7f6 f815 	bl	80009bc <__aeabi_dcmplt>
 800a992:	bb38      	cbnz	r0, 800a9e4 <_dtoa_r+0x494>
 800a994:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a998:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a99c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f2c0 8157 	blt.w	800ac52 <_dtoa_r+0x702>
 800a9a4:	2f0e      	cmp	r7, #14
 800a9a6:	f300 8154 	bgt.w	800ac52 <_dtoa_r+0x702>
 800a9aa:	4b4b      	ldr	r3, [pc, #300]	@ (800aad8 <_dtoa_r+0x588>)
 800a9ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a9b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f280 80e5 	bge.w	800ab8a <_dtoa_r+0x63a>
 800a9c0:	9b08      	ldr	r3, [sp, #32]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f300 80e1 	bgt.w	800ab8a <_dtoa_r+0x63a>
 800a9c8:	d10c      	bne.n	800a9e4 <_dtoa_r+0x494>
 800a9ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4b46      	ldr	r3, [pc, #280]	@ (800aaec <_dtoa_r+0x59c>)
 800a9d2:	f7f5 fd81 	bl	80004d8 <__aeabi_dmul>
 800a9d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a9da:	f7f6 f803 	bl	80009e4 <__aeabi_dcmpge>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f000 8266 	beq.w	800aeb0 <_dtoa_r+0x960>
 800a9e4:	2400      	movs	r4, #0
 800a9e6:	4625      	mov	r5, r4
 800a9e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9ea:	4656      	mov	r6, sl
 800a9ec:	ea6f 0803 	mvn.w	r8, r3
 800a9f0:	2700      	movs	r7, #0
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4648      	mov	r0, r9
 800a9f6:	f000 fcbd 	bl	800b374 <_Bfree>
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	f000 80bd 	beq.w	800ab7a <_dtoa_r+0x62a>
 800aa00:	b12f      	cbz	r7, 800aa0e <_dtoa_r+0x4be>
 800aa02:	42af      	cmp	r7, r5
 800aa04:	d003      	beq.n	800aa0e <_dtoa_r+0x4be>
 800aa06:	4639      	mov	r1, r7
 800aa08:	4648      	mov	r0, r9
 800aa0a:	f000 fcb3 	bl	800b374 <_Bfree>
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4648      	mov	r0, r9
 800aa12:	f000 fcaf 	bl	800b374 <_Bfree>
 800aa16:	e0b0      	b.n	800ab7a <_dtoa_r+0x62a>
 800aa18:	07e2      	lsls	r2, r4, #31
 800aa1a:	d505      	bpl.n	800aa28 <_dtoa_r+0x4d8>
 800aa1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa20:	f7f5 fd5a 	bl	80004d8 <__aeabi_dmul>
 800aa24:	2301      	movs	r3, #1
 800aa26:	3601      	adds	r6, #1
 800aa28:	1064      	asrs	r4, r4, #1
 800aa2a:	3508      	adds	r5, #8
 800aa2c:	e762      	b.n	800a8f4 <_dtoa_r+0x3a4>
 800aa2e:	2602      	movs	r6, #2
 800aa30:	e765      	b.n	800a8fe <_dtoa_r+0x3ae>
 800aa32:	46b8      	mov	r8, r7
 800aa34:	9c08      	ldr	r4, [sp, #32]
 800aa36:	e784      	b.n	800a942 <_dtoa_r+0x3f2>
 800aa38:	4b27      	ldr	r3, [pc, #156]	@ (800aad8 <_dtoa_r+0x588>)
 800aa3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa44:	4454      	add	r4, sl
 800aa46:	2900      	cmp	r1, #0
 800aa48:	d054      	beq.n	800aaf4 <_dtoa_r+0x5a4>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	4928      	ldr	r1, [pc, #160]	@ (800aaf0 <_dtoa_r+0x5a0>)
 800aa4e:	f7f5 fe6d 	bl	800072c <__aeabi_ddiv>
 800aa52:	4633      	mov	r3, r6
 800aa54:	462a      	mov	r2, r5
 800aa56:	f7f5 fb87 	bl	8000168 <__aeabi_dsub>
 800aa5a:	4656      	mov	r6, sl
 800aa5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa64:	f7f5 ffe8 	bl	8000a38 <__aeabi_d2iz>
 800aa68:	4605      	mov	r5, r0
 800aa6a:	f7f5 fccb 	bl	8000404 <__aeabi_i2d>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa76:	f7f5 fb77 	bl	8000168 <__aeabi_dsub>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	3530      	adds	r5, #48	@ 0x30
 800aa80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa88:	f806 5b01 	strb.w	r5, [r6], #1
 800aa8c:	f7f5 ff96 	bl	80009bc <__aeabi_dcmplt>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d172      	bne.n	800ab7a <_dtoa_r+0x62a>
 800aa94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	4911      	ldr	r1, [pc, #68]	@ (800aae0 <_dtoa_r+0x590>)
 800aa9c:	f7f5 fb64 	bl	8000168 <__aeabi_dsub>
 800aaa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aaa4:	f7f5 ff8a 	bl	80009bc <__aeabi_dcmplt>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	f040 80b4 	bne.w	800ac16 <_dtoa_r+0x6c6>
 800aaae:	42a6      	cmp	r6, r4
 800aab0:	f43f af70 	beq.w	800a994 <_dtoa_r+0x444>
 800aab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aab8:	2200      	movs	r2, #0
 800aaba:	4b0a      	ldr	r3, [pc, #40]	@ (800aae4 <_dtoa_r+0x594>)
 800aabc:	f7f5 fd0c 	bl	80004d8 <__aeabi_dmul>
 800aac0:	2200      	movs	r2, #0
 800aac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaca:	4b06      	ldr	r3, [pc, #24]	@ (800aae4 <_dtoa_r+0x594>)
 800aacc:	f7f5 fd04 	bl	80004d8 <__aeabi_dmul>
 800aad0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aad4:	e7c4      	b.n	800aa60 <_dtoa_r+0x510>
 800aad6:	bf00      	nop
 800aad8:	0800c748 	.word	0x0800c748
 800aadc:	0800c720 	.word	0x0800c720
 800aae0:	3ff00000 	.word	0x3ff00000
 800aae4:	40240000 	.word	0x40240000
 800aae8:	401c0000 	.word	0x401c0000
 800aaec:	40140000 	.word	0x40140000
 800aaf0:	3fe00000 	.word	0x3fe00000
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f7f5 fcee 	bl	80004d8 <__aeabi_dmul>
 800aafc:	4656      	mov	r6, sl
 800aafe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab02:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ab04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab08:	f7f5 ff96 	bl	8000a38 <__aeabi_d2iz>
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	f7f5 fc79 	bl	8000404 <__aeabi_i2d>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab1a:	f7f5 fb25 	bl	8000168 <__aeabi_dsub>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	460b      	mov	r3, r1
 800ab22:	3530      	adds	r5, #48	@ 0x30
 800ab24:	f806 5b01 	strb.w	r5, [r6], #1
 800ab28:	42a6      	cmp	r6, r4
 800ab2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	d124      	bne.n	800ab7e <_dtoa_r+0x62e>
 800ab34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ab38:	4bae      	ldr	r3, [pc, #696]	@ (800adf4 <_dtoa_r+0x8a4>)
 800ab3a:	f7f5 fb17 	bl	800016c <__adddf3>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab46:	f7f5 ff57 	bl	80009f8 <__aeabi_dcmpgt>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d163      	bne.n	800ac16 <_dtoa_r+0x6c6>
 800ab4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab52:	2000      	movs	r0, #0
 800ab54:	49a7      	ldr	r1, [pc, #668]	@ (800adf4 <_dtoa_r+0x8a4>)
 800ab56:	f7f5 fb07 	bl	8000168 <__aeabi_dsub>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab62:	f7f5 ff2b 	bl	80009bc <__aeabi_dcmplt>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	f43f af14 	beq.w	800a994 <_dtoa_r+0x444>
 800ab6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ab6e:	1e73      	subs	r3, r6, #1
 800ab70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab76:	2b30      	cmp	r3, #48	@ 0x30
 800ab78:	d0f8      	beq.n	800ab6c <_dtoa_r+0x61c>
 800ab7a:	4647      	mov	r7, r8
 800ab7c:	e03b      	b.n	800abf6 <_dtoa_r+0x6a6>
 800ab7e:	4b9e      	ldr	r3, [pc, #632]	@ (800adf8 <_dtoa_r+0x8a8>)
 800ab80:	f7f5 fcaa 	bl	80004d8 <__aeabi_dmul>
 800ab84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab88:	e7bc      	b.n	800ab04 <_dtoa_r+0x5b4>
 800ab8a:	4656      	mov	r6, sl
 800ab8c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ab90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab94:	4620      	mov	r0, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	f7f5 fdc8 	bl	800072c <__aeabi_ddiv>
 800ab9c:	f7f5 ff4c 	bl	8000a38 <__aeabi_d2iz>
 800aba0:	4680      	mov	r8, r0
 800aba2:	f7f5 fc2f 	bl	8000404 <__aeabi_i2d>
 800aba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abaa:	f7f5 fc95 	bl	80004d8 <__aeabi_dmul>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4620      	mov	r0, r4
 800abb4:	4629      	mov	r1, r5
 800abb6:	f7f5 fad7 	bl	8000168 <__aeabi_dsub>
 800abba:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800abbe:	9d08      	ldr	r5, [sp, #32]
 800abc0:	f806 4b01 	strb.w	r4, [r6], #1
 800abc4:	eba6 040a 	sub.w	r4, r6, sl
 800abc8:	42a5      	cmp	r5, r4
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	d133      	bne.n	800ac38 <_dtoa_r+0x6e8>
 800abd0:	f7f5 facc 	bl	800016c <__adddf3>
 800abd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd8:	4604      	mov	r4, r0
 800abda:	460d      	mov	r5, r1
 800abdc:	f7f5 ff0c 	bl	80009f8 <__aeabi_dcmpgt>
 800abe0:	b9c0      	cbnz	r0, 800ac14 <_dtoa_r+0x6c4>
 800abe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abe6:	4620      	mov	r0, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	f7f5 fedd 	bl	80009a8 <__aeabi_dcmpeq>
 800abee:	b110      	cbz	r0, 800abf6 <_dtoa_r+0x6a6>
 800abf0:	f018 0f01 	tst.w	r8, #1
 800abf4:	d10e      	bne.n	800ac14 <_dtoa_r+0x6c4>
 800abf6:	4648      	mov	r0, r9
 800abf8:	9903      	ldr	r1, [sp, #12]
 800abfa:	f000 fbbb 	bl	800b374 <_Bfree>
 800abfe:	2300      	movs	r3, #0
 800ac00:	7033      	strb	r3, [r6, #0]
 800ac02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ac04:	3701      	adds	r7, #1
 800ac06:	601f      	str	r7, [r3, #0]
 800ac08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 824b 	beq.w	800b0a6 <_dtoa_r+0xb56>
 800ac10:	601e      	str	r6, [r3, #0]
 800ac12:	e248      	b.n	800b0a6 <_dtoa_r+0xb56>
 800ac14:	46b8      	mov	r8, r7
 800ac16:	4633      	mov	r3, r6
 800ac18:	461e      	mov	r6, r3
 800ac1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac1e:	2a39      	cmp	r2, #57	@ 0x39
 800ac20:	d106      	bne.n	800ac30 <_dtoa_r+0x6e0>
 800ac22:	459a      	cmp	sl, r3
 800ac24:	d1f8      	bne.n	800ac18 <_dtoa_r+0x6c8>
 800ac26:	2230      	movs	r2, #48	@ 0x30
 800ac28:	f108 0801 	add.w	r8, r8, #1
 800ac2c:	f88a 2000 	strb.w	r2, [sl]
 800ac30:	781a      	ldrb	r2, [r3, #0]
 800ac32:	3201      	adds	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e7a0      	b.n	800ab7a <_dtoa_r+0x62a>
 800ac38:	2200      	movs	r2, #0
 800ac3a:	4b6f      	ldr	r3, [pc, #444]	@ (800adf8 <_dtoa_r+0x8a8>)
 800ac3c:	f7f5 fc4c 	bl	80004d8 <__aeabi_dmul>
 800ac40:	2200      	movs	r2, #0
 800ac42:	2300      	movs	r3, #0
 800ac44:	4604      	mov	r4, r0
 800ac46:	460d      	mov	r5, r1
 800ac48:	f7f5 feae 	bl	80009a8 <__aeabi_dcmpeq>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d09f      	beq.n	800ab90 <_dtoa_r+0x640>
 800ac50:	e7d1      	b.n	800abf6 <_dtoa_r+0x6a6>
 800ac52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac54:	2a00      	cmp	r2, #0
 800ac56:	f000 80ea 	beq.w	800ae2e <_dtoa_r+0x8de>
 800ac5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ac5c:	2a01      	cmp	r2, #1
 800ac5e:	f300 80cd 	bgt.w	800adfc <_dtoa_r+0x8ac>
 800ac62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	f000 80c1 	beq.w	800adec <_dtoa_r+0x89c>
 800ac6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac70:	9e04      	ldr	r6, [sp, #16]
 800ac72:	9a04      	ldr	r2, [sp, #16]
 800ac74:	2101      	movs	r1, #1
 800ac76:	441a      	add	r2, r3
 800ac78:	9204      	str	r2, [sp, #16]
 800ac7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac7c:	4648      	mov	r0, r9
 800ac7e:	441a      	add	r2, r3
 800ac80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac82:	f000 fc2b 	bl	800b4dc <__i2b>
 800ac86:	4605      	mov	r5, r0
 800ac88:	b166      	cbz	r6, 800aca4 <_dtoa_r+0x754>
 800ac8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	dd09      	ble.n	800aca4 <_dtoa_r+0x754>
 800ac90:	42b3      	cmp	r3, r6
 800ac92:	bfa8      	it	ge
 800ac94:	4633      	movge	r3, r6
 800ac96:	9a04      	ldr	r2, [sp, #16]
 800ac98:	1af6      	subs	r6, r6, r3
 800ac9a:	1ad2      	subs	r2, r2, r3
 800ac9c:	9204      	str	r2, [sp, #16]
 800ac9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca6:	b30b      	cbz	r3, 800acec <_dtoa_r+0x79c>
 800aca8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 80c6 	beq.w	800ae3c <_dtoa_r+0x8ec>
 800acb0:	2c00      	cmp	r4, #0
 800acb2:	f000 80c0 	beq.w	800ae36 <_dtoa_r+0x8e6>
 800acb6:	4629      	mov	r1, r5
 800acb8:	4622      	mov	r2, r4
 800acba:	4648      	mov	r0, r9
 800acbc:	f000 fcc6 	bl	800b64c <__pow5mult>
 800acc0:	9a03      	ldr	r2, [sp, #12]
 800acc2:	4601      	mov	r1, r0
 800acc4:	4605      	mov	r5, r0
 800acc6:	4648      	mov	r0, r9
 800acc8:	f000 fc1e 	bl	800b508 <__multiply>
 800accc:	9903      	ldr	r1, [sp, #12]
 800acce:	4680      	mov	r8, r0
 800acd0:	4648      	mov	r0, r9
 800acd2:	f000 fb4f 	bl	800b374 <_Bfree>
 800acd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd8:	1b1b      	subs	r3, r3, r4
 800acda:	930a      	str	r3, [sp, #40]	@ 0x28
 800acdc:	f000 80b1 	beq.w	800ae42 <_dtoa_r+0x8f2>
 800ace0:	4641      	mov	r1, r8
 800ace2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ace4:	4648      	mov	r0, r9
 800ace6:	f000 fcb1 	bl	800b64c <__pow5mult>
 800acea:	9003      	str	r0, [sp, #12]
 800acec:	2101      	movs	r1, #1
 800acee:	4648      	mov	r0, r9
 800acf0:	f000 fbf4 	bl	800b4dc <__i2b>
 800acf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf6:	4604      	mov	r4, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 81d8 	beq.w	800b0ae <_dtoa_r+0xb5e>
 800acfe:	461a      	mov	r2, r3
 800ad00:	4601      	mov	r1, r0
 800ad02:	4648      	mov	r0, r9
 800ad04:	f000 fca2 	bl	800b64c <__pow5mult>
 800ad08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	f300 809f 	bgt.w	800ae50 <_dtoa_r+0x900>
 800ad12:	9b06      	ldr	r3, [sp, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f040 8097 	bne.w	800ae48 <_dtoa_r+0x8f8>
 800ad1a:	9b07      	ldr	r3, [sp, #28]
 800ad1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f040 8093 	bne.w	800ae4c <_dtoa_r+0x8fc>
 800ad26:	9b07      	ldr	r3, [sp, #28]
 800ad28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad2c:	0d1b      	lsrs	r3, r3, #20
 800ad2e:	051b      	lsls	r3, r3, #20
 800ad30:	b133      	cbz	r3, 800ad40 <_dtoa_r+0x7f0>
 800ad32:	9b04      	ldr	r3, [sp, #16]
 800ad34:	3301      	adds	r3, #1
 800ad36:	9304      	str	r3, [sp, #16]
 800ad38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3e:	2301      	movs	r3, #1
 800ad40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 81b8 	beq.w	800b0ba <_dtoa_r+0xb6a>
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad50:	6918      	ldr	r0, [r3, #16]
 800ad52:	f000 fb77 	bl	800b444 <__hi0bits>
 800ad56:	f1c0 0020 	rsb	r0, r0, #32
 800ad5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad5c:	4418      	add	r0, r3
 800ad5e:	f010 001f 	ands.w	r0, r0, #31
 800ad62:	f000 8082 	beq.w	800ae6a <_dtoa_r+0x91a>
 800ad66:	f1c0 0320 	rsb	r3, r0, #32
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	dd73      	ble.n	800ae56 <_dtoa_r+0x906>
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	f1c0 001c 	rsb	r0, r0, #28
 800ad74:	4403      	add	r3, r0
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad7a:	4406      	add	r6, r0
 800ad7c:	4403      	add	r3, r0
 800ad7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad80:	9b04      	ldr	r3, [sp, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	dd05      	ble.n	800ad92 <_dtoa_r+0x842>
 800ad86:	461a      	mov	r2, r3
 800ad88:	4648      	mov	r0, r9
 800ad8a:	9903      	ldr	r1, [sp, #12]
 800ad8c:	f000 fcb8 	bl	800b700 <__lshift>
 800ad90:	9003      	str	r0, [sp, #12]
 800ad92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dd05      	ble.n	800ada4 <_dtoa_r+0x854>
 800ad98:	4621      	mov	r1, r4
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	4648      	mov	r0, r9
 800ad9e:	f000 fcaf 	bl	800b700 <__lshift>
 800ada2:	4604      	mov	r4, r0
 800ada4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d061      	beq.n	800ae6e <_dtoa_r+0x91e>
 800adaa:	4621      	mov	r1, r4
 800adac:	9803      	ldr	r0, [sp, #12]
 800adae:	f000 fd13 	bl	800b7d8 <__mcmp>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	da5b      	bge.n	800ae6e <_dtoa_r+0x91e>
 800adb6:	2300      	movs	r3, #0
 800adb8:	220a      	movs	r2, #10
 800adba:	4648      	mov	r0, r9
 800adbc:	9903      	ldr	r1, [sp, #12]
 800adbe:	f000 fafb 	bl	800b3b8 <__multadd>
 800adc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc4:	f107 38ff 	add.w	r8, r7, #4294967295
 800adc8:	9003      	str	r0, [sp, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 8177 	beq.w	800b0be <_dtoa_r+0xb6e>
 800add0:	4629      	mov	r1, r5
 800add2:	2300      	movs	r3, #0
 800add4:	220a      	movs	r2, #10
 800add6:	4648      	mov	r0, r9
 800add8:	f000 faee 	bl	800b3b8 <__multadd>
 800addc:	f1bb 0f00 	cmp.w	fp, #0
 800ade0:	4605      	mov	r5, r0
 800ade2:	dc6f      	bgt.n	800aec4 <_dtoa_r+0x974>
 800ade4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	dc49      	bgt.n	800ae7e <_dtoa_r+0x92e>
 800adea:	e06b      	b.n	800aec4 <_dtoa_r+0x974>
 800adec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800adf2:	e73c      	b.n	800ac6e <_dtoa_r+0x71e>
 800adf4:	3fe00000 	.word	0x3fe00000
 800adf8:	40240000 	.word	0x40240000
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	1e5c      	subs	r4, r3, #1
 800ae00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae02:	42a3      	cmp	r3, r4
 800ae04:	db09      	blt.n	800ae1a <_dtoa_r+0x8ca>
 800ae06:	1b1c      	subs	r4, r3, r4
 800ae08:	9b08      	ldr	r3, [sp, #32]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f6bf af30 	bge.w	800ac70 <_dtoa_r+0x720>
 800ae10:	9b04      	ldr	r3, [sp, #16]
 800ae12:	9a08      	ldr	r2, [sp, #32]
 800ae14:	1a9e      	subs	r6, r3, r2
 800ae16:	2300      	movs	r3, #0
 800ae18:	e72b      	b.n	800ac72 <_dtoa_r+0x722>
 800ae1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae1e:	1ae3      	subs	r3, r4, r3
 800ae20:	441a      	add	r2, r3
 800ae22:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae24:	9e04      	ldr	r6, [sp, #16]
 800ae26:	2400      	movs	r4, #0
 800ae28:	9b08      	ldr	r3, [sp, #32]
 800ae2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae2c:	e721      	b.n	800ac72 <_dtoa_r+0x722>
 800ae2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae30:	9e04      	ldr	r6, [sp, #16]
 800ae32:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ae34:	e728      	b.n	800ac88 <_dtoa_r+0x738>
 800ae36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ae3a:	e751      	b.n	800ace0 <_dtoa_r+0x790>
 800ae3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae3e:	9903      	ldr	r1, [sp, #12]
 800ae40:	e750      	b.n	800ace4 <_dtoa_r+0x794>
 800ae42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae46:	e751      	b.n	800acec <_dtoa_r+0x79c>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	e779      	b.n	800ad40 <_dtoa_r+0x7f0>
 800ae4c:	9b06      	ldr	r3, [sp, #24]
 800ae4e:	e777      	b.n	800ad40 <_dtoa_r+0x7f0>
 800ae50:	2300      	movs	r3, #0
 800ae52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae54:	e779      	b.n	800ad4a <_dtoa_r+0x7fa>
 800ae56:	d093      	beq.n	800ad80 <_dtoa_r+0x830>
 800ae58:	9a04      	ldr	r2, [sp, #16]
 800ae5a:	331c      	adds	r3, #28
 800ae5c:	441a      	add	r2, r3
 800ae5e:	9204      	str	r2, [sp, #16]
 800ae60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae62:	441e      	add	r6, r3
 800ae64:	441a      	add	r2, r3
 800ae66:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae68:	e78a      	b.n	800ad80 <_dtoa_r+0x830>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	e7f4      	b.n	800ae58 <_dtoa_r+0x908>
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	46b8      	mov	r8, r7
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dc20      	bgt.n	800aeb8 <_dtoa_r+0x968>
 800ae76:	469b      	mov	fp, r3
 800ae78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	dd1e      	ble.n	800aebc <_dtoa_r+0x96c>
 800ae7e:	f1bb 0f00 	cmp.w	fp, #0
 800ae82:	f47f adb1 	bne.w	800a9e8 <_dtoa_r+0x498>
 800ae86:	4621      	mov	r1, r4
 800ae88:	465b      	mov	r3, fp
 800ae8a:	2205      	movs	r2, #5
 800ae8c:	4648      	mov	r0, r9
 800ae8e:	f000 fa93 	bl	800b3b8 <__multadd>
 800ae92:	4601      	mov	r1, r0
 800ae94:	4604      	mov	r4, r0
 800ae96:	9803      	ldr	r0, [sp, #12]
 800ae98:	f000 fc9e 	bl	800b7d8 <__mcmp>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f77f ada3 	ble.w	800a9e8 <_dtoa_r+0x498>
 800aea2:	4656      	mov	r6, sl
 800aea4:	2331      	movs	r3, #49	@ 0x31
 800aea6:	f108 0801 	add.w	r8, r8, #1
 800aeaa:	f806 3b01 	strb.w	r3, [r6], #1
 800aeae:	e59f      	b.n	800a9f0 <_dtoa_r+0x4a0>
 800aeb0:	46b8      	mov	r8, r7
 800aeb2:	9c08      	ldr	r4, [sp, #32]
 800aeb4:	4625      	mov	r5, r4
 800aeb6:	e7f4      	b.n	800aea2 <_dtoa_r+0x952>
 800aeb8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800aebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 8101 	beq.w	800b0c6 <_dtoa_r+0xb76>
 800aec4:	2e00      	cmp	r6, #0
 800aec6:	dd05      	ble.n	800aed4 <_dtoa_r+0x984>
 800aec8:	4629      	mov	r1, r5
 800aeca:	4632      	mov	r2, r6
 800aecc:	4648      	mov	r0, r9
 800aece:	f000 fc17 	bl	800b700 <__lshift>
 800aed2:	4605      	mov	r5, r0
 800aed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d05c      	beq.n	800af94 <_dtoa_r+0xa44>
 800aeda:	4648      	mov	r0, r9
 800aedc:	6869      	ldr	r1, [r5, #4]
 800aede:	f000 fa09 	bl	800b2f4 <_Balloc>
 800aee2:	4606      	mov	r6, r0
 800aee4:	b928      	cbnz	r0, 800aef2 <_dtoa_r+0x9a2>
 800aee6:	4602      	mov	r2, r0
 800aee8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aeec:	4b80      	ldr	r3, [pc, #512]	@ (800b0f0 <_dtoa_r+0xba0>)
 800aeee:	f7ff bb43 	b.w	800a578 <_dtoa_r+0x28>
 800aef2:	692a      	ldr	r2, [r5, #16]
 800aef4:	f105 010c 	add.w	r1, r5, #12
 800aef8:	3202      	adds	r2, #2
 800aefa:	0092      	lsls	r2, r2, #2
 800aefc:	300c      	adds	r0, #12
 800aefe:	f000 ff9d 	bl	800be3c <memcpy>
 800af02:	2201      	movs	r2, #1
 800af04:	4631      	mov	r1, r6
 800af06:	4648      	mov	r0, r9
 800af08:	f000 fbfa 	bl	800b700 <__lshift>
 800af0c:	462f      	mov	r7, r5
 800af0e:	4605      	mov	r5, r0
 800af10:	f10a 0301 	add.w	r3, sl, #1
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	eb0a 030b 	add.w	r3, sl, fp
 800af1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	9309      	str	r3, [sp, #36]	@ 0x24
 800af24:	9b04      	ldr	r3, [sp, #16]
 800af26:	4621      	mov	r1, r4
 800af28:	9803      	ldr	r0, [sp, #12]
 800af2a:	f103 3bff 	add.w	fp, r3, #4294967295
 800af2e:	f7ff fa84 	bl	800a43a <quorem>
 800af32:	4603      	mov	r3, r0
 800af34:	4639      	mov	r1, r7
 800af36:	3330      	adds	r3, #48	@ 0x30
 800af38:	9006      	str	r0, [sp, #24]
 800af3a:	9803      	ldr	r0, [sp, #12]
 800af3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af3e:	f000 fc4b 	bl	800b7d8 <__mcmp>
 800af42:	462a      	mov	r2, r5
 800af44:	9008      	str	r0, [sp, #32]
 800af46:	4621      	mov	r1, r4
 800af48:	4648      	mov	r0, r9
 800af4a:	f000 fc61 	bl	800b810 <__mdiff>
 800af4e:	68c2      	ldr	r2, [r0, #12]
 800af50:	4606      	mov	r6, r0
 800af52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af54:	bb02      	cbnz	r2, 800af98 <_dtoa_r+0xa48>
 800af56:	4601      	mov	r1, r0
 800af58:	9803      	ldr	r0, [sp, #12]
 800af5a:	f000 fc3d 	bl	800b7d8 <__mcmp>
 800af5e:	4602      	mov	r2, r0
 800af60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af62:	4631      	mov	r1, r6
 800af64:	4648      	mov	r0, r9
 800af66:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800af6a:	f000 fa03 	bl	800b374 <_Bfree>
 800af6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af72:	9e04      	ldr	r6, [sp, #16]
 800af74:	ea42 0103 	orr.w	r1, r2, r3
 800af78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7a:	4319      	orrs	r1, r3
 800af7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af7e:	d10d      	bne.n	800af9c <_dtoa_r+0xa4c>
 800af80:	2b39      	cmp	r3, #57	@ 0x39
 800af82:	d027      	beq.n	800afd4 <_dtoa_r+0xa84>
 800af84:	9a08      	ldr	r2, [sp, #32]
 800af86:	2a00      	cmp	r2, #0
 800af88:	dd01      	ble.n	800af8e <_dtoa_r+0xa3e>
 800af8a:	9b06      	ldr	r3, [sp, #24]
 800af8c:	3331      	adds	r3, #49	@ 0x31
 800af8e:	f88b 3000 	strb.w	r3, [fp]
 800af92:	e52e      	b.n	800a9f2 <_dtoa_r+0x4a2>
 800af94:	4628      	mov	r0, r5
 800af96:	e7b9      	b.n	800af0c <_dtoa_r+0x9bc>
 800af98:	2201      	movs	r2, #1
 800af9a:	e7e2      	b.n	800af62 <_dtoa_r+0xa12>
 800af9c:	9908      	ldr	r1, [sp, #32]
 800af9e:	2900      	cmp	r1, #0
 800afa0:	db04      	blt.n	800afac <_dtoa_r+0xa5c>
 800afa2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800afa4:	4301      	orrs	r1, r0
 800afa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afa8:	4301      	orrs	r1, r0
 800afaa:	d120      	bne.n	800afee <_dtoa_r+0xa9e>
 800afac:	2a00      	cmp	r2, #0
 800afae:	ddee      	ble.n	800af8e <_dtoa_r+0xa3e>
 800afb0:	2201      	movs	r2, #1
 800afb2:	9903      	ldr	r1, [sp, #12]
 800afb4:	4648      	mov	r0, r9
 800afb6:	9304      	str	r3, [sp, #16]
 800afb8:	f000 fba2 	bl	800b700 <__lshift>
 800afbc:	4621      	mov	r1, r4
 800afbe:	9003      	str	r0, [sp, #12]
 800afc0:	f000 fc0a 	bl	800b7d8 <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	dc02      	bgt.n	800afd0 <_dtoa_r+0xa80>
 800afca:	d1e0      	bne.n	800af8e <_dtoa_r+0xa3e>
 800afcc:	07da      	lsls	r2, r3, #31
 800afce:	d5de      	bpl.n	800af8e <_dtoa_r+0xa3e>
 800afd0:	2b39      	cmp	r3, #57	@ 0x39
 800afd2:	d1da      	bne.n	800af8a <_dtoa_r+0xa3a>
 800afd4:	2339      	movs	r3, #57	@ 0x39
 800afd6:	f88b 3000 	strb.w	r3, [fp]
 800afda:	4633      	mov	r3, r6
 800afdc:	461e      	mov	r6, r3
 800afde:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	2a39      	cmp	r2, #57	@ 0x39
 800afe6:	d04e      	beq.n	800b086 <_dtoa_r+0xb36>
 800afe8:	3201      	adds	r2, #1
 800afea:	701a      	strb	r2, [r3, #0]
 800afec:	e501      	b.n	800a9f2 <_dtoa_r+0x4a2>
 800afee:	2a00      	cmp	r2, #0
 800aff0:	dd03      	ble.n	800affa <_dtoa_r+0xaaa>
 800aff2:	2b39      	cmp	r3, #57	@ 0x39
 800aff4:	d0ee      	beq.n	800afd4 <_dtoa_r+0xa84>
 800aff6:	3301      	adds	r3, #1
 800aff8:	e7c9      	b.n	800af8e <_dtoa_r+0xa3e>
 800affa:	9a04      	ldr	r2, [sp, #16]
 800affc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800affe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b002:	428a      	cmp	r2, r1
 800b004:	d028      	beq.n	800b058 <_dtoa_r+0xb08>
 800b006:	2300      	movs	r3, #0
 800b008:	220a      	movs	r2, #10
 800b00a:	9903      	ldr	r1, [sp, #12]
 800b00c:	4648      	mov	r0, r9
 800b00e:	f000 f9d3 	bl	800b3b8 <__multadd>
 800b012:	42af      	cmp	r7, r5
 800b014:	9003      	str	r0, [sp, #12]
 800b016:	f04f 0300 	mov.w	r3, #0
 800b01a:	f04f 020a 	mov.w	r2, #10
 800b01e:	4639      	mov	r1, r7
 800b020:	4648      	mov	r0, r9
 800b022:	d107      	bne.n	800b034 <_dtoa_r+0xae4>
 800b024:	f000 f9c8 	bl	800b3b8 <__multadd>
 800b028:	4607      	mov	r7, r0
 800b02a:	4605      	mov	r5, r0
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	3301      	adds	r3, #1
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	e777      	b.n	800af24 <_dtoa_r+0x9d4>
 800b034:	f000 f9c0 	bl	800b3b8 <__multadd>
 800b038:	4629      	mov	r1, r5
 800b03a:	4607      	mov	r7, r0
 800b03c:	2300      	movs	r3, #0
 800b03e:	220a      	movs	r2, #10
 800b040:	4648      	mov	r0, r9
 800b042:	f000 f9b9 	bl	800b3b8 <__multadd>
 800b046:	4605      	mov	r5, r0
 800b048:	e7f0      	b.n	800b02c <_dtoa_r+0xadc>
 800b04a:	f1bb 0f00 	cmp.w	fp, #0
 800b04e:	bfcc      	ite	gt
 800b050:	465e      	movgt	r6, fp
 800b052:	2601      	movle	r6, #1
 800b054:	2700      	movs	r7, #0
 800b056:	4456      	add	r6, sl
 800b058:	2201      	movs	r2, #1
 800b05a:	9903      	ldr	r1, [sp, #12]
 800b05c:	4648      	mov	r0, r9
 800b05e:	9304      	str	r3, [sp, #16]
 800b060:	f000 fb4e 	bl	800b700 <__lshift>
 800b064:	4621      	mov	r1, r4
 800b066:	9003      	str	r0, [sp, #12]
 800b068:	f000 fbb6 	bl	800b7d8 <__mcmp>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	dcb4      	bgt.n	800afda <_dtoa_r+0xa8a>
 800b070:	d102      	bne.n	800b078 <_dtoa_r+0xb28>
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	07db      	lsls	r3, r3, #31
 800b076:	d4b0      	bmi.n	800afda <_dtoa_r+0xa8a>
 800b078:	4633      	mov	r3, r6
 800b07a:	461e      	mov	r6, r3
 800b07c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b080:	2a30      	cmp	r2, #48	@ 0x30
 800b082:	d0fa      	beq.n	800b07a <_dtoa_r+0xb2a>
 800b084:	e4b5      	b.n	800a9f2 <_dtoa_r+0x4a2>
 800b086:	459a      	cmp	sl, r3
 800b088:	d1a8      	bne.n	800afdc <_dtoa_r+0xa8c>
 800b08a:	2331      	movs	r3, #49	@ 0x31
 800b08c:	f108 0801 	add.w	r8, r8, #1
 800b090:	f88a 3000 	strb.w	r3, [sl]
 800b094:	e4ad      	b.n	800a9f2 <_dtoa_r+0x4a2>
 800b096:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b098:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b0f4 <_dtoa_r+0xba4>
 800b09c:	b11b      	cbz	r3, 800b0a6 <_dtoa_r+0xb56>
 800b09e:	f10a 0308 	add.w	r3, sl, #8
 800b0a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b0a4:	6013      	str	r3, [r2, #0]
 800b0a6:	4650      	mov	r0, sl
 800b0a8:	b017      	add	sp, #92	@ 0x5c
 800b0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	f77f ae2e 	ble.w	800ad12 <_dtoa_r+0x7c2>
 800b0b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e64d      	b.n	800ad5a <_dtoa_r+0x80a>
 800b0be:	f1bb 0f00 	cmp.w	fp, #0
 800b0c2:	f77f aed9 	ble.w	800ae78 <_dtoa_r+0x928>
 800b0c6:	4656      	mov	r6, sl
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	9803      	ldr	r0, [sp, #12]
 800b0cc:	f7ff f9b5 	bl	800a43a <quorem>
 800b0d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b0d4:	f806 3b01 	strb.w	r3, [r6], #1
 800b0d8:	eba6 020a 	sub.w	r2, r6, sl
 800b0dc:	4593      	cmp	fp, r2
 800b0de:	ddb4      	ble.n	800b04a <_dtoa_r+0xafa>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	220a      	movs	r2, #10
 800b0e4:	4648      	mov	r0, r9
 800b0e6:	9903      	ldr	r1, [sp, #12]
 800b0e8:	f000 f966 	bl	800b3b8 <__multadd>
 800b0ec:	9003      	str	r0, [sp, #12]
 800b0ee:	e7eb      	b.n	800b0c8 <_dtoa_r+0xb78>
 800b0f0:	0800c652 	.word	0x0800c652
 800b0f4:	0800c5d6 	.word	0x0800c5d6

0800b0f8 <_free_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	4605      	mov	r5, r0
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	d040      	beq.n	800b182 <_free_r+0x8a>
 800b100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b104:	1f0c      	subs	r4, r1, #4
 800b106:	2b00      	cmp	r3, #0
 800b108:	bfb8      	it	lt
 800b10a:	18e4      	addlt	r4, r4, r3
 800b10c:	f000 f8e6 	bl	800b2dc <__malloc_lock>
 800b110:	4a1c      	ldr	r2, [pc, #112]	@ (800b184 <_free_r+0x8c>)
 800b112:	6813      	ldr	r3, [r2, #0]
 800b114:	b933      	cbnz	r3, 800b124 <_free_r+0x2c>
 800b116:	6063      	str	r3, [r4, #4]
 800b118:	6014      	str	r4, [r2, #0]
 800b11a:	4628      	mov	r0, r5
 800b11c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b120:	f000 b8e2 	b.w	800b2e8 <__malloc_unlock>
 800b124:	42a3      	cmp	r3, r4
 800b126:	d908      	bls.n	800b13a <_free_r+0x42>
 800b128:	6820      	ldr	r0, [r4, #0]
 800b12a:	1821      	adds	r1, r4, r0
 800b12c:	428b      	cmp	r3, r1
 800b12e:	bf01      	itttt	eq
 800b130:	6819      	ldreq	r1, [r3, #0]
 800b132:	685b      	ldreq	r3, [r3, #4]
 800b134:	1809      	addeq	r1, r1, r0
 800b136:	6021      	streq	r1, [r4, #0]
 800b138:	e7ed      	b.n	800b116 <_free_r+0x1e>
 800b13a:	461a      	mov	r2, r3
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	b10b      	cbz	r3, 800b144 <_free_r+0x4c>
 800b140:	42a3      	cmp	r3, r4
 800b142:	d9fa      	bls.n	800b13a <_free_r+0x42>
 800b144:	6811      	ldr	r1, [r2, #0]
 800b146:	1850      	adds	r0, r2, r1
 800b148:	42a0      	cmp	r0, r4
 800b14a:	d10b      	bne.n	800b164 <_free_r+0x6c>
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	4401      	add	r1, r0
 800b150:	1850      	adds	r0, r2, r1
 800b152:	4283      	cmp	r3, r0
 800b154:	6011      	str	r1, [r2, #0]
 800b156:	d1e0      	bne.n	800b11a <_free_r+0x22>
 800b158:	6818      	ldr	r0, [r3, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	4408      	add	r0, r1
 800b15e:	6010      	str	r0, [r2, #0]
 800b160:	6053      	str	r3, [r2, #4]
 800b162:	e7da      	b.n	800b11a <_free_r+0x22>
 800b164:	d902      	bls.n	800b16c <_free_r+0x74>
 800b166:	230c      	movs	r3, #12
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	e7d6      	b.n	800b11a <_free_r+0x22>
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	1821      	adds	r1, r4, r0
 800b170:	428b      	cmp	r3, r1
 800b172:	bf01      	itttt	eq
 800b174:	6819      	ldreq	r1, [r3, #0]
 800b176:	685b      	ldreq	r3, [r3, #4]
 800b178:	1809      	addeq	r1, r1, r0
 800b17a:	6021      	streq	r1, [r4, #0]
 800b17c:	6063      	str	r3, [r4, #4]
 800b17e:	6054      	str	r4, [r2, #4]
 800b180:	e7cb      	b.n	800b11a <_free_r+0x22>
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	200016c4 	.word	0x200016c4

0800b188 <malloc>:
 800b188:	4b02      	ldr	r3, [pc, #8]	@ (800b194 <malloc+0xc>)
 800b18a:	4601      	mov	r1, r0
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	f000 b825 	b.w	800b1dc <_malloc_r>
 800b192:	bf00      	nop
 800b194:	20000188 	.word	0x20000188

0800b198 <sbrk_aligned>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	4e0f      	ldr	r6, [pc, #60]	@ (800b1d8 <sbrk_aligned+0x40>)
 800b19c:	460c      	mov	r4, r1
 800b19e:	6831      	ldr	r1, [r6, #0]
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	b911      	cbnz	r1, 800b1aa <sbrk_aligned+0x12>
 800b1a4:	f000 fe3a 	bl	800be1c <_sbrk_r>
 800b1a8:	6030      	str	r0, [r6, #0]
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	f000 fe35 	bl	800be1c <_sbrk_r>
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	d103      	bne.n	800b1be <sbrk_aligned+0x26>
 800b1b6:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
 800b1be:	1cc4      	adds	r4, r0, #3
 800b1c0:	f024 0403 	bic.w	r4, r4, #3
 800b1c4:	42a0      	cmp	r0, r4
 800b1c6:	d0f8      	beq.n	800b1ba <sbrk_aligned+0x22>
 800b1c8:	1a21      	subs	r1, r4, r0
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f000 fe26 	bl	800be1c <_sbrk_r>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d1f2      	bne.n	800b1ba <sbrk_aligned+0x22>
 800b1d4:	e7ef      	b.n	800b1b6 <sbrk_aligned+0x1e>
 800b1d6:	bf00      	nop
 800b1d8:	200016c0 	.word	0x200016c0

0800b1dc <_malloc_r>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	1ccd      	adds	r5, r1, #3
 800b1e2:	f025 0503 	bic.w	r5, r5, #3
 800b1e6:	3508      	adds	r5, #8
 800b1e8:	2d0c      	cmp	r5, #12
 800b1ea:	bf38      	it	cc
 800b1ec:	250c      	movcc	r5, #12
 800b1ee:	2d00      	cmp	r5, #0
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	db01      	blt.n	800b1f8 <_malloc_r+0x1c>
 800b1f4:	42a9      	cmp	r1, r5
 800b1f6:	d904      	bls.n	800b202 <_malloc_r+0x26>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	6033      	str	r3, [r6, #0]
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2d8 <_malloc_r+0xfc>
 800b206:	f000 f869 	bl	800b2dc <__malloc_lock>
 800b20a:	f8d8 3000 	ldr.w	r3, [r8]
 800b20e:	461c      	mov	r4, r3
 800b210:	bb44      	cbnz	r4, 800b264 <_malloc_r+0x88>
 800b212:	4629      	mov	r1, r5
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ffbf 	bl	800b198 <sbrk_aligned>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	4604      	mov	r4, r0
 800b21e:	d158      	bne.n	800b2d2 <_malloc_r+0xf6>
 800b220:	f8d8 4000 	ldr.w	r4, [r8]
 800b224:	4627      	mov	r7, r4
 800b226:	2f00      	cmp	r7, #0
 800b228:	d143      	bne.n	800b2b2 <_malloc_r+0xd6>
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d04b      	beq.n	800b2c6 <_malloc_r+0xea>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	4639      	mov	r1, r7
 800b232:	4630      	mov	r0, r6
 800b234:	eb04 0903 	add.w	r9, r4, r3
 800b238:	f000 fdf0 	bl	800be1c <_sbrk_r>
 800b23c:	4581      	cmp	r9, r0
 800b23e:	d142      	bne.n	800b2c6 <_malloc_r+0xea>
 800b240:	6821      	ldr	r1, [r4, #0]
 800b242:	4630      	mov	r0, r6
 800b244:	1a6d      	subs	r5, r5, r1
 800b246:	4629      	mov	r1, r5
 800b248:	f7ff ffa6 	bl	800b198 <sbrk_aligned>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d03a      	beq.n	800b2c6 <_malloc_r+0xea>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	442b      	add	r3, r5
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	f8d8 3000 	ldr.w	r3, [r8]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	bb62      	cbnz	r2, 800b2b8 <_malloc_r+0xdc>
 800b25e:	f8c8 7000 	str.w	r7, [r8]
 800b262:	e00f      	b.n	800b284 <_malloc_r+0xa8>
 800b264:	6822      	ldr	r2, [r4, #0]
 800b266:	1b52      	subs	r2, r2, r5
 800b268:	d420      	bmi.n	800b2ac <_malloc_r+0xd0>
 800b26a:	2a0b      	cmp	r2, #11
 800b26c:	d917      	bls.n	800b29e <_malloc_r+0xc2>
 800b26e:	1961      	adds	r1, r4, r5
 800b270:	42a3      	cmp	r3, r4
 800b272:	6025      	str	r5, [r4, #0]
 800b274:	bf18      	it	ne
 800b276:	6059      	strne	r1, [r3, #4]
 800b278:	6863      	ldr	r3, [r4, #4]
 800b27a:	bf08      	it	eq
 800b27c:	f8c8 1000 	streq.w	r1, [r8]
 800b280:	5162      	str	r2, [r4, r5]
 800b282:	604b      	str	r3, [r1, #4]
 800b284:	4630      	mov	r0, r6
 800b286:	f000 f82f 	bl	800b2e8 <__malloc_unlock>
 800b28a:	f104 000b 	add.w	r0, r4, #11
 800b28e:	1d23      	adds	r3, r4, #4
 800b290:	f020 0007 	bic.w	r0, r0, #7
 800b294:	1ac2      	subs	r2, r0, r3
 800b296:	bf1c      	itt	ne
 800b298:	1a1b      	subne	r3, r3, r0
 800b29a:	50a3      	strne	r3, [r4, r2]
 800b29c:	e7af      	b.n	800b1fe <_malloc_r+0x22>
 800b29e:	6862      	ldr	r2, [r4, #4]
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	bf0c      	ite	eq
 800b2a4:	f8c8 2000 	streq.w	r2, [r8]
 800b2a8:	605a      	strne	r2, [r3, #4]
 800b2aa:	e7eb      	b.n	800b284 <_malloc_r+0xa8>
 800b2ac:	4623      	mov	r3, r4
 800b2ae:	6864      	ldr	r4, [r4, #4]
 800b2b0:	e7ae      	b.n	800b210 <_malloc_r+0x34>
 800b2b2:	463c      	mov	r4, r7
 800b2b4:	687f      	ldr	r7, [r7, #4]
 800b2b6:	e7b6      	b.n	800b226 <_malloc_r+0x4a>
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d1fb      	bne.n	800b2b8 <_malloc_r+0xdc>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	6053      	str	r3, [r2, #4]
 800b2c4:	e7de      	b.n	800b284 <_malloc_r+0xa8>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	6033      	str	r3, [r6, #0]
 800b2cc:	f000 f80c 	bl	800b2e8 <__malloc_unlock>
 800b2d0:	e794      	b.n	800b1fc <_malloc_r+0x20>
 800b2d2:	6005      	str	r5, [r0, #0]
 800b2d4:	e7d6      	b.n	800b284 <_malloc_r+0xa8>
 800b2d6:	bf00      	nop
 800b2d8:	200016c4 	.word	0x200016c4

0800b2dc <__malloc_lock>:
 800b2dc:	4801      	ldr	r0, [pc, #4]	@ (800b2e4 <__malloc_lock+0x8>)
 800b2de:	f7ff b89c 	b.w	800a41a <__retarget_lock_acquire_recursive>
 800b2e2:	bf00      	nop
 800b2e4:	200016bc 	.word	0x200016bc

0800b2e8 <__malloc_unlock>:
 800b2e8:	4801      	ldr	r0, [pc, #4]	@ (800b2f0 <__malloc_unlock+0x8>)
 800b2ea:	f7ff b897 	b.w	800a41c <__retarget_lock_release_recursive>
 800b2ee:	bf00      	nop
 800b2f0:	200016bc 	.word	0x200016bc

0800b2f4 <_Balloc>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	69c6      	ldr	r6, [r0, #28]
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	460d      	mov	r5, r1
 800b2fc:	b976      	cbnz	r6, 800b31c <_Balloc+0x28>
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7ff ff42 	bl	800b188 <malloc>
 800b304:	4602      	mov	r2, r0
 800b306:	61e0      	str	r0, [r4, #28]
 800b308:	b920      	cbnz	r0, 800b314 <_Balloc+0x20>
 800b30a:	216b      	movs	r1, #107	@ 0x6b
 800b30c:	4b17      	ldr	r3, [pc, #92]	@ (800b36c <_Balloc+0x78>)
 800b30e:	4818      	ldr	r0, [pc, #96]	@ (800b370 <_Balloc+0x7c>)
 800b310:	f000 fda2 	bl	800be58 <__assert_func>
 800b314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b318:	6006      	str	r6, [r0, #0]
 800b31a:	60c6      	str	r6, [r0, #12]
 800b31c:	69e6      	ldr	r6, [r4, #28]
 800b31e:	68f3      	ldr	r3, [r6, #12]
 800b320:	b183      	cbz	r3, 800b344 <_Balloc+0x50>
 800b322:	69e3      	ldr	r3, [r4, #28]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b32a:	b9b8      	cbnz	r0, 800b35c <_Balloc+0x68>
 800b32c:	2101      	movs	r1, #1
 800b32e:	fa01 f605 	lsl.w	r6, r1, r5
 800b332:	1d72      	adds	r2, r6, #5
 800b334:	4620      	mov	r0, r4
 800b336:	0092      	lsls	r2, r2, #2
 800b338:	f000 fdac 	bl	800be94 <_calloc_r>
 800b33c:	b160      	cbz	r0, 800b358 <_Balloc+0x64>
 800b33e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b342:	e00e      	b.n	800b362 <_Balloc+0x6e>
 800b344:	2221      	movs	r2, #33	@ 0x21
 800b346:	2104      	movs	r1, #4
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 fda3 	bl	800be94 <_calloc_r>
 800b34e:	69e3      	ldr	r3, [r4, #28]
 800b350:	60f0      	str	r0, [r6, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e4      	bne.n	800b322 <_Balloc+0x2e>
 800b358:	2000      	movs	r0, #0
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	6802      	ldr	r2, [r0, #0]
 800b35e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b362:	2300      	movs	r3, #0
 800b364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b368:	e7f7      	b.n	800b35a <_Balloc+0x66>
 800b36a:	bf00      	nop
 800b36c:	0800c5e3 	.word	0x0800c5e3
 800b370:	0800c663 	.word	0x0800c663

0800b374 <_Bfree>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	69c6      	ldr	r6, [r0, #28]
 800b378:	4605      	mov	r5, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	b976      	cbnz	r6, 800b39c <_Bfree+0x28>
 800b37e:	2010      	movs	r0, #16
 800b380:	f7ff ff02 	bl	800b188 <malloc>
 800b384:	4602      	mov	r2, r0
 800b386:	61e8      	str	r0, [r5, #28]
 800b388:	b920      	cbnz	r0, 800b394 <_Bfree+0x20>
 800b38a:	218f      	movs	r1, #143	@ 0x8f
 800b38c:	4b08      	ldr	r3, [pc, #32]	@ (800b3b0 <_Bfree+0x3c>)
 800b38e:	4809      	ldr	r0, [pc, #36]	@ (800b3b4 <_Bfree+0x40>)
 800b390:	f000 fd62 	bl	800be58 <__assert_func>
 800b394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b398:	6006      	str	r6, [r0, #0]
 800b39a:	60c6      	str	r6, [r0, #12]
 800b39c:	b13c      	cbz	r4, 800b3ae <_Bfree+0x3a>
 800b39e:	69eb      	ldr	r3, [r5, #28]
 800b3a0:	6862      	ldr	r2, [r4, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3a8:	6021      	str	r1, [r4, #0]
 800b3aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	0800c5e3 	.word	0x0800c5e3
 800b3b4:	0800c663 	.word	0x0800c663

0800b3b8 <__multadd>:
 800b3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	4607      	mov	r7, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	461e      	mov	r6, r3
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	690d      	ldr	r5, [r1, #16]
 800b3c6:	f101 0c14 	add.w	ip, r1, #20
 800b3ca:	f8dc 3000 	ldr.w	r3, [ip]
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	b299      	uxth	r1, r3
 800b3d2:	fb02 6101 	mla	r1, r2, r1, r6
 800b3d6:	0c1e      	lsrs	r6, r3, #16
 800b3d8:	0c0b      	lsrs	r3, r1, #16
 800b3da:	fb02 3306 	mla	r3, r2, r6, r3
 800b3de:	b289      	uxth	r1, r1
 800b3e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3e4:	4285      	cmp	r5, r0
 800b3e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3ea:	f84c 1b04 	str.w	r1, [ip], #4
 800b3ee:	dcec      	bgt.n	800b3ca <__multadd+0x12>
 800b3f0:	b30e      	cbz	r6, 800b436 <__multadd+0x7e>
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	42ab      	cmp	r3, r5
 800b3f6:	dc19      	bgt.n	800b42c <__multadd+0x74>
 800b3f8:	6861      	ldr	r1, [r4, #4]
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	f7ff ff79 	bl	800b2f4 <_Balloc>
 800b402:	4680      	mov	r8, r0
 800b404:	b928      	cbnz	r0, 800b412 <__multadd+0x5a>
 800b406:	4602      	mov	r2, r0
 800b408:	21ba      	movs	r1, #186	@ 0xba
 800b40a:	4b0c      	ldr	r3, [pc, #48]	@ (800b43c <__multadd+0x84>)
 800b40c:	480c      	ldr	r0, [pc, #48]	@ (800b440 <__multadd+0x88>)
 800b40e:	f000 fd23 	bl	800be58 <__assert_func>
 800b412:	6922      	ldr	r2, [r4, #16]
 800b414:	f104 010c 	add.w	r1, r4, #12
 800b418:	3202      	adds	r2, #2
 800b41a:	0092      	lsls	r2, r2, #2
 800b41c:	300c      	adds	r0, #12
 800b41e:	f000 fd0d 	bl	800be3c <memcpy>
 800b422:	4621      	mov	r1, r4
 800b424:	4638      	mov	r0, r7
 800b426:	f7ff ffa5 	bl	800b374 <_Bfree>
 800b42a:	4644      	mov	r4, r8
 800b42c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b430:	3501      	adds	r5, #1
 800b432:	615e      	str	r6, [r3, #20]
 800b434:	6125      	str	r5, [r4, #16]
 800b436:	4620      	mov	r0, r4
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43c:	0800c652 	.word	0x0800c652
 800b440:	0800c663 	.word	0x0800c663

0800b444 <__hi0bits>:
 800b444:	4603      	mov	r3, r0
 800b446:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b44a:	bf3a      	itte	cc
 800b44c:	0403      	lslcc	r3, r0, #16
 800b44e:	2010      	movcc	r0, #16
 800b450:	2000      	movcs	r0, #0
 800b452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b456:	bf3c      	itt	cc
 800b458:	021b      	lslcc	r3, r3, #8
 800b45a:	3008      	addcc	r0, #8
 800b45c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b460:	bf3c      	itt	cc
 800b462:	011b      	lslcc	r3, r3, #4
 800b464:	3004      	addcc	r0, #4
 800b466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b46a:	bf3c      	itt	cc
 800b46c:	009b      	lslcc	r3, r3, #2
 800b46e:	3002      	addcc	r0, #2
 800b470:	2b00      	cmp	r3, #0
 800b472:	db05      	blt.n	800b480 <__hi0bits+0x3c>
 800b474:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b478:	f100 0001 	add.w	r0, r0, #1
 800b47c:	bf08      	it	eq
 800b47e:	2020      	moveq	r0, #32
 800b480:	4770      	bx	lr

0800b482 <__lo0bits>:
 800b482:	6803      	ldr	r3, [r0, #0]
 800b484:	4602      	mov	r2, r0
 800b486:	f013 0007 	ands.w	r0, r3, #7
 800b48a:	d00b      	beq.n	800b4a4 <__lo0bits+0x22>
 800b48c:	07d9      	lsls	r1, r3, #31
 800b48e:	d421      	bmi.n	800b4d4 <__lo0bits+0x52>
 800b490:	0798      	lsls	r0, r3, #30
 800b492:	bf49      	itett	mi
 800b494:	085b      	lsrmi	r3, r3, #1
 800b496:	089b      	lsrpl	r3, r3, #2
 800b498:	2001      	movmi	r0, #1
 800b49a:	6013      	strmi	r3, [r2, #0]
 800b49c:	bf5c      	itt	pl
 800b49e:	2002      	movpl	r0, #2
 800b4a0:	6013      	strpl	r3, [r2, #0]
 800b4a2:	4770      	bx	lr
 800b4a4:	b299      	uxth	r1, r3
 800b4a6:	b909      	cbnz	r1, 800b4ac <__lo0bits+0x2a>
 800b4a8:	2010      	movs	r0, #16
 800b4aa:	0c1b      	lsrs	r3, r3, #16
 800b4ac:	b2d9      	uxtb	r1, r3
 800b4ae:	b909      	cbnz	r1, 800b4b4 <__lo0bits+0x32>
 800b4b0:	3008      	adds	r0, #8
 800b4b2:	0a1b      	lsrs	r3, r3, #8
 800b4b4:	0719      	lsls	r1, r3, #28
 800b4b6:	bf04      	itt	eq
 800b4b8:	091b      	lsreq	r3, r3, #4
 800b4ba:	3004      	addeq	r0, #4
 800b4bc:	0799      	lsls	r1, r3, #30
 800b4be:	bf04      	itt	eq
 800b4c0:	089b      	lsreq	r3, r3, #2
 800b4c2:	3002      	addeq	r0, #2
 800b4c4:	07d9      	lsls	r1, r3, #31
 800b4c6:	d403      	bmi.n	800b4d0 <__lo0bits+0x4e>
 800b4c8:	085b      	lsrs	r3, r3, #1
 800b4ca:	f100 0001 	add.w	r0, r0, #1
 800b4ce:	d003      	beq.n	800b4d8 <__lo0bits+0x56>
 800b4d0:	6013      	str	r3, [r2, #0]
 800b4d2:	4770      	bx	lr
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	4770      	bx	lr
 800b4d8:	2020      	movs	r0, #32
 800b4da:	4770      	bx	lr

0800b4dc <__i2b>:
 800b4dc:	b510      	push	{r4, lr}
 800b4de:	460c      	mov	r4, r1
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	f7ff ff07 	bl	800b2f4 <_Balloc>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	b928      	cbnz	r0, 800b4f6 <__i2b+0x1a>
 800b4ea:	f240 1145 	movw	r1, #325	@ 0x145
 800b4ee:	4b04      	ldr	r3, [pc, #16]	@ (800b500 <__i2b+0x24>)
 800b4f0:	4804      	ldr	r0, [pc, #16]	@ (800b504 <__i2b+0x28>)
 800b4f2:	f000 fcb1 	bl	800be58 <__assert_func>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	6144      	str	r4, [r0, #20]
 800b4fa:	6103      	str	r3, [r0, #16]
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	bf00      	nop
 800b500:	0800c652 	.word	0x0800c652
 800b504:	0800c663 	.word	0x0800c663

0800b508 <__multiply>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	4617      	mov	r7, r2
 800b50e:	690a      	ldr	r2, [r1, #16]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	4689      	mov	r9, r1
 800b514:	429a      	cmp	r2, r3
 800b516:	bfa2      	ittt	ge
 800b518:	463b      	movge	r3, r7
 800b51a:	460f      	movge	r7, r1
 800b51c:	4699      	movge	r9, r3
 800b51e:	693d      	ldr	r5, [r7, #16]
 800b520:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	6879      	ldr	r1, [r7, #4]
 800b528:	eb05 060a 	add.w	r6, r5, sl
 800b52c:	42b3      	cmp	r3, r6
 800b52e:	b085      	sub	sp, #20
 800b530:	bfb8      	it	lt
 800b532:	3101      	addlt	r1, #1
 800b534:	f7ff fede 	bl	800b2f4 <_Balloc>
 800b538:	b930      	cbnz	r0, 800b548 <__multiply+0x40>
 800b53a:	4602      	mov	r2, r0
 800b53c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b540:	4b40      	ldr	r3, [pc, #256]	@ (800b644 <__multiply+0x13c>)
 800b542:	4841      	ldr	r0, [pc, #260]	@ (800b648 <__multiply+0x140>)
 800b544:	f000 fc88 	bl	800be58 <__assert_func>
 800b548:	f100 0414 	add.w	r4, r0, #20
 800b54c:	4623      	mov	r3, r4
 800b54e:	2200      	movs	r2, #0
 800b550:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b554:	4573      	cmp	r3, lr
 800b556:	d320      	bcc.n	800b59a <__multiply+0x92>
 800b558:	f107 0814 	add.w	r8, r7, #20
 800b55c:	f109 0114 	add.w	r1, r9, #20
 800b560:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b564:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b568:	9302      	str	r3, [sp, #8]
 800b56a:	1beb      	subs	r3, r5, r7
 800b56c:	3b15      	subs	r3, #21
 800b56e:	f023 0303 	bic.w	r3, r3, #3
 800b572:	3304      	adds	r3, #4
 800b574:	3715      	adds	r7, #21
 800b576:	42bd      	cmp	r5, r7
 800b578:	bf38      	it	cc
 800b57a:	2304      	movcc	r3, #4
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	9b02      	ldr	r3, [sp, #8]
 800b580:	9103      	str	r1, [sp, #12]
 800b582:	428b      	cmp	r3, r1
 800b584:	d80c      	bhi.n	800b5a0 <__multiply+0x98>
 800b586:	2e00      	cmp	r6, #0
 800b588:	dd03      	ble.n	800b592 <__multiply+0x8a>
 800b58a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d055      	beq.n	800b63e <__multiply+0x136>
 800b592:	6106      	str	r6, [r0, #16]
 800b594:	b005      	add	sp, #20
 800b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59a:	f843 2b04 	str.w	r2, [r3], #4
 800b59e:	e7d9      	b.n	800b554 <__multiply+0x4c>
 800b5a0:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5a4:	f1ba 0f00 	cmp.w	sl, #0
 800b5a8:	d01f      	beq.n	800b5ea <__multiply+0xe2>
 800b5aa:	46c4      	mov	ip, r8
 800b5ac:	46a1      	mov	r9, r4
 800b5ae:	2700      	movs	r7, #0
 800b5b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5b4:	f8d9 3000 	ldr.w	r3, [r9]
 800b5b8:	fa1f fb82 	uxth.w	fp, r2
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	fb0a 330b 	mla	r3, sl, fp, r3
 800b5c2:	443b      	add	r3, r7
 800b5c4:	f8d9 7000 	ldr.w	r7, [r9]
 800b5c8:	0c12      	lsrs	r2, r2, #16
 800b5ca:	0c3f      	lsrs	r7, r7, #16
 800b5cc:	fb0a 7202 	mla	r2, sl, r2, r7
 800b5d0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5da:	4565      	cmp	r5, ip
 800b5dc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b5e0:	f849 3b04 	str.w	r3, [r9], #4
 800b5e4:	d8e4      	bhi.n	800b5b0 <__multiply+0xa8>
 800b5e6:	9b01      	ldr	r3, [sp, #4]
 800b5e8:	50e7      	str	r7, [r4, r3]
 800b5ea:	9b03      	ldr	r3, [sp, #12]
 800b5ec:	3104      	adds	r1, #4
 800b5ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b5f2:	f1b9 0f00 	cmp.w	r9, #0
 800b5f6:	d020      	beq.n	800b63a <__multiply+0x132>
 800b5f8:	4647      	mov	r7, r8
 800b5fa:	46a4      	mov	ip, r4
 800b5fc:	f04f 0a00 	mov.w	sl, #0
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	f8b7 b000 	ldrh.w	fp, [r7]
 800b606:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	fb09 220b 	mla	r2, r9, fp, r2
 800b610:	4452      	add	r2, sl
 800b612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b616:	f84c 3b04 	str.w	r3, [ip], #4
 800b61a:	f857 3b04 	ldr.w	r3, [r7], #4
 800b61e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b622:	f8bc 3000 	ldrh.w	r3, [ip]
 800b626:	42bd      	cmp	r5, r7
 800b628:	fb09 330a 	mla	r3, r9, sl, r3
 800b62c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b630:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b634:	d8e5      	bhi.n	800b602 <__multiply+0xfa>
 800b636:	9a01      	ldr	r2, [sp, #4]
 800b638:	50a3      	str	r3, [r4, r2]
 800b63a:	3404      	adds	r4, #4
 800b63c:	e79f      	b.n	800b57e <__multiply+0x76>
 800b63e:	3e01      	subs	r6, #1
 800b640:	e7a1      	b.n	800b586 <__multiply+0x7e>
 800b642:	bf00      	nop
 800b644:	0800c652 	.word	0x0800c652
 800b648:	0800c663 	.word	0x0800c663

0800b64c <__pow5mult>:
 800b64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b650:	4615      	mov	r5, r2
 800b652:	f012 0203 	ands.w	r2, r2, #3
 800b656:	4607      	mov	r7, r0
 800b658:	460e      	mov	r6, r1
 800b65a:	d007      	beq.n	800b66c <__pow5mult+0x20>
 800b65c:	4c25      	ldr	r4, [pc, #148]	@ (800b6f4 <__pow5mult+0xa8>)
 800b65e:	3a01      	subs	r2, #1
 800b660:	2300      	movs	r3, #0
 800b662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b666:	f7ff fea7 	bl	800b3b8 <__multadd>
 800b66a:	4606      	mov	r6, r0
 800b66c:	10ad      	asrs	r5, r5, #2
 800b66e:	d03d      	beq.n	800b6ec <__pow5mult+0xa0>
 800b670:	69fc      	ldr	r4, [r7, #28]
 800b672:	b97c      	cbnz	r4, 800b694 <__pow5mult+0x48>
 800b674:	2010      	movs	r0, #16
 800b676:	f7ff fd87 	bl	800b188 <malloc>
 800b67a:	4602      	mov	r2, r0
 800b67c:	61f8      	str	r0, [r7, #28]
 800b67e:	b928      	cbnz	r0, 800b68c <__pow5mult+0x40>
 800b680:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b684:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f8 <__pow5mult+0xac>)
 800b686:	481d      	ldr	r0, [pc, #116]	@ (800b6fc <__pow5mult+0xb0>)
 800b688:	f000 fbe6 	bl	800be58 <__assert_func>
 800b68c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b690:	6004      	str	r4, [r0, #0]
 800b692:	60c4      	str	r4, [r0, #12]
 800b694:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b69c:	b94c      	cbnz	r4, 800b6b2 <__pow5mult+0x66>
 800b69e:	f240 2171 	movw	r1, #625	@ 0x271
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f7ff ff1a 	bl	800b4dc <__i2b>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	f04f 0900 	mov.w	r9, #0
 800b6b6:	07eb      	lsls	r3, r5, #31
 800b6b8:	d50a      	bpl.n	800b6d0 <__pow5mult+0x84>
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4638      	mov	r0, r7
 800b6c0:	f7ff ff22 	bl	800b508 <__multiply>
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f7ff fe53 	bl	800b374 <_Bfree>
 800b6ce:	4646      	mov	r6, r8
 800b6d0:	106d      	asrs	r5, r5, #1
 800b6d2:	d00b      	beq.n	800b6ec <__pow5mult+0xa0>
 800b6d4:	6820      	ldr	r0, [r4, #0]
 800b6d6:	b938      	cbnz	r0, 800b6e8 <__pow5mult+0x9c>
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f7ff ff13 	bl	800b508 <__multiply>
 800b6e2:	6020      	str	r0, [r4, #0]
 800b6e4:	f8c0 9000 	str.w	r9, [r0]
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	e7e4      	b.n	800b6b6 <__pow5mult+0x6a>
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f2:	bf00      	nop
 800b6f4:	0800c714 	.word	0x0800c714
 800b6f8:	0800c5e3 	.word	0x0800c5e3
 800b6fc:	0800c663 	.word	0x0800c663

0800b700 <__lshift>:
 800b700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b704:	460c      	mov	r4, r1
 800b706:	4607      	mov	r7, r0
 800b708:	4691      	mov	r9, r2
 800b70a:	6923      	ldr	r3, [r4, #16]
 800b70c:	6849      	ldr	r1, [r1, #4]
 800b70e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b712:	68a3      	ldr	r3, [r4, #8]
 800b714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b718:	f108 0601 	add.w	r6, r8, #1
 800b71c:	42b3      	cmp	r3, r6
 800b71e:	db0b      	blt.n	800b738 <__lshift+0x38>
 800b720:	4638      	mov	r0, r7
 800b722:	f7ff fde7 	bl	800b2f4 <_Balloc>
 800b726:	4605      	mov	r5, r0
 800b728:	b948      	cbnz	r0, 800b73e <__lshift+0x3e>
 800b72a:	4602      	mov	r2, r0
 800b72c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b730:	4b27      	ldr	r3, [pc, #156]	@ (800b7d0 <__lshift+0xd0>)
 800b732:	4828      	ldr	r0, [pc, #160]	@ (800b7d4 <__lshift+0xd4>)
 800b734:	f000 fb90 	bl	800be58 <__assert_func>
 800b738:	3101      	adds	r1, #1
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	e7ee      	b.n	800b71c <__lshift+0x1c>
 800b73e:	2300      	movs	r3, #0
 800b740:	f100 0114 	add.w	r1, r0, #20
 800b744:	f100 0210 	add.w	r2, r0, #16
 800b748:	4618      	mov	r0, r3
 800b74a:	4553      	cmp	r3, sl
 800b74c:	db33      	blt.n	800b7b6 <__lshift+0xb6>
 800b74e:	6920      	ldr	r0, [r4, #16]
 800b750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b754:	f104 0314 	add.w	r3, r4, #20
 800b758:	f019 091f 	ands.w	r9, r9, #31
 800b75c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b764:	d02b      	beq.n	800b7be <__lshift+0xbe>
 800b766:	468a      	mov	sl, r1
 800b768:	2200      	movs	r2, #0
 800b76a:	f1c9 0e20 	rsb	lr, r9, #32
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	fa00 f009 	lsl.w	r0, r0, r9
 800b774:	4310      	orrs	r0, r2
 800b776:	f84a 0b04 	str.w	r0, [sl], #4
 800b77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b77e:	459c      	cmp	ip, r3
 800b780:	fa22 f20e 	lsr.w	r2, r2, lr
 800b784:	d8f3      	bhi.n	800b76e <__lshift+0x6e>
 800b786:	ebac 0304 	sub.w	r3, ip, r4
 800b78a:	3b15      	subs	r3, #21
 800b78c:	f023 0303 	bic.w	r3, r3, #3
 800b790:	3304      	adds	r3, #4
 800b792:	f104 0015 	add.w	r0, r4, #21
 800b796:	4560      	cmp	r0, ip
 800b798:	bf88      	it	hi
 800b79a:	2304      	movhi	r3, #4
 800b79c:	50ca      	str	r2, [r1, r3]
 800b79e:	b10a      	cbz	r2, 800b7a4 <__lshift+0xa4>
 800b7a0:	f108 0602 	add.w	r6, r8, #2
 800b7a4:	3e01      	subs	r6, #1
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	612e      	str	r6, [r5, #16]
 800b7ac:	f7ff fde2 	bl	800b374 <_Bfree>
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	e7c5      	b.n	800b74a <__lshift+0x4a>
 800b7be:	3904      	subs	r1, #4
 800b7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c4:	459c      	cmp	ip, r3
 800b7c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7ca:	d8f9      	bhi.n	800b7c0 <__lshift+0xc0>
 800b7cc:	e7ea      	b.n	800b7a4 <__lshift+0xa4>
 800b7ce:	bf00      	nop
 800b7d0:	0800c652 	.word	0x0800c652
 800b7d4:	0800c663 	.word	0x0800c663

0800b7d8 <__mcmp>:
 800b7d8:	4603      	mov	r3, r0
 800b7da:	690a      	ldr	r2, [r1, #16]
 800b7dc:	6900      	ldr	r0, [r0, #16]
 800b7de:	b530      	push	{r4, r5, lr}
 800b7e0:	1a80      	subs	r0, r0, r2
 800b7e2:	d10e      	bne.n	800b802 <__mcmp+0x2a>
 800b7e4:	3314      	adds	r3, #20
 800b7e6:	3114      	adds	r1, #20
 800b7e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b7ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b7f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b7f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b7f8:	4295      	cmp	r5, r2
 800b7fa:	d003      	beq.n	800b804 <__mcmp+0x2c>
 800b7fc:	d205      	bcs.n	800b80a <__mcmp+0x32>
 800b7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b802:	bd30      	pop	{r4, r5, pc}
 800b804:	42a3      	cmp	r3, r4
 800b806:	d3f3      	bcc.n	800b7f0 <__mcmp+0x18>
 800b808:	e7fb      	b.n	800b802 <__mcmp+0x2a>
 800b80a:	2001      	movs	r0, #1
 800b80c:	e7f9      	b.n	800b802 <__mcmp+0x2a>
	...

0800b810 <__mdiff>:
 800b810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	4689      	mov	r9, r1
 800b816:	4606      	mov	r6, r0
 800b818:	4611      	mov	r1, r2
 800b81a:	4648      	mov	r0, r9
 800b81c:	4614      	mov	r4, r2
 800b81e:	f7ff ffdb 	bl	800b7d8 <__mcmp>
 800b822:	1e05      	subs	r5, r0, #0
 800b824:	d112      	bne.n	800b84c <__mdiff+0x3c>
 800b826:	4629      	mov	r1, r5
 800b828:	4630      	mov	r0, r6
 800b82a:	f7ff fd63 	bl	800b2f4 <_Balloc>
 800b82e:	4602      	mov	r2, r0
 800b830:	b928      	cbnz	r0, 800b83e <__mdiff+0x2e>
 800b832:	f240 2137 	movw	r1, #567	@ 0x237
 800b836:	4b3e      	ldr	r3, [pc, #248]	@ (800b930 <__mdiff+0x120>)
 800b838:	483e      	ldr	r0, [pc, #248]	@ (800b934 <__mdiff+0x124>)
 800b83a:	f000 fb0d 	bl	800be58 <__assert_func>
 800b83e:	2301      	movs	r3, #1
 800b840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b844:	4610      	mov	r0, r2
 800b846:	b003      	add	sp, #12
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	bfbc      	itt	lt
 800b84e:	464b      	movlt	r3, r9
 800b850:	46a1      	movlt	r9, r4
 800b852:	4630      	mov	r0, r6
 800b854:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b858:	bfba      	itte	lt
 800b85a:	461c      	movlt	r4, r3
 800b85c:	2501      	movlt	r5, #1
 800b85e:	2500      	movge	r5, #0
 800b860:	f7ff fd48 	bl	800b2f4 <_Balloc>
 800b864:	4602      	mov	r2, r0
 800b866:	b918      	cbnz	r0, 800b870 <__mdiff+0x60>
 800b868:	f240 2145 	movw	r1, #581	@ 0x245
 800b86c:	4b30      	ldr	r3, [pc, #192]	@ (800b930 <__mdiff+0x120>)
 800b86e:	e7e3      	b.n	800b838 <__mdiff+0x28>
 800b870:	f100 0b14 	add.w	fp, r0, #20
 800b874:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b878:	f109 0310 	add.w	r3, r9, #16
 800b87c:	60c5      	str	r5, [r0, #12]
 800b87e:	f04f 0c00 	mov.w	ip, #0
 800b882:	f109 0514 	add.w	r5, r9, #20
 800b886:	46d9      	mov	r9, fp
 800b888:	6926      	ldr	r6, [r4, #16]
 800b88a:	f104 0e14 	add.w	lr, r4, #20
 800b88e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b892:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	9b01      	ldr	r3, [sp, #4]
 800b89a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b89e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8a2:	b281      	uxth	r1, r0
 800b8a4:	9301      	str	r3, [sp, #4]
 800b8a6:	fa1f f38a 	uxth.w	r3, sl
 800b8aa:	1a5b      	subs	r3, r3, r1
 800b8ac:	0c00      	lsrs	r0, r0, #16
 800b8ae:	4463      	add	r3, ip
 800b8b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b8b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b8be:	4576      	cmp	r6, lr
 800b8c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8c4:	f849 3b04 	str.w	r3, [r9], #4
 800b8c8:	d8e6      	bhi.n	800b898 <__mdiff+0x88>
 800b8ca:	1b33      	subs	r3, r6, r4
 800b8cc:	3b15      	subs	r3, #21
 800b8ce:	f023 0303 	bic.w	r3, r3, #3
 800b8d2:	3415      	adds	r4, #21
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	42a6      	cmp	r6, r4
 800b8d8:	bf38      	it	cc
 800b8da:	2304      	movcc	r3, #4
 800b8dc:	441d      	add	r5, r3
 800b8de:	445b      	add	r3, fp
 800b8e0:	461e      	mov	r6, r3
 800b8e2:	462c      	mov	r4, r5
 800b8e4:	4544      	cmp	r4, r8
 800b8e6:	d30e      	bcc.n	800b906 <__mdiff+0xf6>
 800b8e8:	f108 0103 	add.w	r1, r8, #3
 800b8ec:	1b49      	subs	r1, r1, r5
 800b8ee:	f021 0103 	bic.w	r1, r1, #3
 800b8f2:	3d03      	subs	r5, #3
 800b8f4:	45a8      	cmp	r8, r5
 800b8f6:	bf38      	it	cc
 800b8f8:	2100      	movcc	r1, #0
 800b8fa:	440b      	add	r3, r1
 800b8fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b900:	b199      	cbz	r1, 800b92a <__mdiff+0x11a>
 800b902:	6117      	str	r7, [r2, #16]
 800b904:	e79e      	b.n	800b844 <__mdiff+0x34>
 800b906:	46e6      	mov	lr, ip
 800b908:	f854 1b04 	ldr.w	r1, [r4], #4
 800b90c:	fa1f fc81 	uxth.w	ip, r1
 800b910:	44f4      	add	ip, lr
 800b912:	0c08      	lsrs	r0, r1, #16
 800b914:	4471      	add	r1, lr
 800b916:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b91a:	b289      	uxth	r1, r1
 800b91c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b920:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b924:	f846 1b04 	str.w	r1, [r6], #4
 800b928:	e7dc      	b.n	800b8e4 <__mdiff+0xd4>
 800b92a:	3f01      	subs	r7, #1
 800b92c:	e7e6      	b.n	800b8fc <__mdiff+0xec>
 800b92e:	bf00      	nop
 800b930:	0800c652 	.word	0x0800c652
 800b934:	0800c663 	.word	0x0800c663

0800b938 <__d2b>:
 800b938:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b93c:	2101      	movs	r1, #1
 800b93e:	4690      	mov	r8, r2
 800b940:	4699      	mov	r9, r3
 800b942:	9e08      	ldr	r6, [sp, #32]
 800b944:	f7ff fcd6 	bl	800b2f4 <_Balloc>
 800b948:	4604      	mov	r4, r0
 800b94a:	b930      	cbnz	r0, 800b95a <__d2b+0x22>
 800b94c:	4602      	mov	r2, r0
 800b94e:	f240 310f 	movw	r1, #783	@ 0x30f
 800b952:	4b23      	ldr	r3, [pc, #140]	@ (800b9e0 <__d2b+0xa8>)
 800b954:	4823      	ldr	r0, [pc, #140]	@ (800b9e4 <__d2b+0xac>)
 800b956:	f000 fa7f 	bl	800be58 <__assert_func>
 800b95a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b95e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b962:	b10d      	cbz	r5, 800b968 <__d2b+0x30>
 800b964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	f1b8 0300 	subs.w	r3, r8, #0
 800b96e:	d024      	beq.n	800b9ba <__d2b+0x82>
 800b970:	4668      	mov	r0, sp
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	f7ff fd85 	bl	800b482 <__lo0bits>
 800b978:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b97c:	b1d8      	cbz	r0, 800b9b6 <__d2b+0x7e>
 800b97e:	f1c0 0320 	rsb	r3, r0, #32
 800b982:	fa02 f303 	lsl.w	r3, r2, r3
 800b986:	430b      	orrs	r3, r1
 800b988:	40c2      	lsrs	r2, r0
 800b98a:	6163      	str	r3, [r4, #20]
 800b98c:	9201      	str	r2, [sp, #4]
 800b98e:	9b01      	ldr	r3, [sp, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	bf0c      	ite	eq
 800b994:	2201      	moveq	r2, #1
 800b996:	2202      	movne	r2, #2
 800b998:	61a3      	str	r3, [r4, #24]
 800b99a:	6122      	str	r2, [r4, #16]
 800b99c:	b1ad      	cbz	r5, 800b9ca <__d2b+0x92>
 800b99e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9a2:	4405      	add	r5, r0
 800b9a4:	6035      	str	r5, [r6, #0]
 800b9a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ac:	6018      	str	r0, [r3, #0]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	b002      	add	sp, #8
 800b9b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b9b6:	6161      	str	r1, [r4, #20]
 800b9b8:	e7e9      	b.n	800b98e <__d2b+0x56>
 800b9ba:	a801      	add	r0, sp, #4
 800b9bc:	f7ff fd61 	bl	800b482 <__lo0bits>
 800b9c0:	9b01      	ldr	r3, [sp, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	6163      	str	r3, [r4, #20]
 800b9c6:	3020      	adds	r0, #32
 800b9c8:	e7e7      	b.n	800b99a <__d2b+0x62>
 800b9ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b9ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9d2:	6030      	str	r0, [r6, #0]
 800b9d4:	6918      	ldr	r0, [r3, #16]
 800b9d6:	f7ff fd35 	bl	800b444 <__hi0bits>
 800b9da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9de:	e7e4      	b.n	800b9aa <__d2b+0x72>
 800b9e0:	0800c652 	.word	0x0800c652
 800b9e4:	0800c663 	.word	0x0800c663

0800b9e8 <__ssputs_r>:
 800b9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ec:	461f      	mov	r7, r3
 800b9ee:	688e      	ldr	r6, [r1, #8]
 800b9f0:	4682      	mov	sl, r0
 800b9f2:	42be      	cmp	r6, r7
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	4690      	mov	r8, r2
 800b9f8:	680b      	ldr	r3, [r1, #0]
 800b9fa:	d82d      	bhi.n	800ba58 <__ssputs_r+0x70>
 800b9fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba04:	d026      	beq.n	800ba54 <__ssputs_r+0x6c>
 800ba06:	6965      	ldr	r5, [r4, #20]
 800ba08:	6909      	ldr	r1, [r1, #16]
 800ba0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba0e:	eba3 0901 	sub.w	r9, r3, r1
 800ba12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba16:	1c7b      	adds	r3, r7, #1
 800ba18:	444b      	add	r3, r9
 800ba1a:	106d      	asrs	r5, r5, #1
 800ba1c:	429d      	cmp	r5, r3
 800ba1e:	bf38      	it	cc
 800ba20:	461d      	movcc	r5, r3
 800ba22:	0553      	lsls	r3, r2, #21
 800ba24:	d527      	bpl.n	800ba76 <__ssputs_r+0x8e>
 800ba26:	4629      	mov	r1, r5
 800ba28:	f7ff fbd8 	bl	800b1dc <_malloc_r>
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	b360      	cbz	r0, 800ba8a <__ssputs_r+0xa2>
 800ba30:	464a      	mov	r2, r9
 800ba32:	6921      	ldr	r1, [r4, #16]
 800ba34:	f000 fa02 	bl	800be3c <memcpy>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba42:	81a3      	strh	r3, [r4, #12]
 800ba44:	6126      	str	r6, [r4, #16]
 800ba46:	444e      	add	r6, r9
 800ba48:	6026      	str	r6, [r4, #0]
 800ba4a:	463e      	mov	r6, r7
 800ba4c:	6165      	str	r5, [r4, #20]
 800ba4e:	eba5 0509 	sub.w	r5, r5, r9
 800ba52:	60a5      	str	r5, [r4, #8]
 800ba54:	42be      	cmp	r6, r7
 800ba56:	d900      	bls.n	800ba5a <__ssputs_r+0x72>
 800ba58:	463e      	mov	r6, r7
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	6820      	ldr	r0, [r4, #0]
 800ba60:	f000 f9c2 	bl	800bde8 <memmove>
 800ba64:	2000      	movs	r0, #0
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	1b9b      	subs	r3, r3, r6
 800ba6a:	60a3      	str	r3, [r4, #8]
 800ba6c:	6823      	ldr	r3, [r4, #0]
 800ba6e:	4433      	add	r3, r6
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba76:	462a      	mov	r2, r5
 800ba78:	f000 fa32 	bl	800bee0 <_realloc_r>
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d1e0      	bne.n	800ba44 <__ssputs_r+0x5c>
 800ba82:	4650      	mov	r0, sl
 800ba84:	6921      	ldr	r1, [r4, #16]
 800ba86:	f7ff fb37 	bl	800b0f8 <_free_r>
 800ba8a:	230c      	movs	r3, #12
 800ba8c:	f8ca 3000 	str.w	r3, [sl]
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	f04f 30ff 	mov.w	r0, #4294967295
 800ba96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba9a:	81a3      	strh	r3, [r4, #12]
 800ba9c:	e7e9      	b.n	800ba72 <__ssputs_r+0x8a>
	...

0800baa0 <_svfiprintf_r>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	4698      	mov	r8, r3
 800baa6:	898b      	ldrh	r3, [r1, #12]
 800baa8:	4607      	mov	r7, r0
 800baaa:	061b      	lsls	r3, r3, #24
 800baac:	460d      	mov	r5, r1
 800baae:	4614      	mov	r4, r2
 800bab0:	b09d      	sub	sp, #116	@ 0x74
 800bab2:	d510      	bpl.n	800bad6 <_svfiprintf_r+0x36>
 800bab4:	690b      	ldr	r3, [r1, #16]
 800bab6:	b973      	cbnz	r3, 800bad6 <_svfiprintf_r+0x36>
 800bab8:	2140      	movs	r1, #64	@ 0x40
 800baba:	f7ff fb8f 	bl	800b1dc <_malloc_r>
 800babe:	6028      	str	r0, [r5, #0]
 800bac0:	6128      	str	r0, [r5, #16]
 800bac2:	b930      	cbnz	r0, 800bad2 <_svfiprintf_r+0x32>
 800bac4:	230c      	movs	r3, #12
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	b01d      	add	sp, #116	@ 0x74
 800bace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad2:	2340      	movs	r3, #64	@ 0x40
 800bad4:	616b      	str	r3, [r5, #20]
 800bad6:	2300      	movs	r3, #0
 800bad8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bada:	2320      	movs	r3, #32
 800badc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bae0:	2330      	movs	r3, #48	@ 0x30
 800bae2:	f04f 0901 	mov.w	r9, #1
 800bae6:	f8cd 800c 	str.w	r8, [sp, #12]
 800baea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bc84 <_svfiprintf_r+0x1e4>
 800baee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baf2:	4623      	mov	r3, r4
 800baf4:	469a      	mov	sl, r3
 800baf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bafa:	b10a      	cbz	r2, 800bb00 <_svfiprintf_r+0x60>
 800bafc:	2a25      	cmp	r2, #37	@ 0x25
 800bafe:	d1f9      	bne.n	800baf4 <_svfiprintf_r+0x54>
 800bb00:	ebba 0b04 	subs.w	fp, sl, r4
 800bb04:	d00b      	beq.n	800bb1e <_svfiprintf_r+0x7e>
 800bb06:	465b      	mov	r3, fp
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7ff ff6b 	bl	800b9e8 <__ssputs_r>
 800bb12:	3001      	adds	r0, #1
 800bb14:	f000 80a7 	beq.w	800bc66 <_svfiprintf_r+0x1c6>
 800bb18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb1a:	445a      	add	r2, fp
 800bb1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb1e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f000 809f 	beq.w	800bc66 <_svfiprintf_r+0x1c6>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb32:	f10a 0a01 	add.w	sl, sl, #1
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	9307      	str	r3, [sp, #28]
 800bb3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb40:	4654      	mov	r4, sl
 800bb42:	2205      	movs	r2, #5
 800bb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb48:	484e      	ldr	r0, [pc, #312]	@ (800bc84 <_svfiprintf_r+0x1e4>)
 800bb4a:	f7fe fc68 	bl	800a41e <memchr>
 800bb4e:	9a04      	ldr	r2, [sp, #16]
 800bb50:	b9d8      	cbnz	r0, 800bb8a <_svfiprintf_r+0xea>
 800bb52:	06d0      	lsls	r0, r2, #27
 800bb54:	bf44      	itt	mi
 800bb56:	2320      	movmi	r3, #32
 800bb58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb5c:	0711      	lsls	r1, r2, #28
 800bb5e:	bf44      	itt	mi
 800bb60:	232b      	movmi	r3, #43	@ 0x2b
 800bb62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb66:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb6c:	d015      	beq.n	800bb9a <_svfiprintf_r+0xfa>
 800bb6e:	4654      	mov	r4, sl
 800bb70:	2000      	movs	r0, #0
 800bb72:	f04f 0c0a 	mov.w	ip, #10
 800bb76:	9a07      	ldr	r2, [sp, #28]
 800bb78:	4621      	mov	r1, r4
 800bb7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb7e:	3b30      	subs	r3, #48	@ 0x30
 800bb80:	2b09      	cmp	r3, #9
 800bb82:	d94b      	bls.n	800bc1c <_svfiprintf_r+0x17c>
 800bb84:	b1b0      	cbz	r0, 800bbb4 <_svfiprintf_r+0x114>
 800bb86:	9207      	str	r2, [sp, #28]
 800bb88:	e014      	b.n	800bbb4 <_svfiprintf_r+0x114>
 800bb8a:	eba0 0308 	sub.w	r3, r0, r8
 800bb8e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb92:	4313      	orrs	r3, r2
 800bb94:	46a2      	mov	sl, r4
 800bb96:	9304      	str	r3, [sp, #16]
 800bb98:	e7d2      	b.n	800bb40 <_svfiprintf_r+0xa0>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	1d19      	adds	r1, r3, #4
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	9103      	str	r1, [sp, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfbb      	ittet	lt
 800bba6:	425b      	neglt	r3, r3
 800bba8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbac:	9307      	strge	r3, [sp, #28]
 800bbae:	9307      	strlt	r3, [sp, #28]
 800bbb0:	bfb8      	it	lt
 800bbb2:	9204      	strlt	r2, [sp, #16]
 800bbb4:	7823      	ldrb	r3, [r4, #0]
 800bbb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbb8:	d10a      	bne.n	800bbd0 <_svfiprintf_r+0x130>
 800bbba:	7863      	ldrb	r3, [r4, #1]
 800bbbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbbe:	d132      	bne.n	800bc26 <_svfiprintf_r+0x186>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	3402      	adds	r4, #2
 800bbc4:	1d1a      	adds	r2, r3, #4
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	9203      	str	r2, [sp, #12]
 800bbca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bc88 <_svfiprintf_r+0x1e8>
 800bbd4:	2203      	movs	r2, #3
 800bbd6:	4650      	mov	r0, sl
 800bbd8:	7821      	ldrb	r1, [r4, #0]
 800bbda:	f7fe fc20 	bl	800a41e <memchr>
 800bbde:	b138      	cbz	r0, 800bbf0 <_svfiprintf_r+0x150>
 800bbe0:	2240      	movs	r2, #64	@ 0x40
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	eba0 000a 	sub.w	r0, r0, sl
 800bbe8:	4082      	lsls	r2, r0
 800bbea:	4313      	orrs	r3, r2
 800bbec:	3401      	adds	r4, #1
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf4:	2206      	movs	r2, #6
 800bbf6:	4825      	ldr	r0, [pc, #148]	@ (800bc8c <_svfiprintf_r+0x1ec>)
 800bbf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbfc:	f7fe fc0f 	bl	800a41e <memchr>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d036      	beq.n	800bc72 <_svfiprintf_r+0x1d2>
 800bc04:	4b22      	ldr	r3, [pc, #136]	@ (800bc90 <_svfiprintf_r+0x1f0>)
 800bc06:	bb1b      	cbnz	r3, 800bc50 <_svfiprintf_r+0x1b0>
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	3307      	adds	r3, #7
 800bc0c:	f023 0307 	bic.w	r3, r3, #7
 800bc10:	3308      	adds	r3, #8
 800bc12:	9303      	str	r3, [sp, #12]
 800bc14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc16:	4433      	add	r3, r6
 800bc18:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1a:	e76a      	b.n	800baf2 <_svfiprintf_r+0x52>
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	2001      	movs	r0, #1
 800bc20:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc24:	e7a8      	b.n	800bb78 <_svfiprintf_r+0xd8>
 800bc26:	2300      	movs	r3, #0
 800bc28:	f04f 0c0a 	mov.w	ip, #10
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	3401      	adds	r4, #1
 800bc30:	9305      	str	r3, [sp, #20]
 800bc32:	4620      	mov	r0, r4
 800bc34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc38:	3a30      	subs	r2, #48	@ 0x30
 800bc3a:	2a09      	cmp	r2, #9
 800bc3c:	d903      	bls.n	800bc46 <_svfiprintf_r+0x1a6>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0c6      	beq.n	800bbd0 <_svfiprintf_r+0x130>
 800bc42:	9105      	str	r1, [sp, #20]
 800bc44:	e7c4      	b.n	800bbd0 <_svfiprintf_r+0x130>
 800bc46:	4604      	mov	r4, r0
 800bc48:	2301      	movs	r3, #1
 800bc4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc4e:	e7f0      	b.n	800bc32 <_svfiprintf_r+0x192>
 800bc50:	ab03      	add	r3, sp, #12
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	462a      	mov	r2, r5
 800bc56:	4638      	mov	r0, r7
 800bc58:	4b0e      	ldr	r3, [pc, #56]	@ (800bc94 <_svfiprintf_r+0x1f4>)
 800bc5a:	a904      	add	r1, sp, #16
 800bc5c:	f7fd fe68 	bl	8009930 <_printf_float>
 800bc60:	1c42      	adds	r2, r0, #1
 800bc62:	4606      	mov	r6, r0
 800bc64:	d1d6      	bne.n	800bc14 <_svfiprintf_r+0x174>
 800bc66:	89ab      	ldrh	r3, [r5, #12]
 800bc68:	065b      	lsls	r3, r3, #25
 800bc6a:	f53f af2d 	bmi.w	800bac8 <_svfiprintf_r+0x28>
 800bc6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc70:	e72c      	b.n	800bacc <_svfiprintf_r+0x2c>
 800bc72:	ab03      	add	r3, sp, #12
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	462a      	mov	r2, r5
 800bc78:	4638      	mov	r0, r7
 800bc7a:	4b06      	ldr	r3, [pc, #24]	@ (800bc94 <_svfiprintf_r+0x1f4>)
 800bc7c:	a904      	add	r1, sp, #16
 800bc7e:	f7fe f8f5 	bl	8009e6c <_printf_i>
 800bc82:	e7ed      	b.n	800bc60 <_svfiprintf_r+0x1c0>
 800bc84:	0800c6bc 	.word	0x0800c6bc
 800bc88:	0800c6c2 	.word	0x0800c6c2
 800bc8c:	0800c6c6 	.word	0x0800c6c6
 800bc90:	08009931 	.word	0x08009931
 800bc94:	0800b9e9 	.word	0x0800b9e9

0800bc98 <__sflush_r>:
 800bc98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	0716      	lsls	r6, r2, #28
 800bca0:	4605      	mov	r5, r0
 800bca2:	460c      	mov	r4, r1
 800bca4:	d454      	bmi.n	800bd50 <__sflush_r+0xb8>
 800bca6:	684b      	ldr	r3, [r1, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	dc02      	bgt.n	800bcb2 <__sflush_r+0x1a>
 800bcac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	dd48      	ble.n	800bd44 <__sflush_r+0xac>
 800bcb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcb4:	2e00      	cmp	r6, #0
 800bcb6:	d045      	beq.n	800bd44 <__sflush_r+0xac>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcbe:	682f      	ldr	r7, [r5, #0]
 800bcc0:	6a21      	ldr	r1, [r4, #32]
 800bcc2:	602b      	str	r3, [r5, #0]
 800bcc4:	d030      	beq.n	800bd28 <__sflush_r+0x90>
 800bcc6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	0759      	lsls	r1, r3, #29
 800bccc:	d505      	bpl.n	800bcda <__sflush_r+0x42>
 800bcce:	6863      	ldr	r3, [r4, #4]
 800bcd0:	1ad2      	subs	r2, r2, r3
 800bcd2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcd4:	b10b      	cbz	r3, 800bcda <__sflush_r+0x42>
 800bcd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcd8:	1ad2      	subs	r2, r2, r3
 800bcda:	2300      	movs	r3, #0
 800bcdc:	4628      	mov	r0, r5
 800bcde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bce0:	6a21      	ldr	r1, [r4, #32]
 800bce2:	47b0      	blx	r6
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	d106      	bne.n	800bcf8 <__sflush_r+0x60>
 800bcea:	6829      	ldr	r1, [r5, #0]
 800bcec:	291d      	cmp	r1, #29
 800bcee:	d82b      	bhi.n	800bd48 <__sflush_r+0xb0>
 800bcf0:	4a28      	ldr	r2, [pc, #160]	@ (800bd94 <__sflush_r+0xfc>)
 800bcf2:	40ca      	lsrs	r2, r1
 800bcf4:	07d6      	lsls	r6, r2, #31
 800bcf6:	d527      	bpl.n	800bd48 <__sflush_r+0xb0>
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	6062      	str	r2, [r4, #4]
 800bcfc:	6922      	ldr	r2, [r4, #16]
 800bcfe:	04d9      	lsls	r1, r3, #19
 800bd00:	6022      	str	r2, [r4, #0]
 800bd02:	d504      	bpl.n	800bd0e <__sflush_r+0x76>
 800bd04:	1c42      	adds	r2, r0, #1
 800bd06:	d101      	bne.n	800bd0c <__sflush_r+0x74>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b903      	cbnz	r3, 800bd0e <__sflush_r+0x76>
 800bd0c:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd10:	602f      	str	r7, [r5, #0]
 800bd12:	b1b9      	cbz	r1, 800bd44 <__sflush_r+0xac>
 800bd14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd18:	4299      	cmp	r1, r3
 800bd1a:	d002      	beq.n	800bd22 <__sflush_r+0x8a>
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f7ff f9eb 	bl	800b0f8 <_free_r>
 800bd22:	2300      	movs	r3, #0
 800bd24:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd26:	e00d      	b.n	800bd44 <__sflush_r+0xac>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	47b0      	blx	r6
 800bd2e:	4602      	mov	r2, r0
 800bd30:	1c50      	adds	r0, r2, #1
 800bd32:	d1c9      	bne.n	800bcc8 <__sflush_r+0x30>
 800bd34:	682b      	ldr	r3, [r5, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0c6      	beq.n	800bcc8 <__sflush_r+0x30>
 800bd3a:	2b1d      	cmp	r3, #29
 800bd3c:	d001      	beq.n	800bd42 <__sflush_r+0xaa>
 800bd3e:	2b16      	cmp	r3, #22
 800bd40:	d11d      	bne.n	800bd7e <__sflush_r+0xe6>
 800bd42:	602f      	str	r7, [r5, #0]
 800bd44:	2000      	movs	r0, #0
 800bd46:	e021      	b.n	800bd8c <__sflush_r+0xf4>
 800bd48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd4c:	b21b      	sxth	r3, r3
 800bd4e:	e01a      	b.n	800bd86 <__sflush_r+0xee>
 800bd50:	690f      	ldr	r7, [r1, #16]
 800bd52:	2f00      	cmp	r7, #0
 800bd54:	d0f6      	beq.n	800bd44 <__sflush_r+0xac>
 800bd56:	0793      	lsls	r3, r2, #30
 800bd58:	bf18      	it	ne
 800bd5a:	2300      	movne	r3, #0
 800bd5c:	680e      	ldr	r6, [r1, #0]
 800bd5e:	bf08      	it	eq
 800bd60:	694b      	ldreq	r3, [r1, #20]
 800bd62:	1bf6      	subs	r6, r6, r7
 800bd64:	600f      	str	r7, [r1, #0]
 800bd66:	608b      	str	r3, [r1, #8]
 800bd68:	2e00      	cmp	r6, #0
 800bd6a:	ddeb      	ble.n	800bd44 <__sflush_r+0xac>
 800bd6c:	4633      	mov	r3, r6
 800bd6e:	463a      	mov	r2, r7
 800bd70:	4628      	mov	r0, r5
 800bd72:	6a21      	ldr	r1, [r4, #32]
 800bd74:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bd78:	47e0      	blx	ip
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	dc07      	bgt.n	800bd8e <__sflush_r+0xf6>
 800bd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd86:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8a:	81a3      	strh	r3, [r4, #12]
 800bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd8e:	4407      	add	r7, r0
 800bd90:	1a36      	subs	r6, r6, r0
 800bd92:	e7e9      	b.n	800bd68 <__sflush_r+0xd0>
 800bd94:	20400001 	.word	0x20400001

0800bd98 <_fflush_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	690b      	ldr	r3, [r1, #16]
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	b913      	cbnz	r3, 800bda8 <_fflush_r+0x10>
 800bda2:	2500      	movs	r5, #0
 800bda4:	4628      	mov	r0, r5
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	b118      	cbz	r0, 800bdb2 <_fflush_r+0x1a>
 800bdaa:	6a03      	ldr	r3, [r0, #32]
 800bdac:	b90b      	cbnz	r3, 800bdb2 <_fflush_r+0x1a>
 800bdae:	f7fe fa07 	bl	800a1c0 <__sinit>
 800bdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d0f3      	beq.n	800bda2 <_fflush_r+0xa>
 800bdba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdbc:	07d0      	lsls	r0, r2, #31
 800bdbe:	d404      	bmi.n	800bdca <_fflush_r+0x32>
 800bdc0:	0599      	lsls	r1, r3, #22
 800bdc2:	d402      	bmi.n	800bdca <_fflush_r+0x32>
 800bdc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdc6:	f7fe fb28 	bl	800a41a <__retarget_lock_acquire_recursive>
 800bdca:	4628      	mov	r0, r5
 800bdcc:	4621      	mov	r1, r4
 800bdce:	f7ff ff63 	bl	800bc98 <__sflush_r>
 800bdd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	07da      	lsls	r2, r3, #31
 800bdd8:	d4e4      	bmi.n	800bda4 <_fflush_r+0xc>
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	059b      	lsls	r3, r3, #22
 800bdde:	d4e1      	bmi.n	800bda4 <_fflush_r+0xc>
 800bde0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bde2:	f7fe fb1b 	bl	800a41c <__retarget_lock_release_recursive>
 800bde6:	e7dd      	b.n	800bda4 <_fflush_r+0xc>

0800bde8 <memmove>:
 800bde8:	4288      	cmp	r0, r1
 800bdea:	b510      	push	{r4, lr}
 800bdec:	eb01 0402 	add.w	r4, r1, r2
 800bdf0:	d902      	bls.n	800bdf8 <memmove+0x10>
 800bdf2:	4284      	cmp	r4, r0
 800bdf4:	4623      	mov	r3, r4
 800bdf6:	d807      	bhi.n	800be08 <memmove+0x20>
 800bdf8:	1e43      	subs	r3, r0, #1
 800bdfa:	42a1      	cmp	r1, r4
 800bdfc:	d008      	beq.n	800be10 <memmove+0x28>
 800bdfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be06:	e7f8      	b.n	800bdfa <memmove+0x12>
 800be08:	4601      	mov	r1, r0
 800be0a:	4402      	add	r2, r0
 800be0c:	428a      	cmp	r2, r1
 800be0e:	d100      	bne.n	800be12 <memmove+0x2a>
 800be10:	bd10      	pop	{r4, pc}
 800be12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be1a:	e7f7      	b.n	800be0c <memmove+0x24>

0800be1c <_sbrk_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	2300      	movs	r3, #0
 800be20:	4d05      	ldr	r5, [pc, #20]	@ (800be38 <_sbrk_r+0x1c>)
 800be22:	4604      	mov	r4, r0
 800be24:	4608      	mov	r0, r1
 800be26:	602b      	str	r3, [r5, #0]
 800be28:	f7f5 fb54 	bl	80014d4 <_sbrk>
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	d102      	bne.n	800be36 <_sbrk_r+0x1a>
 800be30:	682b      	ldr	r3, [r5, #0]
 800be32:	b103      	cbz	r3, 800be36 <_sbrk_r+0x1a>
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	bd38      	pop	{r3, r4, r5, pc}
 800be38:	200016b8 	.word	0x200016b8

0800be3c <memcpy>:
 800be3c:	440a      	add	r2, r1
 800be3e:	4291      	cmp	r1, r2
 800be40:	f100 33ff 	add.w	r3, r0, #4294967295
 800be44:	d100      	bne.n	800be48 <memcpy+0xc>
 800be46:	4770      	bx	lr
 800be48:	b510      	push	{r4, lr}
 800be4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be4e:	4291      	cmp	r1, r2
 800be50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be54:	d1f9      	bne.n	800be4a <memcpy+0xe>
 800be56:	bd10      	pop	{r4, pc}

0800be58 <__assert_func>:
 800be58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be5a:	4614      	mov	r4, r2
 800be5c:	461a      	mov	r2, r3
 800be5e:	4b09      	ldr	r3, [pc, #36]	@ (800be84 <__assert_func+0x2c>)
 800be60:	4605      	mov	r5, r0
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68d8      	ldr	r0, [r3, #12]
 800be66:	b14c      	cbz	r4, 800be7c <__assert_func+0x24>
 800be68:	4b07      	ldr	r3, [pc, #28]	@ (800be88 <__assert_func+0x30>)
 800be6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be6e:	9100      	str	r1, [sp, #0]
 800be70:	462b      	mov	r3, r5
 800be72:	4906      	ldr	r1, [pc, #24]	@ (800be8c <__assert_func+0x34>)
 800be74:	f000 f870 	bl	800bf58 <fiprintf>
 800be78:	f000 f880 	bl	800bf7c <abort>
 800be7c:	4b04      	ldr	r3, [pc, #16]	@ (800be90 <__assert_func+0x38>)
 800be7e:	461c      	mov	r4, r3
 800be80:	e7f3      	b.n	800be6a <__assert_func+0x12>
 800be82:	bf00      	nop
 800be84:	20000188 	.word	0x20000188
 800be88:	0800c6d7 	.word	0x0800c6d7
 800be8c:	0800c6e4 	.word	0x0800c6e4
 800be90:	0800c712 	.word	0x0800c712

0800be94 <_calloc_r>:
 800be94:	b570      	push	{r4, r5, r6, lr}
 800be96:	fba1 5402 	umull	r5, r4, r1, r2
 800be9a:	b934      	cbnz	r4, 800beaa <_calloc_r+0x16>
 800be9c:	4629      	mov	r1, r5
 800be9e:	f7ff f99d 	bl	800b1dc <_malloc_r>
 800bea2:	4606      	mov	r6, r0
 800bea4:	b928      	cbnz	r0, 800beb2 <_calloc_r+0x1e>
 800bea6:	4630      	mov	r0, r6
 800bea8:	bd70      	pop	{r4, r5, r6, pc}
 800beaa:	220c      	movs	r2, #12
 800beac:	2600      	movs	r6, #0
 800beae:	6002      	str	r2, [r0, #0]
 800beb0:	e7f9      	b.n	800bea6 <_calloc_r+0x12>
 800beb2:	462a      	mov	r2, r5
 800beb4:	4621      	mov	r1, r4
 800beb6:	f7fe fa32 	bl	800a31e <memset>
 800beba:	e7f4      	b.n	800bea6 <_calloc_r+0x12>

0800bebc <__ascii_mbtowc>:
 800bebc:	b082      	sub	sp, #8
 800bebe:	b901      	cbnz	r1, 800bec2 <__ascii_mbtowc+0x6>
 800bec0:	a901      	add	r1, sp, #4
 800bec2:	b142      	cbz	r2, 800bed6 <__ascii_mbtowc+0x1a>
 800bec4:	b14b      	cbz	r3, 800beda <__ascii_mbtowc+0x1e>
 800bec6:	7813      	ldrb	r3, [r2, #0]
 800bec8:	600b      	str	r3, [r1, #0]
 800beca:	7812      	ldrb	r2, [r2, #0]
 800becc:	1e10      	subs	r0, r2, #0
 800bece:	bf18      	it	ne
 800bed0:	2001      	movne	r0, #1
 800bed2:	b002      	add	sp, #8
 800bed4:	4770      	bx	lr
 800bed6:	4610      	mov	r0, r2
 800bed8:	e7fb      	b.n	800bed2 <__ascii_mbtowc+0x16>
 800beda:	f06f 0001 	mvn.w	r0, #1
 800bede:	e7f8      	b.n	800bed2 <__ascii_mbtowc+0x16>

0800bee0 <_realloc_r>:
 800bee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee4:	4607      	mov	r7, r0
 800bee6:	4614      	mov	r4, r2
 800bee8:	460d      	mov	r5, r1
 800beea:	b921      	cbnz	r1, 800bef6 <_realloc_r+0x16>
 800beec:	4611      	mov	r1, r2
 800beee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bef2:	f7ff b973 	b.w	800b1dc <_malloc_r>
 800bef6:	b92a      	cbnz	r2, 800bf04 <_realloc_r+0x24>
 800bef8:	f7ff f8fe 	bl	800b0f8 <_free_r>
 800befc:	4625      	mov	r5, r4
 800befe:	4628      	mov	r0, r5
 800bf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf04:	f000 f841 	bl	800bf8a <_malloc_usable_size_r>
 800bf08:	4284      	cmp	r4, r0
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	d802      	bhi.n	800bf14 <_realloc_r+0x34>
 800bf0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf12:	d8f4      	bhi.n	800befe <_realloc_r+0x1e>
 800bf14:	4621      	mov	r1, r4
 800bf16:	4638      	mov	r0, r7
 800bf18:	f7ff f960 	bl	800b1dc <_malloc_r>
 800bf1c:	4680      	mov	r8, r0
 800bf1e:	b908      	cbnz	r0, 800bf24 <_realloc_r+0x44>
 800bf20:	4645      	mov	r5, r8
 800bf22:	e7ec      	b.n	800befe <_realloc_r+0x1e>
 800bf24:	42b4      	cmp	r4, r6
 800bf26:	4622      	mov	r2, r4
 800bf28:	4629      	mov	r1, r5
 800bf2a:	bf28      	it	cs
 800bf2c:	4632      	movcs	r2, r6
 800bf2e:	f7ff ff85 	bl	800be3c <memcpy>
 800bf32:	4629      	mov	r1, r5
 800bf34:	4638      	mov	r0, r7
 800bf36:	f7ff f8df 	bl	800b0f8 <_free_r>
 800bf3a:	e7f1      	b.n	800bf20 <_realloc_r+0x40>

0800bf3c <__ascii_wctomb>:
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	4608      	mov	r0, r1
 800bf40:	b141      	cbz	r1, 800bf54 <__ascii_wctomb+0x18>
 800bf42:	2aff      	cmp	r2, #255	@ 0xff
 800bf44:	d904      	bls.n	800bf50 <__ascii_wctomb+0x14>
 800bf46:	228a      	movs	r2, #138	@ 0x8a
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	4770      	bx	lr
 800bf50:	2001      	movs	r0, #1
 800bf52:	700a      	strb	r2, [r1, #0]
 800bf54:	4770      	bx	lr
	...

0800bf58 <fiprintf>:
 800bf58:	b40e      	push	{r1, r2, r3}
 800bf5a:	b503      	push	{r0, r1, lr}
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	ab03      	add	r3, sp, #12
 800bf60:	4805      	ldr	r0, [pc, #20]	@ (800bf78 <fiprintf+0x20>)
 800bf62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf66:	6800      	ldr	r0, [r0, #0]
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	f000 f83d 	bl	800bfe8 <_vfiprintf_r>
 800bf6e:	b002      	add	sp, #8
 800bf70:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf74:	b003      	add	sp, #12
 800bf76:	4770      	bx	lr
 800bf78:	20000188 	.word	0x20000188

0800bf7c <abort>:
 800bf7c:	2006      	movs	r0, #6
 800bf7e:	b508      	push	{r3, lr}
 800bf80:	f000 fa06 	bl	800c390 <raise>
 800bf84:	2001      	movs	r0, #1
 800bf86:	f7f5 fa30 	bl	80013ea <_exit>

0800bf8a <_malloc_usable_size_r>:
 800bf8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf8e:	1f18      	subs	r0, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	bfbc      	itt	lt
 800bf94:	580b      	ldrlt	r3, [r1, r0]
 800bf96:	18c0      	addlt	r0, r0, r3
 800bf98:	4770      	bx	lr

0800bf9a <__sfputc_r>:
 800bf9a:	6893      	ldr	r3, [r2, #8]
 800bf9c:	b410      	push	{r4}
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	6093      	str	r3, [r2, #8]
 800bfa4:	da07      	bge.n	800bfb6 <__sfputc_r+0x1c>
 800bfa6:	6994      	ldr	r4, [r2, #24]
 800bfa8:	42a3      	cmp	r3, r4
 800bfaa:	db01      	blt.n	800bfb0 <__sfputc_r+0x16>
 800bfac:	290a      	cmp	r1, #10
 800bfae:	d102      	bne.n	800bfb6 <__sfputc_r+0x1c>
 800bfb0:	bc10      	pop	{r4}
 800bfb2:	f000 b931 	b.w	800c218 <__swbuf_r>
 800bfb6:	6813      	ldr	r3, [r2, #0]
 800bfb8:	1c58      	adds	r0, r3, #1
 800bfba:	6010      	str	r0, [r2, #0]
 800bfbc:	7019      	strb	r1, [r3, #0]
 800bfbe:	4608      	mov	r0, r1
 800bfc0:	bc10      	pop	{r4}
 800bfc2:	4770      	bx	lr

0800bfc4 <__sfputs_r>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	460f      	mov	r7, r1
 800bfca:	4614      	mov	r4, r2
 800bfcc:	18d5      	adds	r5, r2, r3
 800bfce:	42ac      	cmp	r4, r5
 800bfd0:	d101      	bne.n	800bfd6 <__sfputs_r+0x12>
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	e007      	b.n	800bfe6 <__sfputs_r+0x22>
 800bfd6:	463a      	mov	r2, r7
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfde:	f7ff ffdc 	bl	800bf9a <__sfputc_r>
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	d1f3      	bne.n	800bfce <__sfputs_r+0xa>
 800bfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfe8 <_vfiprintf_r>:
 800bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	460d      	mov	r5, r1
 800bfee:	4614      	mov	r4, r2
 800bff0:	4698      	mov	r8, r3
 800bff2:	4606      	mov	r6, r0
 800bff4:	b09d      	sub	sp, #116	@ 0x74
 800bff6:	b118      	cbz	r0, 800c000 <_vfiprintf_r+0x18>
 800bff8:	6a03      	ldr	r3, [r0, #32]
 800bffa:	b90b      	cbnz	r3, 800c000 <_vfiprintf_r+0x18>
 800bffc:	f7fe f8e0 	bl	800a1c0 <__sinit>
 800c000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c002:	07d9      	lsls	r1, r3, #31
 800c004:	d405      	bmi.n	800c012 <_vfiprintf_r+0x2a>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	059a      	lsls	r2, r3, #22
 800c00a:	d402      	bmi.n	800c012 <_vfiprintf_r+0x2a>
 800c00c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c00e:	f7fe fa04 	bl	800a41a <__retarget_lock_acquire_recursive>
 800c012:	89ab      	ldrh	r3, [r5, #12]
 800c014:	071b      	lsls	r3, r3, #28
 800c016:	d501      	bpl.n	800c01c <_vfiprintf_r+0x34>
 800c018:	692b      	ldr	r3, [r5, #16]
 800c01a:	b99b      	cbnz	r3, 800c044 <_vfiprintf_r+0x5c>
 800c01c:	4629      	mov	r1, r5
 800c01e:	4630      	mov	r0, r6
 800c020:	f000 f938 	bl	800c294 <__swsetup_r>
 800c024:	b170      	cbz	r0, 800c044 <_vfiprintf_r+0x5c>
 800c026:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c028:	07dc      	lsls	r4, r3, #31
 800c02a:	d504      	bpl.n	800c036 <_vfiprintf_r+0x4e>
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	b01d      	add	sp, #116	@ 0x74
 800c032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	0598      	lsls	r0, r3, #22
 800c03a:	d4f7      	bmi.n	800c02c <_vfiprintf_r+0x44>
 800c03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c03e:	f7fe f9ed 	bl	800a41c <__retarget_lock_release_recursive>
 800c042:	e7f3      	b.n	800c02c <_vfiprintf_r+0x44>
 800c044:	2300      	movs	r3, #0
 800c046:	9309      	str	r3, [sp, #36]	@ 0x24
 800c048:	2320      	movs	r3, #32
 800c04a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c04e:	2330      	movs	r3, #48	@ 0x30
 800c050:	f04f 0901 	mov.w	r9, #1
 800c054:	f8cd 800c 	str.w	r8, [sp, #12]
 800c058:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c204 <_vfiprintf_r+0x21c>
 800c05c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c060:	4623      	mov	r3, r4
 800c062:	469a      	mov	sl, r3
 800c064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c068:	b10a      	cbz	r2, 800c06e <_vfiprintf_r+0x86>
 800c06a:	2a25      	cmp	r2, #37	@ 0x25
 800c06c:	d1f9      	bne.n	800c062 <_vfiprintf_r+0x7a>
 800c06e:	ebba 0b04 	subs.w	fp, sl, r4
 800c072:	d00b      	beq.n	800c08c <_vfiprintf_r+0xa4>
 800c074:	465b      	mov	r3, fp
 800c076:	4622      	mov	r2, r4
 800c078:	4629      	mov	r1, r5
 800c07a:	4630      	mov	r0, r6
 800c07c:	f7ff ffa2 	bl	800bfc4 <__sfputs_r>
 800c080:	3001      	adds	r0, #1
 800c082:	f000 80a7 	beq.w	800c1d4 <_vfiprintf_r+0x1ec>
 800c086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c088:	445a      	add	r2, fp
 800c08a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c08c:	f89a 3000 	ldrb.w	r3, [sl]
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 809f 	beq.w	800c1d4 <_vfiprintf_r+0x1ec>
 800c096:	2300      	movs	r3, #0
 800c098:	f04f 32ff 	mov.w	r2, #4294967295
 800c09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0a0:	f10a 0a01 	add.w	sl, sl, #1
 800c0a4:	9304      	str	r3, [sp, #16]
 800c0a6:	9307      	str	r3, [sp, #28]
 800c0a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0ae:	4654      	mov	r4, sl
 800c0b0:	2205      	movs	r2, #5
 800c0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b6:	4853      	ldr	r0, [pc, #332]	@ (800c204 <_vfiprintf_r+0x21c>)
 800c0b8:	f7fe f9b1 	bl	800a41e <memchr>
 800c0bc:	9a04      	ldr	r2, [sp, #16]
 800c0be:	b9d8      	cbnz	r0, 800c0f8 <_vfiprintf_r+0x110>
 800c0c0:	06d1      	lsls	r1, r2, #27
 800c0c2:	bf44      	itt	mi
 800c0c4:	2320      	movmi	r3, #32
 800c0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ca:	0713      	lsls	r3, r2, #28
 800c0cc:	bf44      	itt	mi
 800c0ce:	232b      	movmi	r3, #43	@ 0x2b
 800c0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0da:	d015      	beq.n	800c108 <_vfiprintf_r+0x120>
 800c0dc:	4654      	mov	r4, sl
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f04f 0c0a 	mov.w	ip, #10
 800c0e4:	9a07      	ldr	r2, [sp, #28]
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0ec:	3b30      	subs	r3, #48	@ 0x30
 800c0ee:	2b09      	cmp	r3, #9
 800c0f0:	d94b      	bls.n	800c18a <_vfiprintf_r+0x1a2>
 800c0f2:	b1b0      	cbz	r0, 800c122 <_vfiprintf_r+0x13a>
 800c0f4:	9207      	str	r2, [sp, #28]
 800c0f6:	e014      	b.n	800c122 <_vfiprintf_r+0x13a>
 800c0f8:	eba0 0308 	sub.w	r3, r0, r8
 800c0fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c100:	4313      	orrs	r3, r2
 800c102:	46a2      	mov	sl, r4
 800c104:	9304      	str	r3, [sp, #16]
 800c106:	e7d2      	b.n	800c0ae <_vfiprintf_r+0xc6>
 800c108:	9b03      	ldr	r3, [sp, #12]
 800c10a:	1d19      	adds	r1, r3, #4
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	9103      	str	r1, [sp, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	bfbb      	ittet	lt
 800c114:	425b      	neglt	r3, r3
 800c116:	f042 0202 	orrlt.w	r2, r2, #2
 800c11a:	9307      	strge	r3, [sp, #28]
 800c11c:	9307      	strlt	r3, [sp, #28]
 800c11e:	bfb8      	it	lt
 800c120:	9204      	strlt	r2, [sp, #16]
 800c122:	7823      	ldrb	r3, [r4, #0]
 800c124:	2b2e      	cmp	r3, #46	@ 0x2e
 800c126:	d10a      	bne.n	800c13e <_vfiprintf_r+0x156>
 800c128:	7863      	ldrb	r3, [r4, #1]
 800c12a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c12c:	d132      	bne.n	800c194 <_vfiprintf_r+0x1ac>
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	3402      	adds	r4, #2
 800c132:	1d1a      	adds	r2, r3, #4
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	9203      	str	r2, [sp, #12]
 800c138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c13c:	9305      	str	r3, [sp, #20]
 800c13e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c208 <_vfiprintf_r+0x220>
 800c142:	2203      	movs	r2, #3
 800c144:	4650      	mov	r0, sl
 800c146:	7821      	ldrb	r1, [r4, #0]
 800c148:	f7fe f969 	bl	800a41e <memchr>
 800c14c:	b138      	cbz	r0, 800c15e <_vfiprintf_r+0x176>
 800c14e:	2240      	movs	r2, #64	@ 0x40
 800c150:	9b04      	ldr	r3, [sp, #16]
 800c152:	eba0 000a 	sub.w	r0, r0, sl
 800c156:	4082      	lsls	r2, r0
 800c158:	4313      	orrs	r3, r2
 800c15a:	3401      	adds	r4, #1
 800c15c:	9304      	str	r3, [sp, #16]
 800c15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c162:	2206      	movs	r2, #6
 800c164:	4829      	ldr	r0, [pc, #164]	@ (800c20c <_vfiprintf_r+0x224>)
 800c166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c16a:	f7fe f958 	bl	800a41e <memchr>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d03f      	beq.n	800c1f2 <_vfiprintf_r+0x20a>
 800c172:	4b27      	ldr	r3, [pc, #156]	@ (800c210 <_vfiprintf_r+0x228>)
 800c174:	bb1b      	cbnz	r3, 800c1be <_vfiprintf_r+0x1d6>
 800c176:	9b03      	ldr	r3, [sp, #12]
 800c178:	3307      	adds	r3, #7
 800c17a:	f023 0307 	bic.w	r3, r3, #7
 800c17e:	3308      	adds	r3, #8
 800c180:	9303      	str	r3, [sp, #12]
 800c182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c184:	443b      	add	r3, r7
 800c186:	9309      	str	r3, [sp, #36]	@ 0x24
 800c188:	e76a      	b.n	800c060 <_vfiprintf_r+0x78>
 800c18a:	460c      	mov	r4, r1
 800c18c:	2001      	movs	r0, #1
 800c18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c192:	e7a8      	b.n	800c0e6 <_vfiprintf_r+0xfe>
 800c194:	2300      	movs	r3, #0
 800c196:	f04f 0c0a 	mov.w	ip, #10
 800c19a:	4619      	mov	r1, r3
 800c19c:	3401      	adds	r4, #1
 800c19e:	9305      	str	r3, [sp, #20]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1a6:	3a30      	subs	r2, #48	@ 0x30
 800c1a8:	2a09      	cmp	r2, #9
 800c1aa:	d903      	bls.n	800c1b4 <_vfiprintf_r+0x1cc>
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d0c6      	beq.n	800c13e <_vfiprintf_r+0x156>
 800c1b0:	9105      	str	r1, [sp, #20]
 800c1b2:	e7c4      	b.n	800c13e <_vfiprintf_r+0x156>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1bc:	e7f0      	b.n	800c1a0 <_vfiprintf_r+0x1b8>
 800c1be:	ab03      	add	r3, sp, #12
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	462a      	mov	r2, r5
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	4b13      	ldr	r3, [pc, #76]	@ (800c214 <_vfiprintf_r+0x22c>)
 800c1c8:	a904      	add	r1, sp, #16
 800c1ca:	f7fd fbb1 	bl	8009930 <_printf_float>
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	1c78      	adds	r0, r7, #1
 800c1d2:	d1d6      	bne.n	800c182 <_vfiprintf_r+0x19a>
 800c1d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1d6:	07d9      	lsls	r1, r3, #31
 800c1d8:	d405      	bmi.n	800c1e6 <_vfiprintf_r+0x1fe>
 800c1da:	89ab      	ldrh	r3, [r5, #12]
 800c1dc:	059a      	lsls	r2, r3, #22
 800c1de:	d402      	bmi.n	800c1e6 <_vfiprintf_r+0x1fe>
 800c1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1e2:	f7fe f91b 	bl	800a41c <__retarget_lock_release_recursive>
 800c1e6:	89ab      	ldrh	r3, [r5, #12]
 800c1e8:	065b      	lsls	r3, r3, #25
 800c1ea:	f53f af1f 	bmi.w	800c02c <_vfiprintf_r+0x44>
 800c1ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1f0:	e71e      	b.n	800c030 <_vfiprintf_r+0x48>
 800c1f2:	ab03      	add	r3, sp, #12
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	462a      	mov	r2, r5
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4b06      	ldr	r3, [pc, #24]	@ (800c214 <_vfiprintf_r+0x22c>)
 800c1fc:	a904      	add	r1, sp, #16
 800c1fe:	f7fd fe35 	bl	8009e6c <_printf_i>
 800c202:	e7e4      	b.n	800c1ce <_vfiprintf_r+0x1e6>
 800c204:	0800c6bc 	.word	0x0800c6bc
 800c208:	0800c6c2 	.word	0x0800c6c2
 800c20c:	0800c6c6 	.word	0x0800c6c6
 800c210:	08009931 	.word	0x08009931
 800c214:	0800bfc5 	.word	0x0800bfc5

0800c218 <__swbuf_r>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	460e      	mov	r6, r1
 800c21c:	4614      	mov	r4, r2
 800c21e:	4605      	mov	r5, r0
 800c220:	b118      	cbz	r0, 800c22a <__swbuf_r+0x12>
 800c222:	6a03      	ldr	r3, [r0, #32]
 800c224:	b90b      	cbnz	r3, 800c22a <__swbuf_r+0x12>
 800c226:	f7fd ffcb 	bl	800a1c0 <__sinit>
 800c22a:	69a3      	ldr	r3, [r4, #24]
 800c22c:	60a3      	str	r3, [r4, #8]
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	071a      	lsls	r2, r3, #28
 800c232:	d501      	bpl.n	800c238 <__swbuf_r+0x20>
 800c234:	6923      	ldr	r3, [r4, #16]
 800c236:	b943      	cbnz	r3, 800c24a <__swbuf_r+0x32>
 800c238:	4621      	mov	r1, r4
 800c23a:	4628      	mov	r0, r5
 800c23c:	f000 f82a 	bl	800c294 <__swsetup_r>
 800c240:	b118      	cbz	r0, 800c24a <__swbuf_r+0x32>
 800c242:	f04f 37ff 	mov.w	r7, #4294967295
 800c246:	4638      	mov	r0, r7
 800c248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	6922      	ldr	r2, [r4, #16]
 800c24e:	b2f6      	uxtb	r6, r6
 800c250:	1a98      	subs	r0, r3, r2
 800c252:	6963      	ldr	r3, [r4, #20]
 800c254:	4637      	mov	r7, r6
 800c256:	4283      	cmp	r3, r0
 800c258:	dc05      	bgt.n	800c266 <__swbuf_r+0x4e>
 800c25a:	4621      	mov	r1, r4
 800c25c:	4628      	mov	r0, r5
 800c25e:	f7ff fd9b 	bl	800bd98 <_fflush_r>
 800c262:	2800      	cmp	r0, #0
 800c264:	d1ed      	bne.n	800c242 <__swbuf_r+0x2a>
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	3b01      	subs	r3, #1
 800c26a:	60a3      	str	r3, [r4, #8]
 800c26c:	6823      	ldr	r3, [r4, #0]
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	6022      	str	r2, [r4, #0]
 800c272:	701e      	strb	r6, [r3, #0]
 800c274:	6962      	ldr	r2, [r4, #20]
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	429a      	cmp	r2, r3
 800c27a:	d004      	beq.n	800c286 <__swbuf_r+0x6e>
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	07db      	lsls	r3, r3, #31
 800c280:	d5e1      	bpl.n	800c246 <__swbuf_r+0x2e>
 800c282:	2e0a      	cmp	r6, #10
 800c284:	d1df      	bne.n	800c246 <__swbuf_r+0x2e>
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	f7ff fd85 	bl	800bd98 <_fflush_r>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d0d9      	beq.n	800c246 <__swbuf_r+0x2e>
 800c292:	e7d6      	b.n	800c242 <__swbuf_r+0x2a>

0800c294 <__swsetup_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4b29      	ldr	r3, [pc, #164]	@ (800c33c <__swsetup_r+0xa8>)
 800c298:	4605      	mov	r5, r0
 800c29a:	6818      	ldr	r0, [r3, #0]
 800c29c:	460c      	mov	r4, r1
 800c29e:	b118      	cbz	r0, 800c2a8 <__swsetup_r+0x14>
 800c2a0:	6a03      	ldr	r3, [r0, #32]
 800c2a2:	b90b      	cbnz	r3, 800c2a8 <__swsetup_r+0x14>
 800c2a4:	f7fd ff8c 	bl	800a1c0 <__sinit>
 800c2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ac:	0719      	lsls	r1, r3, #28
 800c2ae:	d422      	bmi.n	800c2f6 <__swsetup_r+0x62>
 800c2b0:	06da      	lsls	r2, r3, #27
 800c2b2:	d407      	bmi.n	800c2c4 <__swsetup_r+0x30>
 800c2b4:	2209      	movs	r2, #9
 800c2b6:	602a      	str	r2, [r5, #0]
 800c2b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	e033      	b.n	800c32c <__swsetup_r+0x98>
 800c2c4:	0758      	lsls	r0, r3, #29
 800c2c6:	d512      	bpl.n	800c2ee <__swsetup_r+0x5a>
 800c2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2ca:	b141      	cbz	r1, 800c2de <__swsetup_r+0x4a>
 800c2cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2d0:	4299      	cmp	r1, r3
 800c2d2:	d002      	beq.n	800c2da <__swsetup_r+0x46>
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7fe ff0f 	bl	800b0f8 <_free_r>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6063      	str	r3, [r4, #4]
 800c2ea:	6923      	ldr	r3, [r4, #16]
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	f043 0308 	orr.w	r3, r3, #8
 800c2f4:	81a3      	strh	r3, [r4, #12]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	b94b      	cbnz	r3, 800c30e <__swsetup_r+0x7a>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c304:	d003      	beq.n	800c30e <__swsetup_r+0x7a>
 800c306:	4621      	mov	r1, r4
 800c308:	4628      	mov	r0, r5
 800c30a:	f000 f882 	bl	800c412 <__smakebuf_r>
 800c30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c312:	f013 0201 	ands.w	r2, r3, #1
 800c316:	d00a      	beq.n	800c32e <__swsetup_r+0x9a>
 800c318:	2200      	movs	r2, #0
 800c31a:	60a2      	str	r2, [r4, #8]
 800c31c:	6962      	ldr	r2, [r4, #20]
 800c31e:	4252      	negs	r2, r2
 800c320:	61a2      	str	r2, [r4, #24]
 800c322:	6922      	ldr	r2, [r4, #16]
 800c324:	b942      	cbnz	r2, 800c338 <__swsetup_r+0xa4>
 800c326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c32a:	d1c5      	bne.n	800c2b8 <__swsetup_r+0x24>
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	0799      	lsls	r1, r3, #30
 800c330:	bf58      	it	pl
 800c332:	6962      	ldrpl	r2, [r4, #20]
 800c334:	60a2      	str	r2, [r4, #8]
 800c336:	e7f4      	b.n	800c322 <__swsetup_r+0x8e>
 800c338:	2000      	movs	r0, #0
 800c33a:	e7f7      	b.n	800c32c <__swsetup_r+0x98>
 800c33c:	20000188 	.word	0x20000188

0800c340 <_raise_r>:
 800c340:	291f      	cmp	r1, #31
 800c342:	b538      	push	{r3, r4, r5, lr}
 800c344:	4605      	mov	r5, r0
 800c346:	460c      	mov	r4, r1
 800c348:	d904      	bls.n	800c354 <_raise_r+0x14>
 800c34a:	2316      	movs	r3, #22
 800c34c:	6003      	str	r3, [r0, #0]
 800c34e:	f04f 30ff 	mov.w	r0, #4294967295
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c356:	b112      	cbz	r2, 800c35e <_raise_r+0x1e>
 800c358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c35c:	b94b      	cbnz	r3, 800c372 <_raise_r+0x32>
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 f830 	bl	800c3c4 <_getpid_r>
 800c364:	4622      	mov	r2, r4
 800c366:	4601      	mov	r1, r0
 800c368:	4628      	mov	r0, r5
 800c36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36e:	f000 b817 	b.w	800c3a0 <_kill_r>
 800c372:	2b01      	cmp	r3, #1
 800c374:	d00a      	beq.n	800c38c <_raise_r+0x4c>
 800c376:	1c59      	adds	r1, r3, #1
 800c378:	d103      	bne.n	800c382 <_raise_r+0x42>
 800c37a:	2316      	movs	r3, #22
 800c37c:	6003      	str	r3, [r0, #0]
 800c37e:	2001      	movs	r0, #1
 800c380:	e7e7      	b.n	800c352 <_raise_r+0x12>
 800c382:	2100      	movs	r1, #0
 800c384:	4620      	mov	r0, r4
 800c386:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c38a:	4798      	blx	r3
 800c38c:	2000      	movs	r0, #0
 800c38e:	e7e0      	b.n	800c352 <_raise_r+0x12>

0800c390 <raise>:
 800c390:	4b02      	ldr	r3, [pc, #8]	@ (800c39c <raise+0xc>)
 800c392:	4601      	mov	r1, r0
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	f7ff bfd3 	b.w	800c340 <_raise_r>
 800c39a:	bf00      	nop
 800c39c:	20000188 	.word	0x20000188

0800c3a0 <_kill_r>:
 800c3a0:	b538      	push	{r3, r4, r5, lr}
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	4d06      	ldr	r5, [pc, #24]	@ (800c3c0 <_kill_r+0x20>)
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	4608      	mov	r0, r1
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	602b      	str	r3, [r5, #0]
 800c3ae:	f7f5 f80c 	bl	80013ca <_kill>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	d102      	bne.n	800c3bc <_kill_r+0x1c>
 800c3b6:	682b      	ldr	r3, [r5, #0]
 800c3b8:	b103      	cbz	r3, 800c3bc <_kill_r+0x1c>
 800c3ba:	6023      	str	r3, [r4, #0]
 800c3bc:	bd38      	pop	{r3, r4, r5, pc}
 800c3be:	bf00      	nop
 800c3c0:	200016b8 	.word	0x200016b8

0800c3c4 <_getpid_r>:
 800c3c4:	f7f4 bffa 	b.w	80013bc <_getpid>

0800c3c8 <__swhatbuf_r>:
 800c3c8:	b570      	push	{r4, r5, r6, lr}
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d0:	4615      	mov	r5, r2
 800c3d2:	2900      	cmp	r1, #0
 800c3d4:	461e      	mov	r6, r3
 800c3d6:	b096      	sub	sp, #88	@ 0x58
 800c3d8:	da0c      	bge.n	800c3f4 <__swhatbuf_r+0x2c>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	2100      	movs	r1, #0
 800c3de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3e2:	bf14      	ite	ne
 800c3e4:	2340      	movne	r3, #64	@ 0x40
 800c3e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	6031      	str	r1, [r6, #0]
 800c3ee:	602b      	str	r3, [r5, #0]
 800c3f0:	b016      	add	sp, #88	@ 0x58
 800c3f2:	bd70      	pop	{r4, r5, r6, pc}
 800c3f4:	466a      	mov	r2, sp
 800c3f6:	f000 f849 	bl	800c48c <_fstat_r>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	dbed      	blt.n	800c3da <__swhatbuf_r+0x12>
 800c3fe:	9901      	ldr	r1, [sp, #4]
 800c400:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c404:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c408:	4259      	negs	r1, r3
 800c40a:	4159      	adcs	r1, r3
 800c40c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c410:	e7eb      	b.n	800c3ea <__swhatbuf_r+0x22>

0800c412 <__smakebuf_r>:
 800c412:	898b      	ldrh	r3, [r1, #12]
 800c414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c416:	079d      	lsls	r5, r3, #30
 800c418:	4606      	mov	r6, r0
 800c41a:	460c      	mov	r4, r1
 800c41c:	d507      	bpl.n	800c42e <__smakebuf_r+0x1c>
 800c41e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c422:	6023      	str	r3, [r4, #0]
 800c424:	6123      	str	r3, [r4, #16]
 800c426:	2301      	movs	r3, #1
 800c428:	6163      	str	r3, [r4, #20]
 800c42a:	b003      	add	sp, #12
 800c42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c42e:	466a      	mov	r2, sp
 800c430:	ab01      	add	r3, sp, #4
 800c432:	f7ff ffc9 	bl	800c3c8 <__swhatbuf_r>
 800c436:	9f00      	ldr	r7, [sp, #0]
 800c438:	4605      	mov	r5, r0
 800c43a:	4639      	mov	r1, r7
 800c43c:	4630      	mov	r0, r6
 800c43e:	f7fe fecd 	bl	800b1dc <_malloc_r>
 800c442:	b948      	cbnz	r0, 800c458 <__smakebuf_r+0x46>
 800c444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c448:	059a      	lsls	r2, r3, #22
 800c44a:	d4ee      	bmi.n	800c42a <__smakebuf_r+0x18>
 800c44c:	f023 0303 	bic.w	r3, r3, #3
 800c450:	f043 0302 	orr.w	r3, r3, #2
 800c454:	81a3      	strh	r3, [r4, #12]
 800c456:	e7e2      	b.n	800c41e <__smakebuf_r+0xc>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c45e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	9b01      	ldr	r3, [sp, #4]
 800c466:	6020      	str	r0, [r4, #0]
 800c468:	b15b      	cbz	r3, 800c482 <__smakebuf_r+0x70>
 800c46a:	4630      	mov	r0, r6
 800c46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c470:	f000 f81e 	bl	800c4b0 <_isatty_r>
 800c474:	b128      	cbz	r0, 800c482 <__smakebuf_r+0x70>
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	f023 0303 	bic.w	r3, r3, #3
 800c47c:	f043 0301 	orr.w	r3, r3, #1
 800c480:	81a3      	strh	r3, [r4, #12]
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	431d      	orrs	r5, r3
 800c486:	81a5      	strh	r5, [r4, #12]
 800c488:	e7cf      	b.n	800c42a <__smakebuf_r+0x18>
	...

0800c48c <_fstat_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	2300      	movs	r3, #0
 800c490:	4d06      	ldr	r5, [pc, #24]	@ (800c4ac <_fstat_r+0x20>)
 800c492:	4604      	mov	r4, r0
 800c494:	4608      	mov	r0, r1
 800c496:	4611      	mov	r1, r2
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	f7f4 fff5 	bl	8001488 <_fstat>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d102      	bne.n	800c4a8 <_fstat_r+0x1c>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	b103      	cbz	r3, 800c4a8 <_fstat_r+0x1c>
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	bf00      	nop
 800c4ac:	200016b8 	.word	0x200016b8

0800c4b0 <_isatty_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4d05      	ldr	r5, [pc, #20]	@ (800c4cc <_isatty_r+0x1c>)
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	602b      	str	r3, [r5, #0]
 800c4bc:	f7f4 fff3 	bl	80014a6 <_isatty>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_isatty_r+0x1a>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_isatty_r+0x1a>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	200016b8 	.word	0x200016b8

0800c4d0 <_init>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	bf00      	nop
 800c4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d6:	bc08      	pop	{r3}
 800c4d8:	469e      	mov	lr, r3
 800c4da:	4770      	bx	lr

0800c4dc <_fini>:
 800c4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4de:	bf00      	nop
 800c4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4e2:	bc08      	pop	{r3}
 800c4e4:	469e      	mov	lr, r3
 800c4e6:	4770      	bx	lr
